# afusion/api.py

import os
import json
import re
import uuid
import pandas as pd
from afusion.execution import run_alphafold
from afusion.utils import compress_output_folder
from loguru import logger


def create_batch_task(job_name, entities, model_seeds, bonded_atom_pairs=None, user_ccd=None):
    """
    Creates a batch task dictionary for a single prediction.

    Parameters:
    - job_name: str, name of the job.
    - entities: list of dictionaries, each representing an Entity.
        Each entity dict should have keys:
        - 'type': 'protein', 'rna', 'dna', or 'ligand'
        - 'id': str or list
        - 'sequence_data': dict with sequence information
    - model_seeds: list of integers
    - bonded_atom_pairs: list (optional)
    - user_ccd: str (optional)

    Returns:
    - task: dict representing the AlphaFold input JSON structure
    """
    sequences = []
    for entity in entities:
        entity_type = entity['type']
        sequence_data = entity['sequence_data']
        entity_id = entity['id']

        sequence_entry = sequence_data.copy()
        sequence_entry['id'] = entity_id

        if entity_type == 'protein':
            sequences.append({'protein': sequence_entry})
        elif entity_type == 'rna':
            sequences.append({'rna': sequence_entry})
        elif entity_type == 'dna':
            sequences.append({'dna': sequence_entry})
        elif entity_type == 'ligand':
            sequences.append({'ligand': sequence_entry})
        else:
            logger.error(f"Unknown entity type: {entity_type}")
            continue

    alphafold_input = {
        "name": job_name,
        "modelSeeds": model_seeds,
        "sequences": sequences,
        "dialect": "alphafold3",
        "version": 1
    }

    if bonded_atom_pairs:
        alphafold_input["bondedAtomPairs"] = bonded_atom_pairs

    if user_ccd:
        alphafold_input["userCCD"] = user_ccd

    logger.debug(f"Created task for job: {job_name}")
    return alphafold_input


def run_batch_predictions(
    tasks,
    af_input_base_path,
    af_output_base_path,
    model_parameters_dir,
    databases_dir,
    run_data_pipeline=True,
    run_inference=True,
    bucket_sizes=None,
):
    """
    Runs batch predictions for the given tasks.

    Parameters:
    - tasks: list of task dicts, as generated by create_batch_task
    - af_input_base_path: str, base path for AlphaFold input
    - af_output_base_path: str, base path for AlphaFold output
    - model_parameters_dir: str, path to model parameters directory
    - databases_dir: str, path to databases directory
    - run_data_pipeline: bool
    - run_inference: bool
    - bucket_sizes: list of ints (optional)

    Returns:
    - results: list of dicts with keys 'job_name', 'output_folder', 'status'
    """
    results = []
    for task in tasks:
        job_name = task['name']
        job_folder_name = sanitize_job_name(job_name)
        input_path = os.path.join(af_input_base_path, job_folder_name)
        output_path = os.path.join(af_output_base_path, job_folder_name)
        os.makedirs(input_path, exist_ok=True)
        os.makedirs(output_path, exist_ok=True)

        json_save_path = os.path.join(input_path, "fold_input.json")
        try:
            with open(json_save_path, "w") as json_file:
                json.dump(task, json_file, indent=2)
            logger.info(f"JSON file saved for job '{job_name}' at {json_save_path}")
        except Exception as e:
            logger.error(f"Error saving JSON file for job '{job_name}': {e}")
            results.append({
                'job_name': job_name,
                'output_folder': output_path,
                'status': f'Failed to save JSON: {e}'
            })
            continue

        # Build the Docker command
        docker_command = (
            f"docker run --rm "
            f"--volume {input_path}:/root/af_input "
            f"--volume {output_path}:/root/af_output "
            f"--volume {model_parameters_dir}:/root/models "
            f"--volume {databases_dir}:/root/public_databases "
            f"--gpus all "
            f"alphafold3 "
            f"python run_alphafold.py "
            f"--json_path=/root/af_input/fold_input.json "
            f"--model_dir=/root/models "
            f"--output_dir=/root/af_output "
            f"{'--run_data_pipeline' if run_data_pipeline else ''} "
            f"{'--run_inference' if run_inference else ''} "
            f"{'--buckets ' + ','.join(map(str, bucket_sizes)) if bucket_sizes else ''}"
        )

        logger.debug(f"Running Docker command for job '{job_name}': {docker_command}")

        # Run AlphaFold
        try:
            output = run_alphafold(docker_command)
            logger.info(f"AlphaFold execution completed for job '{job_name}'.")

            # Check if the output directory exists
            expected_output_folder = os.path.join(output_path, job_folder_name)
            if os.path.exists(expected_output_folder):
                logger.info(f"Results saved in: {expected_output_folder}")
                status = 'Success'
            else:
                logger.error(f"Output folder '{expected_output_folder}' not found for job '{job_name}'.")
                status = 'Failed'
        except Exception as e:
            logger.error(f"Error running AlphaFold for job '{job_name}': {e}")
            status = f'Failed to run AlphaFold: {e}'

        results.append({
            'job_name': job_name,
            'output_folder': output_path,
            'status': status
        })

    return results


def sanitize_job_name(name):
    """
    Sanitizes the job name to be used as a folder name.
    Keeps only uppercase letters and numbers.
    """
    sanitized = re.sub('[^A-Z0-9]', '_', name.upper())
    return sanitized


def create_protein_sequence_data(sequence, modifications=None, msa_option='auto', unpaired_msa=None, paired_msa=None, templates=None):
    """
    Creates sequence data for a protein entity.

    Parameters:
    - sequence: str
    - modifications: list of dicts (optional), each with keys 'ptmType' and 'ptmPosition'
    - msa_option: str, 'auto', 'upload', or 'none'
    - unpaired_msa: str (if msa_option is 'upload')
    - paired_msa: str (if msa_option is 'upload')
    - templates: list of templates dicts (optional)

    Returns:
    - sequence_data: dict
    """
    protein_entry = {
        "sequence": sequence
    }
    if modifications:
        protein_entry["modifications"] = modifications
    if msa_option == 'auto':
        protein_entry["unpairedMsa"] = None
        protein_entry["pairedMsa"] = None
        protein_entry["templates"] = []
    elif msa_option == 'none':
        protein_entry["unpairedMsa"] = ""
        protein_entry["pairedMsa"] = ""
        protein_entry["templates"] = []
    elif msa_option == 'upload':
        protein_entry["unpairedMsa"] = unpaired_msa or ""
        protein_entry["pairedMsa"] = paired_msa or ""
        protein_entry["templates"] = templates or []
    else:
        logger.error(f"Invalid msa_option: {msa_option}")
    return protein_entry


def create_rna_sequence_data(sequence, modifications=None, msa_option='auto', unpaired_msa=None):
    """
    Creates sequence data for an RNA entity.
    """
    rna_entry = {
        "sequence": sequence
    }
    if modifications:
        rna_entry["modifications"] = modifications
    if msa_option == 'auto':
        rna_entry["unpairedMsa"] = None
    elif msa_option == 'none':
        rna_entry["unpairedMsa"] = ""
    elif msa_option == 'upload':
        rna_entry["unpairedMsa"] = unpaired_msa or ""
    else:
        logger.error(f"Invalid msa_option: {msa_option}")
    return rna_entry


def create_dna_sequence_data(sequence, modifications=None):
    """
    Creates sequence data for a DNA entity.
    """
    dna_entry = {
        "sequence": sequence
    }
    if modifications:
        dna_entry["modifications"] = modifications
    return dna_entry


def create_ligand_sequence_data(ccd_codes=None, smiles=None):
    """
    Creates sequence data for a ligand entity.
    """
    if ccd_codes and smiles:
        logger.error("Please provide only one of CCD Codes or SMILES String.")
        return {}
    elif ccd_codes:
        ligand_entry = {
            "ccdCodes": ccd_codes
        }
        return ligand_entry
    elif smiles:
        ligand_entry = {
            "smiles": smiles
        }
        return ligand_entry
    else:
        logger.error("Ligand requires either CCD Codes or SMILES String.")
        return {}


def create_tasks_from_dataframe(df):
    """
    Creates batch tasks from a DataFrame.

    Parameters:
    - df: pandas DataFrame with columns representing parameters:
        - 'job_name': str
        - 'type': 'protein', 'rna', 'dna', or 'ligand'
        - 'id': str or list
        - 'sequence': str
        - Other optional parameters:
            - 'modifications': list of dicts (as JSON string)
            - 'msa_option': 'auto', 'upload', or 'none'
            - 'unpaired_msa': str
            - 'paired_msa': str
            - 'templates': list of dicts (as JSON string)
            - 'model_seeds': list of integers (as string)
            - 'bonded_atom_pairs': list (as JSON string)
            - 'user_ccd': str

    Returns:
    - tasks: list of task dicts
    """
    tasks = []
    grouped = df.groupby('job_name')
    for job_name, group in grouped:
        entities = []
        model_seeds = None
        bonded_atom_pairs = None
        user_ccd = None

        for _, row in group.iterrows():
            entity_type = row['type']
            entity_id = row['id']
            sequence = row.get('sequence', '')

            # Parse optional fields
            modifications = parse_json_field(row.get('modifications'))
            msa_option = row.get('msa_option', 'auto')
            unpaired_msa = row.get('unpaired_msa')
            paired_msa = row.get('paired_msa')
            templates = parse_json_field(row.get('templates'))

            # Create sequence data based on entity type
            if entity_type == 'protein':
                sequence_data = create_protein_sequence_data(
                    sequence=sequence,
                    modifications=modifications,
                    msa_option=msa_option,
                    unpaired_msa=unpaired_msa,
                    paired_msa=paired_msa,
                    templates=templates
                )
            elif entity_type == 'rna':
                sequence_data = create_rna_sequence_data(
                    sequence=sequence,
                    modifications=modifications,
                    msa_option=msa_option,
                    unpaired_msa=unpaired_msa
                )
            elif entity_type == 'dna':
                sequence_data = create_dna_sequence_data(
                    sequence=sequence,
                    modifications=modifications
                )
            elif entity_type == 'ligand':
                ccd_codes = parse_list_field(row.get('ccd_codes'))
                smiles = row.get('smiles')
                sequence_data = create_ligand_sequence_data(
                    ccd_codes=ccd_codes,
                    smiles=smiles
                )
            else:
                logger.error(f"Unknown entity type: {entity_type}")
                continue

            entities.append({
                'type': entity_type,
                'id': entity_id,
                'sequence_data': sequence_data
            })

            # Get job-level parameters (assuming they are the same for all entities in the group)
            if model_seeds is None and pd.notna(row.get('model_seeds')):
                model_seeds = parse_list_field(row.get('model_seeds'), data_type=int)
            if bonded_atom_pairs is None and pd.notna(row.get('bonded_atom_pairs')):
                bonded_atom_pairs = parse_json_field(row.get('bonded_atom_pairs'))
            if user_ccd is None and pd.notna(row.get('user_ccd')):
                user_ccd = row.get('user_ccd')

        if model_seeds is None:
            model_seeds = [1]  # Default seed if not provided

        task = create_batch_task(
            job_name=job_name,
            entities=entities,
            model_seeds=model_seeds,
            bonded_atom_pairs=bonded_atom_pairs,
            user_ccd=user_ccd
        )
        tasks.append(task)
    return tasks


def parse_json_field(value):
    """
    Parses a JSON string field into a Python object.
    Returns None if the value is NaN or empty.
    """
    if pd.isna(value) or value == '':
        return None
    try:
        return json.loads(value)
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}")
        return None

def parse_list_field(value, data_type=str):
    """
    Parses a comma-separated string field into a list.
    Returns None if the value is NaN or empty.
    """
    if pd.isna(value) or value == '':
        return None
    return [data_type(item.strip()) for item in value.split(',') if item.strip()]

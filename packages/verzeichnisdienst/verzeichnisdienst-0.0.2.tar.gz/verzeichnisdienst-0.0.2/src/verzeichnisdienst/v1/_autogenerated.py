# generated by datamodel-codegen:
#   filename:  openapi.yml
#   timestamp: 2024-11-18T08:44:34+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, Optional

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field, constr


class Status(Enum):
    Offline = "Offline"
    Test = "Test"
    Maintenance = "Maintenance"
    Online = "Online"


class ApiRecord(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    providerId: constr(min_length=1) = Field(
        ...,
        description='Eindeutige Kennung des verantwortlichen API-Anbieters; Hinweise in Kapitel "Einträge im Verzeichnis" beachten.',
    )
    apiId: constr(min_length=1) = Field(
        ...,
        description='Eindeutige Kennung des API-Webdiensts; Hinweise in Kapitel "Einträge im Verzeichnis" beachten.',
    )
    majorVersion: int = Field(
        ..., description='Major Version des API-Webdiensts; Hinweise in Kapitel "Einträge im Verzeichnis" beachten.'
    )
    url: AnyUrl = Field(..., description="Adresse des Endpunkts, an dem der API-Webdienst aufgerufen werden kann.")
    additionalMetadata: Optional[Dict[str, str]] = Field(
        None,
        description="Zusätzliche Informationen über den Aufruf oder die Antworten des entsprechenden API-Webdiensts in Form von Schlüssel-Wert-Paaren. Dieses Feld ist optional und es wird durch übergreifende Regelungen außerhalb dieser Spezifikation sowie durch die Spezifikation des entsprechenden API-Webdiensts festgelegt, welche Informationen zu hinterlegen sind.",
    )
    lastUpdated: AwareDatetime = Field(..., description="Zeitpunkt der letzten Aktualisierung des Verzeichniseintrags.")
    revision: int = Field(
        ...,
        description="Fortlaufende Revisionsnummer des Verzeichniseintrags. Wird bei jeder Aktualisierung des Eintrags inkrementiert.",
    )
    status: Status = Field(
        ..., description='Aktueller Status des hinterlegten API-Endpunkts; Hinweise in Kapitel "Statusmodell" beachten.'
    )


class ContactInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    email: Optional[str] = Field(None, description="Email-Adresse des technischen Supports.")
    phone: Optional[str] = Field(None, description="Telefonnummer des technischen Supports.")


class ServiceInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    version: constr(min_length=1) = Field(
        ..., description="Vollqualifizierte Versionsnummer der implementierten Schnittstelle."
    )
    contact: ContactInfo
    lastUpdated: AwareDatetime = Field(..., description="Zeitpunkt der letzten Aktualisierung dieser Information.")
    revision: int = Field(
        ...,
        description="Fortlaufende Revisionsnummer dieser Information. Beginnt bei 1 und wird bei jeder Aktualisierung inkrementiert.",
    )

# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DomainIntersectionGoogleDataforseoLabsAvailableFiltersGoogleInfo(BaseModel):
    """
    DomainIntersectionGoogleDataforseoLabsAvailableFiltersGoogleInfo
    """ # noqa: E501
    keyword_data_keyword: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword")
    keyword_data_keyword_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.last_updated_time")
    keyword_data_keyword_info_competition: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.competition")
    keyword_data_keyword_info_competition_level: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.competition_level")
    keyword_data_keyword_info_cpc: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.cpc")
    keyword_data_keyword_info_search_volume: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.search_volume")
    keyword_data_keyword_info_low_top_of_page_bid: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.low_top_of_page_bid")
    keyword_data_keyword_info_high_top_of_page_bid: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.high_top_of_page_bid")
    keyword_data_keyword_info_categories: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.categories")
    keyword_data_keyword_info_search_volume_trend_monthly: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.search_volume_trend.monthly")
    keyword_data_keyword_info_search_volume_trend_quarterly: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.search_volume_trend.quarterly")
    keyword_data_keyword_info_search_volume_trend_yearly: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.search_volume_trend.yearly")
    keyword_data_clickstream_keyword_info_search_volume: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.search_volume")
    keyword_data_clickstream_keyword_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.last_updated_time")
    keyword_data_clickstream_keyword_info_gender_distribution_female: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.gender_distribution.female")
    keyword_data_clickstream_keyword_info_gender_distribution_male: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.gender_distribution.male")
    keyword_data_clickstream_keyword_info_age_distribution_18_24: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.age_distribution.18-24")
    keyword_data_clickstream_keyword_info_age_distribution_25_34: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.age_distribution.25-34")
    keyword_data_clickstream_keyword_info_age_distribution_35_44: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.age_distribution.35-44")
    keyword_data_clickstream_keyword_info_age_distribution_45_54: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.age_distribution.45-54")
    keyword_data_clickstream_keyword_info_age_distribution_55_64: Optional[StrictStr] = Field(default=None, alias="keyword_data.clickstream_keyword_info.age_distribution.55-64")
    keyword_data_keyword_properties_core_keyword: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.core_keyword")
    keyword_data_keyword_properties_synonym_clustering_algorithm: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.synonym_clustering_algorithm")
    keyword_data_keyword_properties_keyword_difficulty: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.keyword_difficulty")
    keyword_data_keyword_properties_detected_language: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.detected_language")
    keyword_data_keyword_properties_is_another_language: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.is_another_language")
    keyword_data_impressions_info_bid: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.bid")
    keyword_data_impressions_info_match_type: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.match_type")
    keyword_data_impressions_info_ad_position_min: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.ad_position_min")
    keyword_data_impressions_info_ad_position_max: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.ad_position_max")
    keyword_data_impressions_info_ad_position_average: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.ad_position_average")
    keyword_data_impressions_info_cpc_min: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.cpc_min")
    keyword_data_impressions_info_cpc_max: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.cpc_max")
    keyword_data_impressions_info_cpc_average: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.cpc_average")
    keyword_data_impressions_info_daily_impressions_min: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_impressions_min")
    keyword_data_impressions_info_daily_impressions_max: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_impressions_max")
    keyword_data_impressions_info_daily_impressions_average: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_impressions_average")
    keyword_data_impressions_info_daily_clicks_min: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_clicks_min")
    keyword_data_impressions_info_daily_clicks_max: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_clicks_max")
    keyword_data_impressions_info_daily_clicks_average: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_clicks_average")
    keyword_data_impressions_info_daily_cost_min: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_cost_min")
    keyword_data_impressions_info_daily_cost_max: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_cost_max")
    keyword_data_impressions_info_daily_cost_average: Optional[StrictStr] = Field(default=None, alias="keyword_data.impressions_info.daily_cost_average")
    keyword_data_serp_info_check_url: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.check_url")
    keyword_data_serp_info_serp_item_types: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.serp_item_types")
    keyword_data_serp_info_se_results_count: Optional[StrictInt] = Field(default=None, alias="keyword_data.serp_info.se_results_count")
    keyword_data_serp_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.last_updated_time")
    keyword_data_serp_info_previous_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.previous_updated_time")
    keyword_data_avg_backlinks_info_backlinks: Optional[StrictStr] = Field(default=None, alias="keyword_data.avg_backlinks_info.backlinks")
    keyword_data_avg_backlinks_info_dofollow: Optional[StrictStr] = Field(default=None, alias="keyword_data.avg_backlinks_info.dofollow")
    keyword_data_avg_backlinks_info_referring_pages: Optional[StrictStr] = Field(default=None, alias="keyword_data.avg_backlinks_info.referring_pages")
    keyword_data_avg_backlinks_info_referring_domains: Optional[StrictStr] = Field(default=None, alias="keyword_data.avg_backlinks_info.referring_domains")
    keyword_data_avg_backlinks_info_referring_main_domains: Optional[StrictStr] = Field(default=None, alias="keyword_data.avg_backlinks_info.referring_main_domains")
    keyword_data_avg_backlinks_info_rank: Optional[StrictStr] = Field(default=None, alias="keyword_data.avg_backlinks_info.rank")
    keyword_data_avg_backlinks_info_main_domain_rank: Optional[StrictStr] = Field(default=None, alias="keyword_data.avg_backlinks_info.main_domain_rank")
    keyword_data_avg_backlinks_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.avg_backlinks_info.last_updated_time")
    keyword_data_search_intent_info_main_intent: Optional[StrictStr] = Field(default=None, alias="keyword_data.search_intent_info.main_intent")
    keyword_data_search_intent_info_foreign_intent: Optional[StrictStr] = Field(default=None, alias="keyword_data.search_intent_info.foreign_intent")
    keyword_data_search_intent_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.search_intent_info.last_updated_time")
    keyword_data_keyword_info_normalized_with_bing_search_volume: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info_normalized_with_bing.search_volume")
    keyword_data_keyword_info_normalized_with_bing_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info_normalized_with_bing.last_updated_time")
    keyword_data_keyword_info_normalized_with_bing_is_normalized: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info_normalized_with_bing.is_normalized")
    keyword_data_keyword_info_normalized_with_clickstream_search_volume: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info_normalized_with_clickstream.search_volume")
    keyword_data_keyword_info_normalized_with_clickstream_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info_normalized_with_clickstream.last_updated_time")
    keyword_data_keyword_info_normalized_with_clickstream_is_normalized: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info_normalized_with_clickstream.is_normalized")
    first_domain_serp_element_type: Optional[StrictStr] = Field(default=None, description="type of element", alias="first_domain_serp_element.type")
    first_domain_serp_element_rank_group: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.rank_group")
    first_domain_serp_element_rank_absolute: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.rank_absolute")
    first_domain_serp_element_position: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.position")
    first_domain_serp_element_xpath: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.xpath")
    first_domain_serp_element_title: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.title")
    first_domain_serp_element_pre_snippet: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.pre_snippet")
    first_domain_serp_element_description: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.description")
    first_domain_serp_element_breadcrumb: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.breadcrumb")
    first_domain_serp_element_is_image: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.is_image")
    first_domain_serp_element_is_video: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.is_video")
    first_domain_serp_element_is_featured_snippet: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.is_featured_snippet")
    first_domain_serp_element_amp_version: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.amp_version")
    first_domain_serp_element_is_malicious: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.is_malicious")
    first_domain_serp_element_extended_snippet: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.extended_snippet")
    first_domain_serp_element_domain: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.domain")
    first_domain_serp_element_main_domain: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.main_domain")
    first_domain_serp_element_url: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.url")
    first_domain_serp_element_relative_url: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.relative_url")
    first_domain_serp_element_etv: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.etv")
    first_domain_serp_element_impressions_etv: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.impressions_etv")
    first_domain_serp_element_clickstream_etv: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.clickstream_etv")
    first_domain_serp_element_rank_changes_previous_rank_absolute: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.rank_changes.previous_rank_absolute")
    first_domain_serp_element_rank_changes_is_new: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.rank_changes.is_new")
    first_domain_serp_element_rank_changes_is_up: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.rank_changes.is_up")
    first_domain_serp_element_rank_changes_is_down: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.rank_changes.is_down")
    first_domain_serp_element_extra_ad_aclk: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.extra.ad_aclk")
    first_domain_serp_element_description_rows: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.description_rows")
    first_domain_serp_element_phone: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.phone")
    first_domain_serp_element_is_paid: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.is_paid")
    first_domain_serp_element_featured_title: Optional[StrictStr] = Field(default=None, alias="first_domain_serp_element.featured_title")
    second_domain_serp_element_type: Optional[StrictStr] = Field(default=None, description="type of element", alias="second_domain_serp_element.type")
    second_domain_serp_element_rank_group: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.rank_group")
    second_domain_serp_element_rank_absolute: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.rank_absolute")
    second_domain_serp_element_position: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.position")
    second_domain_serp_element_xpath: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.xpath")
    second_domain_serp_element_title: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.title")
    second_domain_serp_element_pre_snippet: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.pre_snippet")
    second_domain_serp_element_description: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.description")
    second_domain_serp_element_breadcrumb: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.breadcrumb")
    second_domain_serp_element_is_image: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.is_image")
    second_domain_serp_element_is_video: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.is_video")
    second_domain_serp_element_is_featured_snippet: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.is_featured_snippet")
    second_domain_serp_element_amp_version: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.amp_version")
    second_domain_serp_element_is_malicious: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.is_malicious")
    second_domain_serp_element_extended_snippet: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.extended_snippet")
    second_domain_serp_element_domain: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.domain")
    second_domain_serp_element_main_domain: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.main_domain")
    second_domain_serp_element_url: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.url")
    second_domain_serp_element_relative_url: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.relative_url")
    second_domain_serp_element_etv: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.etv")
    second_domain_serp_element_impressions_etv: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.impressions_etv")
    second_domain_serp_element_clickstream_etv: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.clickstream_etv")
    second_domain_serp_element_estimated_paid_traffic_cost: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.estimated_paid_traffic_cost")
    second_domain_serp_element_rank_changes_previous_rank_absolute: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.rank_changes.previous_rank_absolute")
    second_domain_serp_element_rank_changes_is_new: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.rank_changes.is_new")
    second_domain_serp_element_rank_changes_is_up: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.rank_changes.is_up")
    second_domain_serp_element_rank_changes_is_down: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.rank_changes.is_down")
    second_domain_serp_element_extra_ad_aclk: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.extra.ad_aclk")
    second_domain_serp_element_description_rows: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.description_rows")
    second_domain_serp_element_phone: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.phone")
    second_domain_serp_element_is_paid: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.is_paid")
    second_domain_serp_element_featured_title: Optional[StrictStr] = Field(default=None, alias="second_domain_serp_element.featured_title")
    __properties: ClassVar[List[str]] = ["keyword_data.keyword", "keyword_data.keyword_info.last_updated_time", "keyword_data.keyword_info.competition", "keyword_data.keyword_info.competition_level", "keyword_data.keyword_info.cpc", "keyword_data.keyword_info.search_volume", "keyword_data.keyword_info.low_top_of_page_bid", "keyword_data.keyword_info.high_top_of_page_bid", "keyword_data.keyword_info.categories", "keyword_data.keyword_info.search_volume_trend.monthly", "keyword_data.keyword_info.search_volume_trend.quarterly", "keyword_data.keyword_info.search_volume_trend.yearly", "keyword_data.clickstream_keyword_info.search_volume", "keyword_data.clickstream_keyword_info.last_updated_time", "keyword_data.clickstream_keyword_info.gender_distribution.female", "keyword_data.clickstream_keyword_info.gender_distribution.male", "keyword_data.clickstream_keyword_info.age_distribution.18-24", "keyword_data.clickstream_keyword_info.age_distribution.25-34", "keyword_data.clickstream_keyword_info.age_distribution.35-44", "keyword_data.clickstream_keyword_info.age_distribution.45-54", "keyword_data.clickstream_keyword_info.age_distribution.55-64", "keyword_data.keyword_properties.core_keyword", "keyword_data.keyword_properties.synonym_clustering_algorithm", "keyword_data.keyword_properties.keyword_difficulty", "keyword_data.keyword_properties.detected_language", "keyword_data.keyword_properties.is_another_language", "keyword_data.impressions_info.bid", "keyword_data.impressions_info.match_type", "keyword_data.impressions_info.ad_position_min", "keyword_data.impressions_info.ad_position_max", "keyword_data.impressions_info.ad_position_average", "keyword_data.impressions_info.cpc_min", "keyword_data.impressions_info.cpc_max", "keyword_data.impressions_info.cpc_average", "keyword_data.impressions_info.daily_impressions_min", "keyword_data.impressions_info.daily_impressions_max", "keyword_data.impressions_info.daily_impressions_average", "keyword_data.impressions_info.daily_clicks_min", "keyword_data.impressions_info.daily_clicks_max", "keyword_data.impressions_info.daily_clicks_average", "keyword_data.impressions_info.daily_cost_min", "keyword_data.impressions_info.daily_cost_max", "keyword_data.impressions_info.daily_cost_average", "keyword_data.serp_info.check_url", "keyword_data.serp_info.serp_item_types", "keyword_data.serp_info.se_results_count", "keyword_data.serp_info.last_updated_time", "keyword_data.serp_info.previous_updated_time", "keyword_data.avg_backlinks_info.backlinks", "keyword_data.avg_backlinks_info.dofollow", "keyword_data.avg_backlinks_info.referring_pages", "keyword_data.avg_backlinks_info.referring_domains", "keyword_data.avg_backlinks_info.referring_main_domains", "keyword_data.avg_backlinks_info.rank", "keyword_data.avg_backlinks_info.main_domain_rank", "keyword_data.avg_backlinks_info.last_updated_time", "keyword_data.search_intent_info.main_intent", "keyword_data.search_intent_info.foreign_intent", "keyword_data.search_intent_info.last_updated_time", "keyword_data.keyword_info_normalized_with_bing.search_volume", "keyword_data.keyword_info_normalized_with_bing.last_updated_time", "keyword_data.keyword_info_normalized_with_bing.is_normalized", "keyword_data.keyword_info_normalized_with_clickstream.search_volume", "keyword_data.keyword_info_normalized_with_clickstream.last_updated_time", "keyword_data.keyword_info_normalized_with_clickstream.is_normalized", "first_domain_serp_element.type", "first_domain_serp_element.rank_group", "first_domain_serp_element.rank_absolute", "first_domain_serp_element.position", "first_domain_serp_element.xpath", "first_domain_serp_element.title", "first_domain_serp_element.pre_snippet", "first_domain_serp_element.description", "first_domain_serp_element.breadcrumb", "first_domain_serp_element.is_image", "first_domain_serp_element.is_video", "first_domain_serp_element.is_featured_snippet", "first_domain_serp_element.amp_version", "first_domain_serp_element.is_malicious", "first_domain_serp_element.extended_snippet", "first_domain_serp_element.domain", "first_domain_serp_element.main_domain", "first_domain_serp_element.url", "first_domain_serp_element.relative_url", "first_domain_serp_element.etv", "first_domain_serp_element.impressions_etv", "first_domain_serp_element.clickstream_etv", "first_domain_serp_element.rank_changes.previous_rank_absolute", "first_domain_serp_element.rank_changes.is_new", "first_domain_serp_element.rank_changes.is_up", "first_domain_serp_element.rank_changes.is_down", "first_domain_serp_element.extra.ad_aclk", "first_domain_serp_element.description_rows", "first_domain_serp_element.phone", "first_domain_serp_element.is_paid", "first_domain_serp_element.featured_title", "second_domain_serp_element.type", "second_domain_serp_element.rank_group", "second_domain_serp_element.rank_absolute", "second_domain_serp_element.position", "second_domain_serp_element.xpath", "second_domain_serp_element.title", "second_domain_serp_element.pre_snippet", "second_domain_serp_element.description", "second_domain_serp_element.breadcrumb", "second_domain_serp_element.is_image", "second_domain_serp_element.is_video", "second_domain_serp_element.is_featured_snippet", "second_domain_serp_element.amp_version", "second_domain_serp_element.is_malicious", "second_domain_serp_element.extended_snippet", "second_domain_serp_element.domain", "second_domain_serp_element.main_domain", "second_domain_serp_element.url", "second_domain_serp_element.relative_url", "second_domain_serp_element.etv", "second_domain_serp_element.impressions_etv", "second_domain_serp_element.clickstream_etv", "second_domain_serp_element.estimated_paid_traffic_cost", "second_domain_serp_element.rank_changes.previous_rank_absolute", "second_domain_serp_element.rank_changes.is_new", "second_domain_serp_element.rank_changes.is_up", "second_domain_serp_element.rank_changes.is_down", "second_domain_serp_element.extra.ad_aclk", "second_domain_serp_element.description_rows", "second_domain_serp_element.phone", "second_domain_serp_element.is_paid", "second_domain_serp_element.featured_title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DomainIntersectionGoogleDataforseoLabsAvailableFiltersGoogleInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if keyword_data_keyword (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword is None and "keyword_data_keyword" in self.model_fields_set:
            _dict['keyword_data.keyword'] = None

        # set to None if keyword_data_keyword_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_last_updated_time is None and "keyword_data_keyword_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.keyword_info.last_updated_time'] = None

        # set to None if keyword_data_keyword_info_competition (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_competition is None and "keyword_data_keyword_info_competition" in self.model_fields_set:
            _dict['keyword_data.keyword_info.competition'] = None

        # set to None if keyword_data_keyword_info_competition_level (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_competition_level is None and "keyword_data_keyword_info_competition_level" in self.model_fields_set:
            _dict['keyword_data.keyword_info.competition_level'] = None

        # set to None if keyword_data_keyword_info_cpc (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_cpc is None and "keyword_data_keyword_info_cpc" in self.model_fields_set:
            _dict['keyword_data.keyword_info.cpc'] = None

        # set to None if keyword_data_keyword_info_search_volume (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_search_volume is None and "keyword_data_keyword_info_search_volume" in self.model_fields_set:
            _dict['keyword_data.keyword_info.search_volume'] = None

        # set to None if keyword_data_keyword_info_low_top_of_page_bid (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_low_top_of_page_bid is None and "keyword_data_keyword_info_low_top_of_page_bid" in self.model_fields_set:
            _dict['keyword_data.keyword_info.low_top_of_page_bid'] = None

        # set to None if keyword_data_keyword_info_high_top_of_page_bid (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_high_top_of_page_bid is None and "keyword_data_keyword_info_high_top_of_page_bid" in self.model_fields_set:
            _dict['keyword_data.keyword_info.high_top_of_page_bid'] = None

        # set to None if keyword_data_keyword_info_categories (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_categories is None and "keyword_data_keyword_info_categories" in self.model_fields_set:
            _dict['keyword_data.keyword_info.categories'] = None

        # set to None if keyword_data_keyword_info_search_volume_trend_monthly (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_search_volume_trend_monthly is None and "keyword_data_keyword_info_search_volume_trend_monthly" in self.model_fields_set:
            _dict['keyword_data.keyword_info.search_volume_trend.monthly'] = None

        # set to None if keyword_data_keyword_info_search_volume_trend_quarterly (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_search_volume_trend_quarterly is None and "keyword_data_keyword_info_search_volume_trend_quarterly" in self.model_fields_set:
            _dict['keyword_data.keyword_info.search_volume_trend.quarterly'] = None

        # set to None if keyword_data_keyword_info_search_volume_trend_yearly (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_search_volume_trend_yearly is None and "keyword_data_keyword_info_search_volume_trend_yearly" in self.model_fields_set:
            _dict['keyword_data.keyword_info.search_volume_trend.yearly'] = None

        # set to None if keyword_data_clickstream_keyword_info_search_volume (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_search_volume is None and "keyword_data_clickstream_keyword_info_search_volume" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.search_volume'] = None

        # set to None if keyword_data_clickstream_keyword_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_last_updated_time is None and "keyword_data_clickstream_keyword_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.last_updated_time'] = None

        # set to None if keyword_data_clickstream_keyword_info_gender_distribution_female (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_gender_distribution_female is None and "keyword_data_clickstream_keyword_info_gender_distribution_female" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.gender_distribution.female'] = None

        # set to None if keyword_data_clickstream_keyword_info_gender_distribution_male (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_gender_distribution_male is None and "keyword_data_clickstream_keyword_info_gender_distribution_male" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.gender_distribution.male'] = None

        # set to None if keyword_data_clickstream_keyword_info_age_distribution_18_24 (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_age_distribution_18_24 is None and "keyword_data_clickstream_keyword_info_age_distribution_18_24" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.age_distribution.18-24'] = None

        # set to None if keyword_data_clickstream_keyword_info_age_distribution_25_34 (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_age_distribution_25_34 is None and "keyword_data_clickstream_keyword_info_age_distribution_25_34" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.age_distribution.25-34'] = None

        # set to None if keyword_data_clickstream_keyword_info_age_distribution_35_44 (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_age_distribution_35_44 is None and "keyword_data_clickstream_keyword_info_age_distribution_35_44" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.age_distribution.35-44'] = None

        # set to None if keyword_data_clickstream_keyword_info_age_distribution_45_54 (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_age_distribution_45_54 is None and "keyword_data_clickstream_keyword_info_age_distribution_45_54" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.age_distribution.45-54'] = None

        # set to None if keyword_data_clickstream_keyword_info_age_distribution_55_64 (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_clickstream_keyword_info_age_distribution_55_64 is None and "keyword_data_clickstream_keyword_info_age_distribution_55_64" in self.model_fields_set:
            _dict['keyword_data.clickstream_keyword_info.age_distribution.55-64'] = None

        # set to None if keyword_data_keyword_properties_core_keyword (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_core_keyword is None and "keyword_data_keyword_properties_core_keyword" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.core_keyword'] = None

        # set to None if keyword_data_keyword_properties_synonym_clustering_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_synonym_clustering_algorithm is None and "keyword_data_keyword_properties_synonym_clustering_algorithm" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.synonym_clustering_algorithm'] = None

        # set to None if keyword_data_keyword_properties_keyword_difficulty (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_keyword_difficulty is None and "keyword_data_keyword_properties_keyword_difficulty" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.keyword_difficulty'] = None

        # set to None if keyword_data_keyword_properties_detected_language (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_detected_language is None and "keyword_data_keyword_properties_detected_language" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.detected_language'] = None

        # set to None if keyword_data_keyword_properties_is_another_language (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_is_another_language is None and "keyword_data_keyword_properties_is_another_language" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.is_another_language'] = None

        # set to None if keyword_data_impressions_info_bid (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_bid is None and "keyword_data_impressions_info_bid" in self.model_fields_set:
            _dict['keyword_data.impressions_info.bid'] = None

        # set to None if keyword_data_impressions_info_match_type (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_match_type is None and "keyword_data_impressions_info_match_type" in self.model_fields_set:
            _dict['keyword_data.impressions_info.match_type'] = None

        # set to None if keyword_data_impressions_info_ad_position_min (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_ad_position_min is None and "keyword_data_impressions_info_ad_position_min" in self.model_fields_set:
            _dict['keyword_data.impressions_info.ad_position_min'] = None

        # set to None if keyword_data_impressions_info_ad_position_max (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_ad_position_max is None and "keyword_data_impressions_info_ad_position_max" in self.model_fields_set:
            _dict['keyword_data.impressions_info.ad_position_max'] = None

        # set to None if keyword_data_impressions_info_ad_position_average (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_ad_position_average is None and "keyword_data_impressions_info_ad_position_average" in self.model_fields_set:
            _dict['keyword_data.impressions_info.ad_position_average'] = None

        # set to None if keyword_data_impressions_info_cpc_min (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_cpc_min is None and "keyword_data_impressions_info_cpc_min" in self.model_fields_set:
            _dict['keyword_data.impressions_info.cpc_min'] = None

        # set to None if keyword_data_impressions_info_cpc_max (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_cpc_max is None and "keyword_data_impressions_info_cpc_max" in self.model_fields_set:
            _dict['keyword_data.impressions_info.cpc_max'] = None

        # set to None if keyword_data_impressions_info_cpc_average (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_cpc_average is None and "keyword_data_impressions_info_cpc_average" in self.model_fields_set:
            _dict['keyword_data.impressions_info.cpc_average'] = None

        # set to None if keyword_data_impressions_info_daily_impressions_min (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_impressions_min is None and "keyword_data_impressions_info_daily_impressions_min" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_impressions_min'] = None

        # set to None if keyword_data_impressions_info_daily_impressions_max (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_impressions_max is None and "keyword_data_impressions_info_daily_impressions_max" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_impressions_max'] = None

        # set to None if keyword_data_impressions_info_daily_impressions_average (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_impressions_average is None and "keyword_data_impressions_info_daily_impressions_average" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_impressions_average'] = None

        # set to None if keyword_data_impressions_info_daily_clicks_min (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_clicks_min is None and "keyword_data_impressions_info_daily_clicks_min" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_clicks_min'] = None

        # set to None if keyword_data_impressions_info_daily_clicks_max (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_clicks_max is None and "keyword_data_impressions_info_daily_clicks_max" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_clicks_max'] = None

        # set to None if keyword_data_impressions_info_daily_clicks_average (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_clicks_average is None and "keyword_data_impressions_info_daily_clicks_average" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_clicks_average'] = None

        # set to None if keyword_data_impressions_info_daily_cost_min (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_cost_min is None and "keyword_data_impressions_info_daily_cost_min" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_cost_min'] = None

        # set to None if keyword_data_impressions_info_daily_cost_max (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_cost_max is None and "keyword_data_impressions_info_daily_cost_max" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_cost_max'] = None

        # set to None if keyword_data_impressions_info_daily_cost_average (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_impressions_info_daily_cost_average is None and "keyword_data_impressions_info_daily_cost_average" in self.model_fields_set:
            _dict['keyword_data.impressions_info.daily_cost_average'] = None

        # set to None if keyword_data_serp_info_check_url (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_check_url is None and "keyword_data_serp_info_check_url" in self.model_fields_set:
            _dict['keyword_data.serp_info.check_url'] = None

        # set to None if keyword_data_serp_info_serp_item_types (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_serp_item_types is None and "keyword_data_serp_info_serp_item_types" in self.model_fields_set:
            _dict['keyword_data.serp_info.serp_item_types'] = None

        # set to None if keyword_data_serp_info_se_results_count (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_se_results_count is None and "keyword_data_serp_info_se_results_count" in self.model_fields_set:
            _dict['keyword_data.serp_info.se_results_count'] = None

        # set to None if keyword_data_serp_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_last_updated_time is None and "keyword_data_serp_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.serp_info.last_updated_time'] = None

        # set to None if keyword_data_serp_info_previous_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_previous_updated_time is None and "keyword_data_serp_info_previous_updated_time" in self.model_fields_set:
            _dict['keyword_data.serp_info.previous_updated_time'] = None

        # set to None if keyword_data_avg_backlinks_info_backlinks (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_avg_backlinks_info_backlinks is None and "keyword_data_avg_backlinks_info_backlinks" in self.model_fields_set:
            _dict['keyword_data.avg_backlinks_info.backlinks'] = None

        # set to None if keyword_data_avg_backlinks_info_dofollow (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_avg_backlinks_info_dofollow is None and "keyword_data_avg_backlinks_info_dofollow" in self.model_fields_set:
            _dict['keyword_data.avg_backlinks_info.dofollow'] = None

        # set to None if keyword_data_avg_backlinks_info_referring_pages (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_avg_backlinks_info_referring_pages is None and "keyword_data_avg_backlinks_info_referring_pages" in self.model_fields_set:
            _dict['keyword_data.avg_backlinks_info.referring_pages'] = None

        # set to None if keyword_data_avg_backlinks_info_referring_domains (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_avg_backlinks_info_referring_domains is None and "keyword_data_avg_backlinks_info_referring_domains" in self.model_fields_set:
            _dict['keyword_data.avg_backlinks_info.referring_domains'] = None

        # set to None if keyword_data_avg_backlinks_info_referring_main_domains (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_avg_backlinks_info_referring_main_domains is None and "keyword_data_avg_backlinks_info_referring_main_domains" in self.model_fields_set:
            _dict['keyword_data.avg_backlinks_info.referring_main_domains'] = None

        # set to None if keyword_data_avg_backlinks_info_rank (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_avg_backlinks_info_rank is None and "keyword_data_avg_backlinks_info_rank" in self.model_fields_set:
            _dict['keyword_data.avg_backlinks_info.rank'] = None

        # set to None if keyword_data_avg_backlinks_info_main_domain_rank (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_avg_backlinks_info_main_domain_rank is None and "keyword_data_avg_backlinks_info_main_domain_rank" in self.model_fields_set:
            _dict['keyword_data.avg_backlinks_info.main_domain_rank'] = None

        # set to None if keyword_data_avg_backlinks_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_avg_backlinks_info_last_updated_time is None and "keyword_data_avg_backlinks_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.avg_backlinks_info.last_updated_time'] = None

        # set to None if keyword_data_search_intent_info_main_intent (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_search_intent_info_main_intent is None and "keyword_data_search_intent_info_main_intent" in self.model_fields_set:
            _dict['keyword_data.search_intent_info.main_intent'] = None

        # set to None if keyword_data_search_intent_info_foreign_intent (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_search_intent_info_foreign_intent is None and "keyword_data_search_intent_info_foreign_intent" in self.model_fields_set:
            _dict['keyword_data.search_intent_info.foreign_intent'] = None

        # set to None if keyword_data_search_intent_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_search_intent_info_last_updated_time is None and "keyword_data_search_intent_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.search_intent_info.last_updated_time'] = None

        # set to None if keyword_data_keyword_info_normalized_with_bing_search_volume (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_normalized_with_bing_search_volume is None and "keyword_data_keyword_info_normalized_with_bing_search_volume" in self.model_fields_set:
            _dict['keyword_data.keyword_info_normalized_with_bing.search_volume'] = None

        # set to None if keyword_data_keyword_info_normalized_with_bing_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_normalized_with_bing_last_updated_time is None and "keyword_data_keyword_info_normalized_with_bing_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.keyword_info_normalized_with_bing.last_updated_time'] = None

        # set to None if keyword_data_keyword_info_normalized_with_bing_is_normalized (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_normalized_with_bing_is_normalized is None and "keyword_data_keyword_info_normalized_with_bing_is_normalized" in self.model_fields_set:
            _dict['keyword_data.keyword_info_normalized_with_bing.is_normalized'] = None

        # set to None if keyword_data_keyword_info_normalized_with_clickstream_search_volume (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_normalized_with_clickstream_search_volume is None and "keyword_data_keyword_info_normalized_with_clickstream_search_volume" in self.model_fields_set:
            _dict['keyword_data.keyword_info_normalized_with_clickstream.search_volume'] = None

        # set to None if keyword_data_keyword_info_normalized_with_clickstream_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_normalized_with_clickstream_last_updated_time is None and "keyword_data_keyword_info_normalized_with_clickstream_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.keyword_info_normalized_with_clickstream.last_updated_time'] = None

        # set to None if keyword_data_keyword_info_normalized_with_clickstream_is_normalized (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_normalized_with_clickstream_is_normalized is None and "keyword_data_keyword_info_normalized_with_clickstream_is_normalized" in self.model_fields_set:
            _dict['keyword_data.keyword_info_normalized_with_clickstream.is_normalized'] = None

        # set to None if first_domain_serp_element_type (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_type is None and "first_domain_serp_element_type" in self.model_fields_set:
            _dict['first_domain_serp_element.type'] = None

        # set to None if first_domain_serp_element_rank_group (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_rank_group is None and "first_domain_serp_element_rank_group" in self.model_fields_set:
            _dict['first_domain_serp_element.rank_group'] = None

        # set to None if first_domain_serp_element_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_rank_absolute is None and "first_domain_serp_element_rank_absolute" in self.model_fields_set:
            _dict['first_domain_serp_element.rank_absolute'] = None

        # set to None if first_domain_serp_element_position (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_position is None and "first_domain_serp_element_position" in self.model_fields_set:
            _dict['first_domain_serp_element.position'] = None

        # set to None if first_domain_serp_element_xpath (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_xpath is None and "first_domain_serp_element_xpath" in self.model_fields_set:
            _dict['first_domain_serp_element.xpath'] = None

        # set to None if first_domain_serp_element_title (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_title is None and "first_domain_serp_element_title" in self.model_fields_set:
            _dict['first_domain_serp_element.title'] = None

        # set to None if first_domain_serp_element_pre_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_pre_snippet is None and "first_domain_serp_element_pre_snippet" in self.model_fields_set:
            _dict['first_domain_serp_element.pre_snippet'] = None

        # set to None if first_domain_serp_element_description (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_description is None and "first_domain_serp_element_description" in self.model_fields_set:
            _dict['first_domain_serp_element.description'] = None

        # set to None if first_domain_serp_element_breadcrumb (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_breadcrumb is None and "first_domain_serp_element_breadcrumb" in self.model_fields_set:
            _dict['first_domain_serp_element.breadcrumb'] = None

        # set to None if first_domain_serp_element_is_image (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_is_image is None and "first_domain_serp_element_is_image" in self.model_fields_set:
            _dict['first_domain_serp_element.is_image'] = None

        # set to None if first_domain_serp_element_is_video (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_is_video is None and "first_domain_serp_element_is_video" in self.model_fields_set:
            _dict['first_domain_serp_element.is_video'] = None

        # set to None if first_domain_serp_element_is_featured_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_is_featured_snippet is None and "first_domain_serp_element_is_featured_snippet" in self.model_fields_set:
            _dict['first_domain_serp_element.is_featured_snippet'] = None

        # set to None if first_domain_serp_element_amp_version (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_amp_version is None and "first_domain_serp_element_amp_version" in self.model_fields_set:
            _dict['first_domain_serp_element.amp_version'] = None

        # set to None if first_domain_serp_element_is_malicious (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_is_malicious is None and "first_domain_serp_element_is_malicious" in self.model_fields_set:
            _dict['first_domain_serp_element.is_malicious'] = None

        # set to None if first_domain_serp_element_extended_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_extended_snippet is None and "first_domain_serp_element_extended_snippet" in self.model_fields_set:
            _dict['first_domain_serp_element.extended_snippet'] = None

        # set to None if first_domain_serp_element_domain (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_domain is None and "first_domain_serp_element_domain" in self.model_fields_set:
            _dict['first_domain_serp_element.domain'] = None

        # set to None if first_domain_serp_element_main_domain (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_main_domain is None and "first_domain_serp_element_main_domain" in self.model_fields_set:
            _dict['first_domain_serp_element.main_domain'] = None

        # set to None if first_domain_serp_element_url (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_url is None and "first_domain_serp_element_url" in self.model_fields_set:
            _dict['first_domain_serp_element.url'] = None

        # set to None if first_domain_serp_element_relative_url (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_relative_url is None and "first_domain_serp_element_relative_url" in self.model_fields_set:
            _dict['first_domain_serp_element.relative_url'] = None

        # set to None if first_domain_serp_element_etv (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_etv is None and "first_domain_serp_element_etv" in self.model_fields_set:
            _dict['first_domain_serp_element.etv'] = None

        # set to None if first_domain_serp_element_impressions_etv (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_impressions_etv is None and "first_domain_serp_element_impressions_etv" in self.model_fields_set:
            _dict['first_domain_serp_element.impressions_etv'] = None

        # set to None if first_domain_serp_element_clickstream_etv (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_clickstream_etv is None and "first_domain_serp_element_clickstream_etv" in self.model_fields_set:
            _dict['first_domain_serp_element.clickstream_etv'] = None

        # set to None if first_domain_serp_element_rank_changes_previous_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_rank_changes_previous_rank_absolute is None and "first_domain_serp_element_rank_changes_previous_rank_absolute" in self.model_fields_set:
            _dict['first_domain_serp_element.rank_changes.previous_rank_absolute'] = None

        # set to None if first_domain_serp_element_rank_changes_is_new (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_rank_changes_is_new is None and "first_domain_serp_element_rank_changes_is_new" in self.model_fields_set:
            _dict['first_domain_serp_element.rank_changes.is_new'] = None

        # set to None if first_domain_serp_element_rank_changes_is_up (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_rank_changes_is_up is None and "first_domain_serp_element_rank_changes_is_up" in self.model_fields_set:
            _dict['first_domain_serp_element.rank_changes.is_up'] = None

        # set to None if first_domain_serp_element_rank_changes_is_down (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_rank_changes_is_down is None and "first_domain_serp_element_rank_changes_is_down" in self.model_fields_set:
            _dict['first_domain_serp_element.rank_changes.is_down'] = None

        # set to None if first_domain_serp_element_extra_ad_aclk (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_extra_ad_aclk is None and "first_domain_serp_element_extra_ad_aclk" in self.model_fields_set:
            _dict['first_domain_serp_element.extra.ad_aclk'] = None

        # set to None if first_domain_serp_element_description_rows (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_description_rows is None and "first_domain_serp_element_description_rows" in self.model_fields_set:
            _dict['first_domain_serp_element.description_rows'] = None

        # set to None if first_domain_serp_element_phone (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_phone is None and "first_domain_serp_element_phone" in self.model_fields_set:
            _dict['first_domain_serp_element.phone'] = None

        # set to None if first_domain_serp_element_is_paid (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_is_paid is None and "first_domain_serp_element_is_paid" in self.model_fields_set:
            _dict['first_domain_serp_element.is_paid'] = None

        # set to None if first_domain_serp_element_featured_title (nullable) is None
        # and model_fields_set contains the field
        if self.first_domain_serp_element_featured_title is None and "first_domain_serp_element_featured_title" in self.model_fields_set:
            _dict['first_domain_serp_element.featured_title'] = None

        # set to None if second_domain_serp_element_type (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_type is None and "second_domain_serp_element_type" in self.model_fields_set:
            _dict['second_domain_serp_element.type'] = None

        # set to None if second_domain_serp_element_rank_group (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_rank_group is None and "second_domain_serp_element_rank_group" in self.model_fields_set:
            _dict['second_domain_serp_element.rank_group'] = None

        # set to None if second_domain_serp_element_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_rank_absolute is None and "second_domain_serp_element_rank_absolute" in self.model_fields_set:
            _dict['second_domain_serp_element.rank_absolute'] = None

        # set to None if second_domain_serp_element_position (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_position is None and "second_domain_serp_element_position" in self.model_fields_set:
            _dict['second_domain_serp_element.position'] = None

        # set to None if second_domain_serp_element_xpath (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_xpath is None and "second_domain_serp_element_xpath" in self.model_fields_set:
            _dict['second_domain_serp_element.xpath'] = None

        # set to None if second_domain_serp_element_title (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_title is None and "second_domain_serp_element_title" in self.model_fields_set:
            _dict['second_domain_serp_element.title'] = None

        # set to None if second_domain_serp_element_pre_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_pre_snippet is None and "second_domain_serp_element_pre_snippet" in self.model_fields_set:
            _dict['second_domain_serp_element.pre_snippet'] = None

        # set to None if second_domain_serp_element_description (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_description is None and "second_domain_serp_element_description" in self.model_fields_set:
            _dict['second_domain_serp_element.description'] = None

        # set to None if second_domain_serp_element_breadcrumb (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_breadcrumb is None and "second_domain_serp_element_breadcrumb" in self.model_fields_set:
            _dict['second_domain_serp_element.breadcrumb'] = None

        # set to None if second_domain_serp_element_is_image (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_is_image is None and "second_domain_serp_element_is_image" in self.model_fields_set:
            _dict['second_domain_serp_element.is_image'] = None

        # set to None if second_domain_serp_element_is_video (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_is_video is None and "second_domain_serp_element_is_video" in self.model_fields_set:
            _dict['second_domain_serp_element.is_video'] = None

        # set to None if second_domain_serp_element_is_featured_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_is_featured_snippet is None and "second_domain_serp_element_is_featured_snippet" in self.model_fields_set:
            _dict['second_domain_serp_element.is_featured_snippet'] = None

        # set to None if second_domain_serp_element_amp_version (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_amp_version is None and "second_domain_serp_element_amp_version" in self.model_fields_set:
            _dict['second_domain_serp_element.amp_version'] = None

        # set to None if second_domain_serp_element_is_malicious (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_is_malicious is None and "second_domain_serp_element_is_malicious" in self.model_fields_set:
            _dict['second_domain_serp_element.is_malicious'] = None

        # set to None if second_domain_serp_element_extended_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_extended_snippet is None and "second_domain_serp_element_extended_snippet" in self.model_fields_set:
            _dict['second_domain_serp_element.extended_snippet'] = None

        # set to None if second_domain_serp_element_domain (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_domain is None and "second_domain_serp_element_domain" in self.model_fields_set:
            _dict['second_domain_serp_element.domain'] = None

        # set to None if second_domain_serp_element_main_domain (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_main_domain is None and "second_domain_serp_element_main_domain" in self.model_fields_set:
            _dict['second_domain_serp_element.main_domain'] = None

        # set to None if second_domain_serp_element_url (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_url is None and "second_domain_serp_element_url" in self.model_fields_set:
            _dict['second_domain_serp_element.url'] = None

        # set to None if second_domain_serp_element_relative_url (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_relative_url is None and "second_domain_serp_element_relative_url" in self.model_fields_set:
            _dict['second_domain_serp_element.relative_url'] = None

        # set to None if second_domain_serp_element_etv (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_etv is None and "second_domain_serp_element_etv" in self.model_fields_set:
            _dict['second_domain_serp_element.etv'] = None

        # set to None if second_domain_serp_element_impressions_etv (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_impressions_etv is None and "second_domain_serp_element_impressions_etv" in self.model_fields_set:
            _dict['second_domain_serp_element.impressions_etv'] = None

        # set to None if second_domain_serp_element_clickstream_etv (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_clickstream_etv is None and "second_domain_serp_element_clickstream_etv" in self.model_fields_set:
            _dict['second_domain_serp_element.clickstream_etv'] = None

        # set to None if second_domain_serp_element_estimated_paid_traffic_cost (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_estimated_paid_traffic_cost is None and "second_domain_serp_element_estimated_paid_traffic_cost" in self.model_fields_set:
            _dict['second_domain_serp_element.estimated_paid_traffic_cost'] = None

        # set to None if second_domain_serp_element_rank_changes_previous_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_rank_changes_previous_rank_absolute is None and "second_domain_serp_element_rank_changes_previous_rank_absolute" in self.model_fields_set:
            _dict['second_domain_serp_element.rank_changes.previous_rank_absolute'] = None

        # set to None if second_domain_serp_element_rank_changes_is_new (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_rank_changes_is_new is None and "second_domain_serp_element_rank_changes_is_new" in self.model_fields_set:
            _dict['second_domain_serp_element.rank_changes.is_new'] = None

        # set to None if second_domain_serp_element_rank_changes_is_up (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_rank_changes_is_up is None and "second_domain_serp_element_rank_changes_is_up" in self.model_fields_set:
            _dict['second_domain_serp_element.rank_changes.is_up'] = None

        # set to None if second_domain_serp_element_rank_changes_is_down (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_rank_changes_is_down is None and "second_domain_serp_element_rank_changes_is_down" in self.model_fields_set:
            _dict['second_domain_serp_element.rank_changes.is_down'] = None

        # set to None if second_domain_serp_element_extra_ad_aclk (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_extra_ad_aclk is None and "second_domain_serp_element_extra_ad_aclk" in self.model_fields_set:
            _dict['second_domain_serp_element.extra.ad_aclk'] = None

        # set to None if second_domain_serp_element_description_rows (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_description_rows is None and "second_domain_serp_element_description_rows" in self.model_fields_set:
            _dict['second_domain_serp_element.description_rows'] = None

        # set to None if second_domain_serp_element_phone (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_phone is None and "second_domain_serp_element_phone" in self.model_fields_set:
            _dict['second_domain_serp_element.phone'] = None

        # set to None if second_domain_serp_element_is_paid (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_is_paid is None and "second_domain_serp_element_is_paid" in self.model_fields_set:
            _dict['second_domain_serp_element.is_paid'] = None

        # set to None if second_domain_serp_element_featured_title (nullable) is None
        # and model_fields_set contains the field
        if self.second_domain_serp_element_featured_title is None and "second_domain_serp_element_featured_title" in self.model_fields_set:
            _dict['second_domain_serp_element.featured_title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DomainIntersectionGoogleDataforseoLabsAvailableFiltersGoogleInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyword_data.keyword": obj.get("keyword_data.keyword"),
            "keyword_data.keyword_info.last_updated_time": obj.get("keyword_data.keyword_info.last_updated_time"),
            "keyword_data.keyword_info.competition": obj.get("keyword_data.keyword_info.competition"),
            "keyword_data.keyword_info.competition_level": obj.get("keyword_data.keyword_info.competition_level"),
            "keyword_data.keyword_info.cpc": obj.get("keyword_data.keyword_info.cpc"),
            "keyword_data.keyword_info.search_volume": obj.get("keyword_data.keyword_info.search_volume"),
            "keyword_data.keyword_info.low_top_of_page_bid": obj.get("keyword_data.keyword_info.low_top_of_page_bid"),
            "keyword_data.keyword_info.high_top_of_page_bid": obj.get("keyword_data.keyword_info.high_top_of_page_bid"),
            "keyword_data.keyword_info.categories": obj.get("keyword_data.keyword_info.categories"),
            "keyword_data.keyword_info.search_volume_trend.monthly": obj.get("keyword_data.keyword_info.search_volume_trend.monthly"),
            "keyword_data.keyword_info.search_volume_trend.quarterly": obj.get("keyword_data.keyword_info.search_volume_trend.quarterly"),
            "keyword_data.keyword_info.search_volume_trend.yearly": obj.get("keyword_data.keyword_info.search_volume_trend.yearly"),
            "keyword_data.clickstream_keyword_info.search_volume": obj.get("keyword_data.clickstream_keyword_info.search_volume"),
            "keyword_data.clickstream_keyword_info.last_updated_time": obj.get("keyword_data.clickstream_keyword_info.last_updated_time"),
            "keyword_data.clickstream_keyword_info.gender_distribution.female": obj.get("keyword_data.clickstream_keyword_info.gender_distribution.female"),
            "keyword_data.clickstream_keyword_info.gender_distribution.male": obj.get("keyword_data.clickstream_keyword_info.gender_distribution.male"),
            "keyword_data.clickstream_keyword_info.age_distribution.18-24": obj.get("keyword_data.clickstream_keyword_info.age_distribution.18-24"),
            "keyword_data.clickstream_keyword_info.age_distribution.25-34": obj.get("keyword_data.clickstream_keyword_info.age_distribution.25-34"),
            "keyword_data.clickstream_keyword_info.age_distribution.35-44": obj.get("keyword_data.clickstream_keyword_info.age_distribution.35-44"),
            "keyword_data.clickstream_keyword_info.age_distribution.45-54": obj.get("keyword_data.clickstream_keyword_info.age_distribution.45-54"),
            "keyword_data.clickstream_keyword_info.age_distribution.55-64": obj.get("keyword_data.clickstream_keyword_info.age_distribution.55-64"),
            "keyword_data.keyword_properties.core_keyword": obj.get("keyword_data.keyword_properties.core_keyword"),
            "keyword_data.keyword_properties.synonym_clustering_algorithm": obj.get("keyword_data.keyword_properties.synonym_clustering_algorithm"),
            "keyword_data.keyword_properties.keyword_difficulty": obj.get("keyword_data.keyword_properties.keyword_difficulty"),
            "keyword_data.keyword_properties.detected_language": obj.get("keyword_data.keyword_properties.detected_language"),
            "keyword_data.keyword_properties.is_another_language": obj.get("keyword_data.keyword_properties.is_another_language"),
            "keyword_data.impressions_info.bid": obj.get("keyword_data.impressions_info.bid"),
            "keyword_data.impressions_info.match_type": obj.get("keyword_data.impressions_info.match_type"),
            "keyword_data.impressions_info.ad_position_min": obj.get("keyword_data.impressions_info.ad_position_min"),
            "keyword_data.impressions_info.ad_position_max": obj.get("keyword_data.impressions_info.ad_position_max"),
            "keyword_data.impressions_info.ad_position_average": obj.get("keyword_data.impressions_info.ad_position_average"),
            "keyword_data.impressions_info.cpc_min": obj.get("keyword_data.impressions_info.cpc_min"),
            "keyword_data.impressions_info.cpc_max": obj.get("keyword_data.impressions_info.cpc_max"),
            "keyword_data.impressions_info.cpc_average": obj.get("keyword_data.impressions_info.cpc_average"),
            "keyword_data.impressions_info.daily_impressions_min": obj.get("keyword_data.impressions_info.daily_impressions_min"),
            "keyword_data.impressions_info.daily_impressions_max": obj.get("keyword_data.impressions_info.daily_impressions_max"),
            "keyword_data.impressions_info.daily_impressions_average": obj.get("keyword_data.impressions_info.daily_impressions_average"),
            "keyword_data.impressions_info.daily_clicks_min": obj.get("keyword_data.impressions_info.daily_clicks_min"),
            "keyword_data.impressions_info.daily_clicks_max": obj.get("keyword_data.impressions_info.daily_clicks_max"),
            "keyword_data.impressions_info.daily_clicks_average": obj.get("keyword_data.impressions_info.daily_clicks_average"),
            "keyword_data.impressions_info.daily_cost_min": obj.get("keyword_data.impressions_info.daily_cost_min"),
            "keyword_data.impressions_info.daily_cost_max": obj.get("keyword_data.impressions_info.daily_cost_max"),
            "keyword_data.impressions_info.daily_cost_average": obj.get("keyword_data.impressions_info.daily_cost_average"),
            "keyword_data.serp_info.check_url": obj.get("keyword_data.serp_info.check_url"),
            "keyword_data.serp_info.serp_item_types": obj.get("keyword_data.serp_info.serp_item_types"),
            "keyword_data.serp_info.se_results_count": obj.get("keyword_data.serp_info.se_results_count"),
            "keyword_data.serp_info.last_updated_time": obj.get("keyword_data.serp_info.last_updated_time"),
            "keyword_data.serp_info.previous_updated_time": obj.get("keyword_data.serp_info.previous_updated_time"),
            "keyword_data.avg_backlinks_info.backlinks": obj.get("keyword_data.avg_backlinks_info.backlinks"),
            "keyword_data.avg_backlinks_info.dofollow": obj.get("keyword_data.avg_backlinks_info.dofollow"),
            "keyword_data.avg_backlinks_info.referring_pages": obj.get("keyword_data.avg_backlinks_info.referring_pages"),
            "keyword_data.avg_backlinks_info.referring_domains": obj.get("keyword_data.avg_backlinks_info.referring_domains"),
            "keyword_data.avg_backlinks_info.referring_main_domains": obj.get("keyword_data.avg_backlinks_info.referring_main_domains"),
            "keyword_data.avg_backlinks_info.rank": obj.get("keyword_data.avg_backlinks_info.rank"),
            "keyword_data.avg_backlinks_info.main_domain_rank": obj.get("keyword_data.avg_backlinks_info.main_domain_rank"),
            "keyword_data.avg_backlinks_info.last_updated_time": obj.get("keyword_data.avg_backlinks_info.last_updated_time"),
            "keyword_data.search_intent_info.main_intent": obj.get("keyword_data.search_intent_info.main_intent"),
            "keyword_data.search_intent_info.foreign_intent": obj.get("keyword_data.search_intent_info.foreign_intent"),
            "keyword_data.search_intent_info.last_updated_time": obj.get("keyword_data.search_intent_info.last_updated_time"),
            "keyword_data.keyword_info_normalized_with_bing.search_volume": obj.get("keyword_data.keyword_info_normalized_with_bing.search_volume"),
            "keyword_data.keyword_info_normalized_with_bing.last_updated_time": obj.get("keyword_data.keyword_info_normalized_with_bing.last_updated_time"),
            "keyword_data.keyword_info_normalized_with_bing.is_normalized": obj.get("keyword_data.keyword_info_normalized_with_bing.is_normalized"),
            "keyword_data.keyword_info_normalized_with_clickstream.search_volume": obj.get("keyword_data.keyword_info_normalized_with_clickstream.search_volume"),
            "keyword_data.keyword_info_normalized_with_clickstream.last_updated_time": obj.get("keyword_data.keyword_info_normalized_with_clickstream.last_updated_time"),
            "keyword_data.keyword_info_normalized_with_clickstream.is_normalized": obj.get("keyword_data.keyword_info_normalized_with_clickstream.is_normalized"),
            "first_domain_serp_element.type": obj.get("first_domain_serp_element.type"),
            "first_domain_serp_element.rank_group": obj.get("first_domain_serp_element.rank_group"),
            "first_domain_serp_element.rank_absolute": obj.get("first_domain_serp_element.rank_absolute"),
            "first_domain_serp_element.position": obj.get("first_domain_serp_element.position"),
            "first_domain_serp_element.xpath": obj.get("first_domain_serp_element.xpath"),
            "first_domain_serp_element.title": obj.get("first_domain_serp_element.title"),
            "first_domain_serp_element.pre_snippet": obj.get("first_domain_serp_element.pre_snippet"),
            "first_domain_serp_element.description": obj.get("first_domain_serp_element.description"),
            "first_domain_serp_element.breadcrumb": obj.get("first_domain_serp_element.breadcrumb"),
            "first_domain_serp_element.is_image": obj.get("first_domain_serp_element.is_image"),
            "first_domain_serp_element.is_video": obj.get("first_domain_serp_element.is_video"),
            "first_domain_serp_element.is_featured_snippet": obj.get("first_domain_serp_element.is_featured_snippet"),
            "first_domain_serp_element.amp_version": obj.get("first_domain_serp_element.amp_version"),
            "first_domain_serp_element.is_malicious": obj.get("first_domain_serp_element.is_malicious"),
            "first_domain_serp_element.extended_snippet": obj.get("first_domain_serp_element.extended_snippet"),
            "first_domain_serp_element.domain": obj.get("first_domain_serp_element.domain"),
            "first_domain_serp_element.main_domain": obj.get("first_domain_serp_element.main_domain"),
            "first_domain_serp_element.url": obj.get("first_domain_serp_element.url"),
            "first_domain_serp_element.relative_url": obj.get("first_domain_serp_element.relative_url"),
            "first_domain_serp_element.etv": obj.get("first_domain_serp_element.etv"),
            "first_domain_serp_element.impressions_etv": obj.get("first_domain_serp_element.impressions_etv"),
            "first_domain_serp_element.clickstream_etv": obj.get("first_domain_serp_element.clickstream_etv"),
            "first_domain_serp_element.rank_changes.previous_rank_absolute": obj.get("first_domain_serp_element.rank_changes.previous_rank_absolute"),
            "first_domain_serp_element.rank_changes.is_new": obj.get("first_domain_serp_element.rank_changes.is_new"),
            "first_domain_serp_element.rank_changes.is_up": obj.get("first_domain_serp_element.rank_changes.is_up"),
            "first_domain_serp_element.rank_changes.is_down": obj.get("first_domain_serp_element.rank_changes.is_down"),
            "first_domain_serp_element.extra.ad_aclk": obj.get("first_domain_serp_element.extra.ad_aclk"),
            "first_domain_serp_element.description_rows": obj.get("first_domain_serp_element.description_rows"),
            "first_domain_serp_element.phone": obj.get("first_domain_serp_element.phone"),
            "first_domain_serp_element.is_paid": obj.get("first_domain_serp_element.is_paid"),
            "first_domain_serp_element.featured_title": obj.get("first_domain_serp_element.featured_title"),
            "second_domain_serp_element.type": obj.get("second_domain_serp_element.type"),
            "second_domain_serp_element.rank_group": obj.get("second_domain_serp_element.rank_group"),
            "second_domain_serp_element.rank_absolute": obj.get("second_domain_serp_element.rank_absolute"),
            "second_domain_serp_element.position": obj.get("second_domain_serp_element.position"),
            "second_domain_serp_element.xpath": obj.get("second_domain_serp_element.xpath"),
            "second_domain_serp_element.title": obj.get("second_domain_serp_element.title"),
            "second_domain_serp_element.pre_snippet": obj.get("second_domain_serp_element.pre_snippet"),
            "second_domain_serp_element.description": obj.get("second_domain_serp_element.description"),
            "second_domain_serp_element.breadcrumb": obj.get("second_domain_serp_element.breadcrumb"),
            "second_domain_serp_element.is_image": obj.get("second_domain_serp_element.is_image"),
            "second_domain_serp_element.is_video": obj.get("second_domain_serp_element.is_video"),
            "second_domain_serp_element.is_featured_snippet": obj.get("second_domain_serp_element.is_featured_snippet"),
            "second_domain_serp_element.amp_version": obj.get("second_domain_serp_element.amp_version"),
            "second_domain_serp_element.is_malicious": obj.get("second_domain_serp_element.is_malicious"),
            "second_domain_serp_element.extended_snippet": obj.get("second_domain_serp_element.extended_snippet"),
            "second_domain_serp_element.domain": obj.get("second_domain_serp_element.domain"),
            "second_domain_serp_element.main_domain": obj.get("second_domain_serp_element.main_domain"),
            "second_domain_serp_element.url": obj.get("second_domain_serp_element.url"),
            "second_domain_serp_element.relative_url": obj.get("second_domain_serp_element.relative_url"),
            "second_domain_serp_element.etv": obj.get("second_domain_serp_element.etv"),
            "second_domain_serp_element.impressions_etv": obj.get("second_domain_serp_element.impressions_etv"),
            "second_domain_serp_element.clickstream_etv": obj.get("second_domain_serp_element.clickstream_etv"),
            "second_domain_serp_element.estimated_paid_traffic_cost": obj.get("second_domain_serp_element.estimated_paid_traffic_cost"),
            "second_domain_serp_element.rank_changes.previous_rank_absolute": obj.get("second_domain_serp_element.rank_changes.previous_rank_absolute"),
            "second_domain_serp_element.rank_changes.is_new": obj.get("second_domain_serp_element.rank_changes.is_new"),
            "second_domain_serp_element.rank_changes.is_up": obj.get("second_domain_serp_element.rank_changes.is_up"),
            "second_domain_serp_element.rank_changes.is_down": obj.get("second_domain_serp_element.rank_changes.is_down"),
            "second_domain_serp_element.extra.ad_aclk": obj.get("second_domain_serp_element.extra.ad_aclk"),
            "second_domain_serp_element.description_rows": obj.get("second_domain_serp_element.description_rows"),
            "second_domain_serp_element.phone": obj.get("second_domain_serp_element.phone"),
            "second_domain_serp_element.is_paid": obj.get("second_domain_serp_element.is_paid"),
            "second_domain_serp_element.featured_title": obj.get("second_domain_serp_element.featured_title")
        })
        return _obj



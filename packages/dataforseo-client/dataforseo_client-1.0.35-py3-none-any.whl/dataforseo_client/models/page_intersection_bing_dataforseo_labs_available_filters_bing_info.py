# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PageIntersectionBingDataforseoLabsAvailableFiltersBingInfo(BaseModel):
    """
    PageIntersectionBingDataforseoLabsAvailableFiltersBingInfo
    """ # noqa: E501
    keyword_data_keyword: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword")
    keyword_data_keyword_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.last_updated_time")
    keyword_data_keyword_info_competition: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.competition")
    keyword_data_keyword_info_cpc: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.cpc")
    keyword_data_keyword_info_search_volume: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.search_volume")
    keyword_data_keyword_properties_core_keyword: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.core_keyword")
    keyword_data_keyword_properties_synonym_clustering_algorithm: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.synonym_clustering_algorithm")
    keyword_data_keyword_properties_keyword_difficulty: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.keyword_difficulty")
    keyword_data_keyword_properties_detected_language: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.detected_language")
    keyword_data_keyword_properties_is_another_language: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.is_another_language")
    keyword_data_serp_info_check_url: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.check_url")
    keyword_data_serp_info_serp_item_types: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.serp_item_types")
    keyword_data_serp_info_se_results_count: Optional[StrictInt] = Field(default=None, alias="keyword_data.serp_info.se_results_count")
    keyword_data_serp_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.last_updated_time")
    keyword_data_serp_info_previous_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.previous_updated_time")
    intersection_result_page_type: Optional[StrictStr] = Field(default=None, description="type of element", alias="intersection_result.$page.type")
    intersection_result_page_rank_group: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.rank_group")
    intersection_result_page_rank_absolute: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.rank_absolute")
    intersection_result_page_position: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.position")
    intersection_result_page_xpath: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.xpath")
    intersection_result_page_title: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.title")
    intersection_result_page_pre_snippet: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.pre_snippet")
    intersection_result_page_description: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.description")
    intersection_result_page_breadcrumb: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.breadcrumb")
    intersection_result_page_is_image: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.is_image")
    intersection_result_page_is_video: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.is_video")
    intersection_result_page_is_featured_snippet: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.is_featured_snippet")
    intersection_result_page_amp_version: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.amp_version")
    intersection_result_page_is_malicious: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.is_malicious")
    intersection_result_page_extended_snippet: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.extended_snippet")
    intersection_result_page_domain: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.domain")
    intersection_result_page_main_domain: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.main_domain")
    intersection_result_page_url: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.url")
    intersection_result_page_relative_url: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.relative_url")
    intersection_result_page_etv: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.etv")
    intersection_result_page_impressions_etv: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.impressions_etv")
    intersection_result_page_estimated_paid_traffic_cost: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.estimated_paid_traffic_cost")
    intersection_result_page_rank_changes_previous_rank_absolute: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.rank_changes.previous_rank_absolute")
    intersection_result_page_rank_changes_is_new: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.rank_changes.is_new")
    intersection_result_page_rank_changes_is_up: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.rank_changes.is_up")
    intersection_result_page_rank_changes_is_down: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.rank_changes.is_down")
    intersection_result_page_extra_ad_aclk: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.extra.ad_aclk")
    intersection_result_page_description_rows: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.description_rows")
    intersection_result_page_phone: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.phone")
    intersection_result_page_is_paid: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.is_paid")
    intersection_result_page_featured_title: Optional[StrictStr] = Field(default=None, alias="intersection_result.$page.featured_title")
    __properties: ClassVar[List[str]] = ["keyword_data.keyword", "keyword_data.keyword_info.last_updated_time", "keyword_data.keyword_info.competition", "keyword_data.keyword_info.cpc", "keyword_data.keyword_info.search_volume", "keyword_data.keyword_properties.core_keyword", "keyword_data.keyword_properties.synonym_clustering_algorithm", "keyword_data.keyword_properties.keyword_difficulty", "keyword_data.keyword_properties.detected_language", "keyword_data.keyword_properties.is_another_language", "keyword_data.serp_info.check_url", "keyword_data.serp_info.serp_item_types", "keyword_data.serp_info.se_results_count", "keyword_data.serp_info.last_updated_time", "keyword_data.serp_info.previous_updated_time", "intersection_result.$page.type", "intersection_result.$page.rank_group", "intersection_result.$page.rank_absolute", "intersection_result.$page.position", "intersection_result.$page.xpath", "intersection_result.$page.title", "intersection_result.$page.pre_snippet", "intersection_result.$page.description", "intersection_result.$page.breadcrumb", "intersection_result.$page.is_image", "intersection_result.$page.is_video", "intersection_result.$page.is_featured_snippet", "intersection_result.$page.amp_version", "intersection_result.$page.is_malicious", "intersection_result.$page.extended_snippet", "intersection_result.$page.domain", "intersection_result.$page.main_domain", "intersection_result.$page.url", "intersection_result.$page.relative_url", "intersection_result.$page.etv", "intersection_result.$page.impressions_etv", "intersection_result.$page.estimated_paid_traffic_cost", "intersection_result.$page.rank_changes.previous_rank_absolute", "intersection_result.$page.rank_changes.is_new", "intersection_result.$page.rank_changes.is_up", "intersection_result.$page.rank_changes.is_down", "intersection_result.$page.extra.ad_aclk", "intersection_result.$page.description_rows", "intersection_result.$page.phone", "intersection_result.$page.is_paid", "intersection_result.$page.featured_title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PageIntersectionBingDataforseoLabsAvailableFiltersBingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if keyword_data_keyword (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword is None and "keyword_data_keyword" in self.model_fields_set:
            _dict['keyword_data.keyword'] = None

        # set to None if keyword_data_keyword_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_last_updated_time is None and "keyword_data_keyword_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.keyword_info.last_updated_time'] = None

        # set to None if keyword_data_keyword_info_competition (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_competition is None and "keyword_data_keyword_info_competition" in self.model_fields_set:
            _dict['keyword_data.keyword_info.competition'] = None

        # set to None if keyword_data_keyword_info_cpc (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_cpc is None and "keyword_data_keyword_info_cpc" in self.model_fields_set:
            _dict['keyword_data.keyword_info.cpc'] = None

        # set to None if keyword_data_keyword_info_search_volume (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_search_volume is None and "keyword_data_keyword_info_search_volume" in self.model_fields_set:
            _dict['keyword_data.keyword_info.search_volume'] = None

        # set to None if keyword_data_keyword_properties_core_keyword (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_core_keyword is None and "keyword_data_keyword_properties_core_keyword" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.core_keyword'] = None

        # set to None if keyword_data_keyword_properties_synonym_clustering_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_synonym_clustering_algorithm is None and "keyword_data_keyword_properties_synonym_clustering_algorithm" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.synonym_clustering_algorithm'] = None

        # set to None if keyword_data_keyword_properties_keyword_difficulty (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_keyword_difficulty is None and "keyword_data_keyword_properties_keyword_difficulty" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.keyword_difficulty'] = None

        # set to None if keyword_data_keyword_properties_detected_language (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_detected_language is None and "keyword_data_keyword_properties_detected_language" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.detected_language'] = None

        # set to None if keyword_data_keyword_properties_is_another_language (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_is_another_language is None and "keyword_data_keyword_properties_is_another_language" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.is_another_language'] = None

        # set to None if keyword_data_serp_info_check_url (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_check_url is None and "keyword_data_serp_info_check_url" in self.model_fields_set:
            _dict['keyword_data.serp_info.check_url'] = None

        # set to None if keyword_data_serp_info_serp_item_types (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_serp_item_types is None and "keyword_data_serp_info_serp_item_types" in self.model_fields_set:
            _dict['keyword_data.serp_info.serp_item_types'] = None

        # set to None if keyword_data_serp_info_se_results_count (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_se_results_count is None and "keyword_data_serp_info_se_results_count" in self.model_fields_set:
            _dict['keyword_data.serp_info.se_results_count'] = None

        # set to None if keyword_data_serp_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_last_updated_time is None and "keyword_data_serp_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.serp_info.last_updated_time'] = None

        # set to None if keyword_data_serp_info_previous_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_previous_updated_time is None and "keyword_data_serp_info_previous_updated_time" in self.model_fields_set:
            _dict['keyword_data.serp_info.previous_updated_time'] = None

        # set to None if intersection_result_page_type (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_type is None and "intersection_result_page_type" in self.model_fields_set:
            _dict['intersection_result.$page.type'] = None

        # set to None if intersection_result_page_rank_group (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_rank_group is None and "intersection_result_page_rank_group" in self.model_fields_set:
            _dict['intersection_result.$page.rank_group'] = None

        # set to None if intersection_result_page_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_rank_absolute is None and "intersection_result_page_rank_absolute" in self.model_fields_set:
            _dict['intersection_result.$page.rank_absolute'] = None

        # set to None if intersection_result_page_position (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_position is None and "intersection_result_page_position" in self.model_fields_set:
            _dict['intersection_result.$page.position'] = None

        # set to None if intersection_result_page_xpath (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_xpath is None and "intersection_result_page_xpath" in self.model_fields_set:
            _dict['intersection_result.$page.xpath'] = None

        # set to None if intersection_result_page_title (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_title is None and "intersection_result_page_title" in self.model_fields_set:
            _dict['intersection_result.$page.title'] = None

        # set to None if intersection_result_page_pre_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_pre_snippet is None and "intersection_result_page_pre_snippet" in self.model_fields_set:
            _dict['intersection_result.$page.pre_snippet'] = None

        # set to None if intersection_result_page_description (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_description is None and "intersection_result_page_description" in self.model_fields_set:
            _dict['intersection_result.$page.description'] = None

        # set to None if intersection_result_page_breadcrumb (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_breadcrumb is None and "intersection_result_page_breadcrumb" in self.model_fields_set:
            _dict['intersection_result.$page.breadcrumb'] = None

        # set to None if intersection_result_page_is_image (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_is_image is None and "intersection_result_page_is_image" in self.model_fields_set:
            _dict['intersection_result.$page.is_image'] = None

        # set to None if intersection_result_page_is_video (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_is_video is None and "intersection_result_page_is_video" in self.model_fields_set:
            _dict['intersection_result.$page.is_video'] = None

        # set to None if intersection_result_page_is_featured_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_is_featured_snippet is None and "intersection_result_page_is_featured_snippet" in self.model_fields_set:
            _dict['intersection_result.$page.is_featured_snippet'] = None

        # set to None if intersection_result_page_amp_version (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_amp_version is None and "intersection_result_page_amp_version" in self.model_fields_set:
            _dict['intersection_result.$page.amp_version'] = None

        # set to None if intersection_result_page_is_malicious (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_is_malicious is None and "intersection_result_page_is_malicious" in self.model_fields_set:
            _dict['intersection_result.$page.is_malicious'] = None

        # set to None if intersection_result_page_extended_snippet (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_extended_snippet is None and "intersection_result_page_extended_snippet" in self.model_fields_set:
            _dict['intersection_result.$page.extended_snippet'] = None

        # set to None if intersection_result_page_domain (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_domain is None and "intersection_result_page_domain" in self.model_fields_set:
            _dict['intersection_result.$page.domain'] = None

        # set to None if intersection_result_page_main_domain (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_main_domain is None and "intersection_result_page_main_domain" in self.model_fields_set:
            _dict['intersection_result.$page.main_domain'] = None

        # set to None if intersection_result_page_url (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_url is None and "intersection_result_page_url" in self.model_fields_set:
            _dict['intersection_result.$page.url'] = None

        # set to None if intersection_result_page_relative_url (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_relative_url is None and "intersection_result_page_relative_url" in self.model_fields_set:
            _dict['intersection_result.$page.relative_url'] = None

        # set to None if intersection_result_page_etv (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_etv is None and "intersection_result_page_etv" in self.model_fields_set:
            _dict['intersection_result.$page.etv'] = None

        # set to None if intersection_result_page_impressions_etv (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_impressions_etv is None and "intersection_result_page_impressions_etv" in self.model_fields_set:
            _dict['intersection_result.$page.impressions_etv'] = None

        # set to None if intersection_result_page_estimated_paid_traffic_cost (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_estimated_paid_traffic_cost is None and "intersection_result_page_estimated_paid_traffic_cost" in self.model_fields_set:
            _dict['intersection_result.$page.estimated_paid_traffic_cost'] = None

        # set to None if intersection_result_page_rank_changes_previous_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_rank_changes_previous_rank_absolute is None and "intersection_result_page_rank_changes_previous_rank_absolute" in self.model_fields_set:
            _dict['intersection_result.$page.rank_changes.previous_rank_absolute'] = None

        # set to None if intersection_result_page_rank_changes_is_new (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_rank_changes_is_new is None and "intersection_result_page_rank_changes_is_new" in self.model_fields_set:
            _dict['intersection_result.$page.rank_changes.is_new'] = None

        # set to None if intersection_result_page_rank_changes_is_up (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_rank_changes_is_up is None and "intersection_result_page_rank_changes_is_up" in self.model_fields_set:
            _dict['intersection_result.$page.rank_changes.is_up'] = None

        # set to None if intersection_result_page_rank_changes_is_down (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_rank_changes_is_down is None and "intersection_result_page_rank_changes_is_down" in self.model_fields_set:
            _dict['intersection_result.$page.rank_changes.is_down'] = None

        # set to None if intersection_result_page_extra_ad_aclk (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_extra_ad_aclk is None and "intersection_result_page_extra_ad_aclk" in self.model_fields_set:
            _dict['intersection_result.$page.extra.ad_aclk'] = None

        # set to None if intersection_result_page_description_rows (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_description_rows is None and "intersection_result_page_description_rows" in self.model_fields_set:
            _dict['intersection_result.$page.description_rows'] = None

        # set to None if intersection_result_page_phone (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_phone is None and "intersection_result_page_phone" in self.model_fields_set:
            _dict['intersection_result.$page.phone'] = None

        # set to None if intersection_result_page_is_paid (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_is_paid is None and "intersection_result_page_is_paid" in self.model_fields_set:
            _dict['intersection_result.$page.is_paid'] = None

        # set to None if intersection_result_page_featured_title (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_page_featured_title is None and "intersection_result_page_featured_title" in self.model_fields_set:
            _dict['intersection_result.$page.featured_title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PageIntersectionBingDataforseoLabsAvailableFiltersBingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyword_data.keyword": obj.get("keyword_data.keyword"),
            "keyword_data.keyword_info.last_updated_time": obj.get("keyword_data.keyword_info.last_updated_time"),
            "keyword_data.keyword_info.competition": obj.get("keyword_data.keyword_info.competition"),
            "keyword_data.keyword_info.cpc": obj.get("keyword_data.keyword_info.cpc"),
            "keyword_data.keyword_info.search_volume": obj.get("keyword_data.keyword_info.search_volume"),
            "keyword_data.keyword_properties.core_keyword": obj.get("keyword_data.keyword_properties.core_keyword"),
            "keyword_data.keyword_properties.synonym_clustering_algorithm": obj.get("keyword_data.keyword_properties.synonym_clustering_algorithm"),
            "keyword_data.keyword_properties.keyword_difficulty": obj.get("keyword_data.keyword_properties.keyword_difficulty"),
            "keyword_data.keyword_properties.detected_language": obj.get("keyword_data.keyword_properties.detected_language"),
            "keyword_data.keyword_properties.is_another_language": obj.get("keyword_data.keyword_properties.is_another_language"),
            "keyword_data.serp_info.check_url": obj.get("keyword_data.serp_info.check_url"),
            "keyword_data.serp_info.serp_item_types": obj.get("keyword_data.serp_info.serp_item_types"),
            "keyword_data.serp_info.se_results_count": obj.get("keyword_data.serp_info.se_results_count"),
            "keyword_data.serp_info.last_updated_time": obj.get("keyword_data.serp_info.last_updated_time"),
            "keyword_data.serp_info.previous_updated_time": obj.get("keyword_data.serp_info.previous_updated_time"),
            "intersection_result.$page.type": obj.get("intersection_result.$page.type"),
            "intersection_result.$page.rank_group": obj.get("intersection_result.$page.rank_group"),
            "intersection_result.$page.rank_absolute": obj.get("intersection_result.$page.rank_absolute"),
            "intersection_result.$page.position": obj.get("intersection_result.$page.position"),
            "intersection_result.$page.xpath": obj.get("intersection_result.$page.xpath"),
            "intersection_result.$page.title": obj.get("intersection_result.$page.title"),
            "intersection_result.$page.pre_snippet": obj.get("intersection_result.$page.pre_snippet"),
            "intersection_result.$page.description": obj.get("intersection_result.$page.description"),
            "intersection_result.$page.breadcrumb": obj.get("intersection_result.$page.breadcrumb"),
            "intersection_result.$page.is_image": obj.get("intersection_result.$page.is_image"),
            "intersection_result.$page.is_video": obj.get("intersection_result.$page.is_video"),
            "intersection_result.$page.is_featured_snippet": obj.get("intersection_result.$page.is_featured_snippet"),
            "intersection_result.$page.amp_version": obj.get("intersection_result.$page.amp_version"),
            "intersection_result.$page.is_malicious": obj.get("intersection_result.$page.is_malicious"),
            "intersection_result.$page.extended_snippet": obj.get("intersection_result.$page.extended_snippet"),
            "intersection_result.$page.domain": obj.get("intersection_result.$page.domain"),
            "intersection_result.$page.main_domain": obj.get("intersection_result.$page.main_domain"),
            "intersection_result.$page.url": obj.get("intersection_result.$page.url"),
            "intersection_result.$page.relative_url": obj.get("intersection_result.$page.relative_url"),
            "intersection_result.$page.etv": obj.get("intersection_result.$page.etv"),
            "intersection_result.$page.impressions_etv": obj.get("intersection_result.$page.impressions_etv"),
            "intersection_result.$page.estimated_paid_traffic_cost": obj.get("intersection_result.$page.estimated_paid_traffic_cost"),
            "intersection_result.$page.rank_changes.previous_rank_absolute": obj.get("intersection_result.$page.rank_changes.previous_rank_absolute"),
            "intersection_result.$page.rank_changes.is_new": obj.get("intersection_result.$page.rank_changes.is_new"),
            "intersection_result.$page.rank_changes.is_up": obj.get("intersection_result.$page.rank_changes.is_up"),
            "intersection_result.$page.rank_changes.is_down": obj.get("intersection_result.$page.rank_changes.is_down"),
            "intersection_result.$page.extra.ad_aclk": obj.get("intersection_result.$page.extra.ad_aclk"),
            "intersection_result.$page.description_rows": obj.get("intersection_result.$page.description_rows"),
            "intersection_result.$page.phone": obj.get("intersection_result.$page.phone"),
            "intersection_result.$page.is_paid": obj.get("intersection_result.$page.is_paid"),
            "intersection_result.$page.featured_title": obj.get("intersection_result.$page.featured_title")
        })
        return _obj



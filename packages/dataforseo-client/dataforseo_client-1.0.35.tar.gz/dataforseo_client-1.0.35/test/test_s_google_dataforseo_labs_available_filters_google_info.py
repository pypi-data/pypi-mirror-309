# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dataforseo_client.models.s_google_dataforseo_labs_available_filters_google_info import SGoogleDataforseoLabsAvailableFiltersGoogleInfo

class TestSGoogleDataforseoLabsAvailableFiltersGoogleInfo(unittest.TestCase):
    """SGoogleDataforseoLabsAvailableFiltersGoogleInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SGoogleDataforseoLabsAvailableFiltersGoogleInfo:
        """Test SGoogleDataforseoLabsAvailableFiltersGoogleInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SGoogleDataforseoLabsAvailableFiltersGoogleInfo`
        """
        model = SGoogleDataforseoLabsAvailableFiltersGoogleInfo()
        if include_optional:
            return SGoogleDataforseoLabsAvailableFiltersGoogleInfo(
                keyword = '',
                keyword_info_last_updated_time = '',
                keyword_info_competition = '',
                keyword_info_competition_level = '',
                keyword_info_cpc = '',
                keyword_info_search_volume = '',
                keyword_info_low_top_of_page_bid = '',
                keyword_info_high_top_of_page_bid = '',
                keyword_info_categories = '',
                keyword_info_search_volume_trend_monthly = '',
                keyword_info_search_volume_trend_quarterly = '',
                keyword_info_search_volume_trend_yearly = '',
                clickstream_keyword_info_search_volume = '',
                clickstream_keyword_info_last_updated_time = '',
                clickstream_keyword_info_gender_distribution_female = '',
                clickstream_keyword_info_gender_distribution_male = '',
                clickstream_keyword_info_age_distribution_18_24 = '',
                clickstream_keyword_info_age_distribution_25_34 = '',
                clickstream_keyword_info_age_distribution_35_44 = '',
                clickstream_keyword_info_age_distribution_45_54 = '',
                clickstream_keyword_info_age_distribution_55_64 = '',
                keyword_properties_core_keyword = '',
                keyword_properties_synonym_clustering_algorithm = '',
                keyword_properties_keyword_difficulty = '',
                keyword_properties_detected_language = '',
                keyword_properties_is_another_language = '',
                impressions_info_bid = '',
                impressions_info_match_type = '',
                impressions_info_ad_position_min = '',
                impressions_info_ad_position_max = '',
                impressions_info_ad_position_average = '',
                impressions_info_cpc_min = '',
                impressions_info_cpc_max = '',
                impressions_info_cpc_average = '',
                impressions_info_daily_impressions_min = '',
                impressions_info_daily_impressions_max = '',
                impressions_info_daily_impressions_average = '',
                impressions_info_daily_clicks_min = '',
                impressions_info_daily_clicks_max = '',
                impressions_info_daily_clicks_average = '',
                impressions_info_daily_cost_min = '',
                impressions_info_daily_cost_max = '',
                impressions_info_daily_cost_average = '',
                serp_info_check_url = '',
                serp_info_se_results_count = 56,
                serp_info_last_updated_time = '',
                serp_info_serp_item_types = '',
                avg_backlinks_info_backlinks = '',
                avg_backlinks_info_dofollow = '',
                avg_backlinks_info_referring_pages = '',
                avg_backlinks_info_referring_domains = '',
                avg_backlinks_info_referring_main_domains = '',
                avg_backlinks_info_rank = '',
                avg_backlinks_info_main_domain_rank = '',
                avg_backlinks_info_last_updated_time = '',
                search_intent_info_main_intent = '',
                search_intent_info_foreign_intent = '',
                search_intent_info_last_updated_time = '',
                keyword_info_normalized_with_bing_search_volume = '',
                keyword_info_normalized_with_bing_last_updated_time = '',
                keyword_info_normalized_with_bing_is_normalized = '',
                keyword_info_normalized_with_clickstream_search_volume = '',
                keyword_info_normalized_with_clickstream_last_updated_time = '',
                keyword_info_normalized_with_clickstream_is_normalized = ''
            )
        else:
            return SGoogleDataforseoLabsAvailableFiltersGoogleInfo(
        )
        """

    def testSGoogleDataforseoLabsAvailableFiltersGoogleInfo(self):
        """Test SGoogleDataforseoLabsAvailableFiltersGoogleInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RankedKeywordsBingDataforseoLabsAvailableFiltersBingInfo(BaseModel):
    """
    RankedKeywordsBingDataforseoLabsAvailableFiltersBingInfo
    """ # noqa: E501
    keyword_data_keyword: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword")
    keyword_data_keyword_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.last_updated_time")
    keyword_data_keyword_info_competition: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.competition")
    keyword_data_keyword_info_cpc: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.cpc")
    keyword_data_keyword_info_search_volume: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.search_volume")
    keyword_data_keyword_properties_core_keyword: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.core_keyword")
    keyword_data_keyword_properties_synonym_clustering_algorithm: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.synonym_clustering_algorithm")
    keyword_data_keyword_properties_keyword_difficulty: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.keyword_difficulty")
    keyword_data_keyword_properties_detected_language: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.detected_language")
    keyword_data_keyword_properties_is_another_language: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_properties.is_another_language")
    keyword_data_serp_info_check_url: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.check_url")
    keyword_data_serp_info_serp_item_types: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.serp_item_types")
    keyword_data_serp_info_se_results_count: Optional[StrictInt] = Field(default=None, alias="keyword_data.serp_info.se_results_count")
    keyword_data_serp_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.last_updated_time")
    keyword_data_serp_info_previous_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.previous_updated_time")
    ranked_serp_element_serp_item_type: Optional[StrictStr] = Field(default=None, description="type of element", alias="ranked_serp_element.serp_item.type")
    ranked_serp_element_serp_item_rank_group: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.rank_group")
    ranked_serp_element_serp_item_rank_absolute: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.rank_absolute")
    ranked_serp_element_serp_item_position: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.position")
    ranked_serp_element_serp_item_xpath: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.xpath")
    ranked_serp_element_serp_item_title: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.title")
    ranked_serp_element_serp_item_domain: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.domain")
    ranked_serp_element_serp_item_description: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.description")
    ranked_serp_element_serp_item_breadcrumb: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.breadcrumb")
    ranked_serp_element_serp_item_url: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.url")
    ranked_serp_element_serp_item_main_domain: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.main_domain")
    ranked_serp_element_serp_item_relative_url: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.relative_url")
    ranked_serp_element_serp_item_etv: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.etv")
    ranked_serp_element_serp_item_estimated_paid_traffic_cost: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.estimated_paid_traffic_cost")
    ranked_serp_element_serp_item_rank_changes_previous_rank_absolute: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.rank_changes.previous_rank_absolute")
    ranked_serp_element_serp_item_rank_changes_is_new: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.rank_changes.is_new")
    ranked_serp_element_serp_item_rank_changes_is_up: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.rank_changes.is_up")
    ranked_serp_element_serp_item_rank_changes_is_down: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.rank_changes.is_down")
    ranked_serp_element_serp_item_backlinks_info_referring_domains: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.backlinks_info.referring_domains")
    ranked_serp_element_serp_item_backlinks_info_referring_main_domains: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.backlinks_info.referring_main_domains")
    ranked_serp_element_serp_item_backlinks_info_referring_pages: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.backlinks_info.referring_pages")
    ranked_serp_element_serp_item_backlinks_info_dofollow: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.backlinks_info.dofollow")
    ranked_serp_element_serp_item_backlinks_info_backlinks: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.backlinks_info.backlinks")
    ranked_serp_element_serp_item_backlinks_info_time_update: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.backlinks_info.time_update")
    ranked_serp_element_serp_item_rank_info_page_rank: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.rank_info.page_rank")
    ranked_serp_element_serp_item_rank_info_main_domain_rank: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.rank_info.main_domain_rank")
    ranked_serp_element_serp_item_is_image: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.is_image")
    ranked_serp_element_serp_item_is_video: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.is_video")
    ranked_serp_element_serp_item_impressions_etv: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.impressions_etv")
    ranked_serp_element_check_url: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.check_url")
    ranked_serp_element_serp_item_types: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item_types")
    ranked_serp_element_se_results_count: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.se_results_count")
    ranked_serp_element_keyword_difficulty: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.keyword_difficulty")
    ranked_serp_element_is_lost: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.is_lost")
    ranked_serp_element_last_updated_time: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.last_updated_time")
    ranked_serp_element_previous_updated_time: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.previous_updated_time")
    ranked_serp_element_serp_item_extra_ad_aclk: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.extra.ad_aclk")
    ranked_serp_element_serp_item_description_rows: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.description_rows")
    ranked_serp_element_serp_item_phone: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.phone")
    ranked_serp_element_serp_item_is_paid: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.is_paid")
    ranked_serp_element_serp_item_featured_title: Optional[StrictStr] = Field(default=None, alias="ranked_serp_element.serp_item.featured_title")
    __properties: ClassVar[List[str]] = ["keyword_data.keyword", "keyword_data.keyword_info.last_updated_time", "keyword_data.keyword_info.competition", "keyword_data.keyword_info.cpc", "keyword_data.keyword_info.search_volume", "keyword_data.keyword_properties.core_keyword", "keyword_data.keyword_properties.synonym_clustering_algorithm", "keyword_data.keyword_properties.keyword_difficulty", "keyword_data.keyword_properties.detected_language", "keyword_data.keyword_properties.is_another_language", "keyword_data.serp_info.check_url", "keyword_data.serp_info.serp_item_types", "keyword_data.serp_info.se_results_count", "keyword_data.serp_info.last_updated_time", "keyword_data.serp_info.previous_updated_time", "ranked_serp_element.serp_item.type", "ranked_serp_element.serp_item.rank_group", "ranked_serp_element.serp_item.rank_absolute", "ranked_serp_element.serp_item.position", "ranked_serp_element.serp_item.xpath", "ranked_serp_element.serp_item.title", "ranked_serp_element.serp_item.domain", "ranked_serp_element.serp_item.description", "ranked_serp_element.serp_item.breadcrumb", "ranked_serp_element.serp_item.url", "ranked_serp_element.serp_item.main_domain", "ranked_serp_element.serp_item.relative_url", "ranked_serp_element.serp_item.etv", "ranked_serp_element.serp_item.estimated_paid_traffic_cost", "ranked_serp_element.serp_item.rank_changes.previous_rank_absolute", "ranked_serp_element.serp_item.rank_changes.is_new", "ranked_serp_element.serp_item.rank_changes.is_up", "ranked_serp_element.serp_item.rank_changes.is_down", "ranked_serp_element.serp_item.backlinks_info.referring_domains", "ranked_serp_element.serp_item.backlinks_info.referring_main_domains", "ranked_serp_element.serp_item.backlinks_info.referring_pages", "ranked_serp_element.serp_item.backlinks_info.dofollow", "ranked_serp_element.serp_item.backlinks_info.backlinks", "ranked_serp_element.serp_item.backlinks_info.time_update", "ranked_serp_element.serp_item.rank_info.page_rank", "ranked_serp_element.serp_item.rank_info.main_domain_rank", "ranked_serp_element.serp_item.is_image", "ranked_serp_element.serp_item.is_video", "ranked_serp_element.serp_item.impressions_etv", "ranked_serp_element.check_url", "ranked_serp_element.serp_item_types", "ranked_serp_element.se_results_count", "ranked_serp_element.keyword_difficulty", "ranked_serp_element.is_lost", "ranked_serp_element.last_updated_time", "ranked_serp_element.previous_updated_time", "ranked_serp_element.serp_item.extra.ad_aclk", "ranked_serp_element.serp_item.description_rows", "ranked_serp_element.serp_item.phone", "ranked_serp_element.serp_item.is_paid", "ranked_serp_element.serp_item.featured_title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RankedKeywordsBingDataforseoLabsAvailableFiltersBingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if keyword_data_keyword (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword is None and "keyword_data_keyword" in self.model_fields_set:
            _dict['keyword_data.keyword'] = None

        # set to None if keyword_data_keyword_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_last_updated_time is None and "keyword_data_keyword_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.keyword_info.last_updated_time'] = None

        # set to None if keyword_data_keyword_info_competition (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_competition is None and "keyword_data_keyword_info_competition" in self.model_fields_set:
            _dict['keyword_data.keyword_info.competition'] = None

        # set to None if keyword_data_keyword_info_cpc (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_cpc is None and "keyword_data_keyword_info_cpc" in self.model_fields_set:
            _dict['keyword_data.keyword_info.cpc'] = None

        # set to None if keyword_data_keyword_info_search_volume (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_search_volume is None and "keyword_data_keyword_info_search_volume" in self.model_fields_set:
            _dict['keyword_data.keyword_info.search_volume'] = None

        # set to None if keyword_data_keyword_properties_core_keyword (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_core_keyword is None and "keyword_data_keyword_properties_core_keyword" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.core_keyword'] = None

        # set to None if keyword_data_keyword_properties_synonym_clustering_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_synonym_clustering_algorithm is None and "keyword_data_keyword_properties_synonym_clustering_algorithm" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.synonym_clustering_algorithm'] = None

        # set to None if keyword_data_keyword_properties_keyword_difficulty (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_keyword_difficulty is None and "keyword_data_keyword_properties_keyword_difficulty" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.keyword_difficulty'] = None

        # set to None if keyword_data_keyword_properties_detected_language (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_detected_language is None and "keyword_data_keyword_properties_detected_language" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.detected_language'] = None

        # set to None if keyword_data_keyword_properties_is_another_language (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_properties_is_another_language is None and "keyword_data_keyword_properties_is_another_language" in self.model_fields_set:
            _dict['keyword_data.keyword_properties.is_another_language'] = None

        # set to None if keyword_data_serp_info_check_url (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_check_url is None and "keyword_data_serp_info_check_url" in self.model_fields_set:
            _dict['keyword_data.serp_info.check_url'] = None

        # set to None if keyword_data_serp_info_serp_item_types (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_serp_item_types is None and "keyword_data_serp_info_serp_item_types" in self.model_fields_set:
            _dict['keyword_data.serp_info.serp_item_types'] = None

        # set to None if keyword_data_serp_info_se_results_count (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_se_results_count is None and "keyword_data_serp_info_se_results_count" in self.model_fields_set:
            _dict['keyword_data.serp_info.se_results_count'] = None

        # set to None if keyword_data_serp_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_last_updated_time is None and "keyword_data_serp_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.serp_info.last_updated_time'] = None

        # set to None if keyword_data_serp_info_previous_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_previous_updated_time is None and "keyword_data_serp_info_previous_updated_time" in self.model_fields_set:
            _dict['keyword_data.serp_info.previous_updated_time'] = None

        # set to None if ranked_serp_element_serp_item_type (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_type is None and "ranked_serp_element_serp_item_type" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.type'] = None

        # set to None if ranked_serp_element_serp_item_rank_group (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_rank_group is None and "ranked_serp_element_serp_item_rank_group" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.rank_group'] = None

        # set to None if ranked_serp_element_serp_item_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_rank_absolute is None and "ranked_serp_element_serp_item_rank_absolute" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.rank_absolute'] = None

        # set to None if ranked_serp_element_serp_item_position (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_position is None and "ranked_serp_element_serp_item_position" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.position'] = None

        # set to None if ranked_serp_element_serp_item_xpath (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_xpath is None and "ranked_serp_element_serp_item_xpath" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.xpath'] = None

        # set to None if ranked_serp_element_serp_item_title (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_title is None and "ranked_serp_element_serp_item_title" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.title'] = None

        # set to None if ranked_serp_element_serp_item_domain (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_domain is None and "ranked_serp_element_serp_item_domain" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.domain'] = None

        # set to None if ranked_serp_element_serp_item_description (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_description is None and "ranked_serp_element_serp_item_description" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.description'] = None

        # set to None if ranked_serp_element_serp_item_breadcrumb (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_breadcrumb is None and "ranked_serp_element_serp_item_breadcrumb" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.breadcrumb'] = None

        # set to None if ranked_serp_element_serp_item_url (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_url is None and "ranked_serp_element_serp_item_url" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.url'] = None

        # set to None if ranked_serp_element_serp_item_main_domain (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_main_domain is None and "ranked_serp_element_serp_item_main_domain" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.main_domain'] = None

        # set to None if ranked_serp_element_serp_item_relative_url (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_relative_url is None and "ranked_serp_element_serp_item_relative_url" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.relative_url'] = None

        # set to None if ranked_serp_element_serp_item_etv (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_etv is None and "ranked_serp_element_serp_item_etv" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.etv'] = None

        # set to None if ranked_serp_element_serp_item_estimated_paid_traffic_cost (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_estimated_paid_traffic_cost is None and "ranked_serp_element_serp_item_estimated_paid_traffic_cost" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.estimated_paid_traffic_cost'] = None

        # set to None if ranked_serp_element_serp_item_rank_changes_previous_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_rank_changes_previous_rank_absolute is None and "ranked_serp_element_serp_item_rank_changes_previous_rank_absolute" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.rank_changes.previous_rank_absolute'] = None

        # set to None if ranked_serp_element_serp_item_rank_changes_is_new (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_rank_changes_is_new is None and "ranked_serp_element_serp_item_rank_changes_is_new" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.rank_changes.is_new'] = None

        # set to None if ranked_serp_element_serp_item_rank_changes_is_up (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_rank_changes_is_up is None and "ranked_serp_element_serp_item_rank_changes_is_up" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.rank_changes.is_up'] = None

        # set to None if ranked_serp_element_serp_item_rank_changes_is_down (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_rank_changes_is_down is None and "ranked_serp_element_serp_item_rank_changes_is_down" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.rank_changes.is_down'] = None

        # set to None if ranked_serp_element_serp_item_backlinks_info_referring_domains (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_backlinks_info_referring_domains is None and "ranked_serp_element_serp_item_backlinks_info_referring_domains" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.backlinks_info.referring_domains'] = None

        # set to None if ranked_serp_element_serp_item_backlinks_info_referring_main_domains (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_backlinks_info_referring_main_domains is None and "ranked_serp_element_serp_item_backlinks_info_referring_main_domains" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.backlinks_info.referring_main_domains'] = None

        # set to None if ranked_serp_element_serp_item_backlinks_info_referring_pages (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_backlinks_info_referring_pages is None and "ranked_serp_element_serp_item_backlinks_info_referring_pages" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.backlinks_info.referring_pages'] = None

        # set to None if ranked_serp_element_serp_item_backlinks_info_dofollow (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_backlinks_info_dofollow is None and "ranked_serp_element_serp_item_backlinks_info_dofollow" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.backlinks_info.dofollow'] = None

        # set to None if ranked_serp_element_serp_item_backlinks_info_backlinks (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_backlinks_info_backlinks is None and "ranked_serp_element_serp_item_backlinks_info_backlinks" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.backlinks_info.backlinks'] = None

        # set to None if ranked_serp_element_serp_item_backlinks_info_time_update (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_backlinks_info_time_update is None and "ranked_serp_element_serp_item_backlinks_info_time_update" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.backlinks_info.time_update'] = None

        # set to None if ranked_serp_element_serp_item_rank_info_page_rank (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_rank_info_page_rank is None and "ranked_serp_element_serp_item_rank_info_page_rank" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.rank_info.page_rank'] = None

        # set to None if ranked_serp_element_serp_item_rank_info_main_domain_rank (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_rank_info_main_domain_rank is None and "ranked_serp_element_serp_item_rank_info_main_domain_rank" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.rank_info.main_domain_rank'] = None

        # set to None if ranked_serp_element_serp_item_is_image (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_is_image is None and "ranked_serp_element_serp_item_is_image" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.is_image'] = None

        # set to None if ranked_serp_element_serp_item_is_video (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_is_video is None and "ranked_serp_element_serp_item_is_video" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.is_video'] = None

        # set to None if ranked_serp_element_serp_item_impressions_etv (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_impressions_etv is None and "ranked_serp_element_serp_item_impressions_etv" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.impressions_etv'] = None

        # set to None if ranked_serp_element_check_url (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_check_url is None and "ranked_serp_element_check_url" in self.model_fields_set:
            _dict['ranked_serp_element.check_url'] = None

        # set to None if ranked_serp_element_serp_item_types (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_types is None and "ranked_serp_element_serp_item_types" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item_types'] = None

        # set to None if ranked_serp_element_se_results_count (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_se_results_count is None and "ranked_serp_element_se_results_count" in self.model_fields_set:
            _dict['ranked_serp_element.se_results_count'] = None

        # set to None if ranked_serp_element_keyword_difficulty (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_keyword_difficulty is None and "ranked_serp_element_keyword_difficulty" in self.model_fields_set:
            _dict['ranked_serp_element.keyword_difficulty'] = None

        # set to None if ranked_serp_element_is_lost (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_is_lost is None and "ranked_serp_element_is_lost" in self.model_fields_set:
            _dict['ranked_serp_element.is_lost'] = None

        # set to None if ranked_serp_element_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_last_updated_time is None and "ranked_serp_element_last_updated_time" in self.model_fields_set:
            _dict['ranked_serp_element.last_updated_time'] = None

        # set to None if ranked_serp_element_previous_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_previous_updated_time is None and "ranked_serp_element_previous_updated_time" in self.model_fields_set:
            _dict['ranked_serp_element.previous_updated_time'] = None

        # set to None if ranked_serp_element_serp_item_extra_ad_aclk (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_extra_ad_aclk is None and "ranked_serp_element_serp_item_extra_ad_aclk" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.extra.ad_aclk'] = None

        # set to None if ranked_serp_element_serp_item_description_rows (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_description_rows is None and "ranked_serp_element_serp_item_description_rows" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.description_rows'] = None

        # set to None if ranked_serp_element_serp_item_phone (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_phone is None and "ranked_serp_element_serp_item_phone" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.phone'] = None

        # set to None if ranked_serp_element_serp_item_is_paid (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_is_paid is None and "ranked_serp_element_serp_item_is_paid" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.is_paid'] = None

        # set to None if ranked_serp_element_serp_item_featured_title (nullable) is None
        # and model_fields_set contains the field
        if self.ranked_serp_element_serp_item_featured_title is None and "ranked_serp_element_serp_item_featured_title" in self.model_fields_set:
            _dict['ranked_serp_element.serp_item.featured_title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RankedKeywordsBingDataforseoLabsAvailableFiltersBingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyword_data.keyword": obj.get("keyword_data.keyword"),
            "keyword_data.keyword_info.last_updated_time": obj.get("keyword_data.keyword_info.last_updated_time"),
            "keyword_data.keyword_info.competition": obj.get("keyword_data.keyword_info.competition"),
            "keyword_data.keyword_info.cpc": obj.get("keyword_data.keyword_info.cpc"),
            "keyword_data.keyword_info.search_volume": obj.get("keyword_data.keyword_info.search_volume"),
            "keyword_data.keyword_properties.core_keyword": obj.get("keyword_data.keyword_properties.core_keyword"),
            "keyword_data.keyword_properties.synonym_clustering_algorithm": obj.get("keyword_data.keyword_properties.synonym_clustering_algorithm"),
            "keyword_data.keyword_properties.keyword_difficulty": obj.get("keyword_data.keyword_properties.keyword_difficulty"),
            "keyword_data.keyword_properties.detected_language": obj.get("keyword_data.keyword_properties.detected_language"),
            "keyword_data.keyword_properties.is_another_language": obj.get("keyword_data.keyword_properties.is_another_language"),
            "keyword_data.serp_info.check_url": obj.get("keyword_data.serp_info.check_url"),
            "keyword_data.serp_info.serp_item_types": obj.get("keyword_data.serp_info.serp_item_types"),
            "keyword_data.serp_info.se_results_count": obj.get("keyword_data.serp_info.se_results_count"),
            "keyword_data.serp_info.last_updated_time": obj.get("keyword_data.serp_info.last_updated_time"),
            "keyword_data.serp_info.previous_updated_time": obj.get("keyword_data.serp_info.previous_updated_time"),
            "ranked_serp_element.serp_item.type": obj.get("ranked_serp_element.serp_item.type"),
            "ranked_serp_element.serp_item.rank_group": obj.get("ranked_serp_element.serp_item.rank_group"),
            "ranked_serp_element.serp_item.rank_absolute": obj.get("ranked_serp_element.serp_item.rank_absolute"),
            "ranked_serp_element.serp_item.position": obj.get("ranked_serp_element.serp_item.position"),
            "ranked_serp_element.serp_item.xpath": obj.get("ranked_serp_element.serp_item.xpath"),
            "ranked_serp_element.serp_item.title": obj.get("ranked_serp_element.serp_item.title"),
            "ranked_serp_element.serp_item.domain": obj.get("ranked_serp_element.serp_item.domain"),
            "ranked_serp_element.serp_item.description": obj.get("ranked_serp_element.serp_item.description"),
            "ranked_serp_element.serp_item.breadcrumb": obj.get("ranked_serp_element.serp_item.breadcrumb"),
            "ranked_serp_element.serp_item.url": obj.get("ranked_serp_element.serp_item.url"),
            "ranked_serp_element.serp_item.main_domain": obj.get("ranked_serp_element.serp_item.main_domain"),
            "ranked_serp_element.serp_item.relative_url": obj.get("ranked_serp_element.serp_item.relative_url"),
            "ranked_serp_element.serp_item.etv": obj.get("ranked_serp_element.serp_item.etv"),
            "ranked_serp_element.serp_item.estimated_paid_traffic_cost": obj.get("ranked_serp_element.serp_item.estimated_paid_traffic_cost"),
            "ranked_serp_element.serp_item.rank_changes.previous_rank_absolute": obj.get("ranked_serp_element.serp_item.rank_changes.previous_rank_absolute"),
            "ranked_serp_element.serp_item.rank_changes.is_new": obj.get("ranked_serp_element.serp_item.rank_changes.is_new"),
            "ranked_serp_element.serp_item.rank_changes.is_up": obj.get("ranked_serp_element.serp_item.rank_changes.is_up"),
            "ranked_serp_element.serp_item.rank_changes.is_down": obj.get("ranked_serp_element.serp_item.rank_changes.is_down"),
            "ranked_serp_element.serp_item.backlinks_info.referring_domains": obj.get("ranked_serp_element.serp_item.backlinks_info.referring_domains"),
            "ranked_serp_element.serp_item.backlinks_info.referring_main_domains": obj.get("ranked_serp_element.serp_item.backlinks_info.referring_main_domains"),
            "ranked_serp_element.serp_item.backlinks_info.referring_pages": obj.get("ranked_serp_element.serp_item.backlinks_info.referring_pages"),
            "ranked_serp_element.serp_item.backlinks_info.dofollow": obj.get("ranked_serp_element.serp_item.backlinks_info.dofollow"),
            "ranked_serp_element.serp_item.backlinks_info.backlinks": obj.get("ranked_serp_element.serp_item.backlinks_info.backlinks"),
            "ranked_serp_element.serp_item.backlinks_info.time_update": obj.get("ranked_serp_element.serp_item.backlinks_info.time_update"),
            "ranked_serp_element.serp_item.rank_info.page_rank": obj.get("ranked_serp_element.serp_item.rank_info.page_rank"),
            "ranked_serp_element.serp_item.rank_info.main_domain_rank": obj.get("ranked_serp_element.serp_item.rank_info.main_domain_rank"),
            "ranked_serp_element.serp_item.is_image": obj.get("ranked_serp_element.serp_item.is_image"),
            "ranked_serp_element.serp_item.is_video": obj.get("ranked_serp_element.serp_item.is_video"),
            "ranked_serp_element.serp_item.impressions_etv": obj.get("ranked_serp_element.serp_item.impressions_etv"),
            "ranked_serp_element.check_url": obj.get("ranked_serp_element.check_url"),
            "ranked_serp_element.serp_item_types": obj.get("ranked_serp_element.serp_item_types"),
            "ranked_serp_element.se_results_count": obj.get("ranked_serp_element.se_results_count"),
            "ranked_serp_element.keyword_difficulty": obj.get("ranked_serp_element.keyword_difficulty"),
            "ranked_serp_element.is_lost": obj.get("ranked_serp_element.is_lost"),
            "ranked_serp_element.last_updated_time": obj.get("ranked_serp_element.last_updated_time"),
            "ranked_serp_element.previous_updated_time": obj.get("ranked_serp_element.previous_updated_time"),
            "ranked_serp_element.serp_item.extra.ad_aclk": obj.get("ranked_serp_element.serp_item.extra.ad_aclk"),
            "ranked_serp_element.serp_item.description_rows": obj.get("ranked_serp_element.serp_item.description_rows"),
            "ranked_serp_element.serp_item.phone": obj.get("ranked_serp_element.serp_item.phone"),
            "ranked_serp_element.serp_item.is_paid": obj.get("ranked_serp_element.serp_item.is_paid"),
            "ranked_serp_element.serp_item.featured_title": obj.get("ranked_serp_element.serp_item.featured_title")
        })
        return _obj



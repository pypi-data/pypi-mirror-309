# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppleInfo(BaseModel):
    """
    AppleInfo
    """ # noqa: E501
    keyword_data_keyword: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword")
    keyword_data_keyword_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.last_updated_time")
    keyword_data_keyword_info_search_volume: Optional[StrictStr] = Field(default=None, alias="keyword_data.keyword_info.search_volume")
    keyword_data_serp_info_check_url: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.check_url")
    keyword_data_serp_info_se_results_count: Optional[StrictInt] = Field(default=None, alias="keyword_data.serp_info.se_results_count")
    keyword_data_serp_info_last_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.last_updated_time")
    keyword_data_serp_info_previous_updated_time: Optional[StrictStr] = Field(default=None, alias="keyword_data.serp_info.previous_updated_time")
    intersection_result_app_id_type: Optional[StrictStr] = Field(default=None, description="type of element", alias="intersection_result.$app_id.type")
    intersection_result_app_id_rank_group: Optional[StrictStr] = Field(default=None, alias="intersection_result.$app_id.rank_group")
    intersection_result_app_id_rank_absolute: Optional[StrictStr] = Field(default=None, alias="intersection_result.$app_id.rank_absolute")
    intersection_result_app_id_position: Optional[StrictStr] = Field(default=None, alias="intersection_result.$app_id.position")
    intersection_result_app_id_title: Optional[StrictStr] = Field(default=None, alias="intersection_result.$app_id.title")
    intersection_result_app_id_url: Optional[StrictStr] = Field(default=None, alias="intersection_result.$app_id.url")
    intersection_result_app_id_reviews_count: Optional[StrictStr] = Field(default=None, alias="intersection_result.$app_id.reviews_count")
    intersection_result_app_id_is_free: Optional[StrictStr] = Field(default=None, alias="intersection_result.$app_id.is_free")
    __properties: ClassVar[List[str]] = ["keyword_data.keyword", "keyword_data.keyword_info.last_updated_time", "keyword_data.keyword_info.search_volume", "keyword_data.serp_info.check_url", "keyword_data.serp_info.se_results_count", "keyword_data.serp_info.last_updated_time", "keyword_data.serp_info.previous_updated_time", "intersection_result.$app_id.type", "intersection_result.$app_id.rank_group", "intersection_result.$app_id.rank_absolute", "intersection_result.$app_id.position", "intersection_result.$app_id.title", "intersection_result.$app_id.url", "intersection_result.$app_id.reviews_count", "intersection_result.$app_id.is_free"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppleInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if keyword_data_keyword (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword is None and "keyword_data_keyword" in self.model_fields_set:
            _dict['keyword_data.keyword'] = None

        # set to None if keyword_data_keyword_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_last_updated_time is None and "keyword_data_keyword_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.keyword_info.last_updated_time'] = None

        # set to None if keyword_data_keyword_info_search_volume (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_keyword_info_search_volume is None and "keyword_data_keyword_info_search_volume" in self.model_fields_set:
            _dict['keyword_data.keyword_info.search_volume'] = None

        # set to None if keyword_data_serp_info_check_url (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_check_url is None and "keyword_data_serp_info_check_url" in self.model_fields_set:
            _dict['keyword_data.serp_info.check_url'] = None

        # set to None if keyword_data_serp_info_se_results_count (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_se_results_count is None and "keyword_data_serp_info_se_results_count" in self.model_fields_set:
            _dict['keyword_data.serp_info.se_results_count'] = None

        # set to None if keyword_data_serp_info_last_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_last_updated_time is None and "keyword_data_serp_info_last_updated_time" in self.model_fields_set:
            _dict['keyword_data.serp_info.last_updated_time'] = None

        # set to None if keyword_data_serp_info_previous_updated_time (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_data_serp_info_previous_updated_time is None and "keyword_data_serp_info_previous_updated_time" in self.model_fields_set:
            _dict['keyword_data.serp_info.previous_updated_time'] = None

        # set to None if intersection_result_app_id_type (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_app_id_type is None and "intersection_result_app_id_type" in self.model_fields_set:
            _dict['intersection_result.$app_id.type'] = None

        # set to None if intersection_result_app_id_rank_group (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_app_id_rank_group is None and "intersection_result_app_id_rank_group" in self.model_fields_set:
            _dict['intersection_result.$app_id.rank_group'] = None

        # set to None if intersection_result_app_id_rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_app_id_rank_absolute is None and "intersection_result_app_id_rank_absolute" in self.model_fields_set:
            _dict['intersection_result.$app_id.rank_absolute'] = None

        # set to None if intersection_result_app_id_position (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_app_id_position is None and "intersection_result_app_id_position" in self.model_fields_set:
            _dict['intersection_result.$app_id.position'] = None

        # set to None if intersection_result_app_id_title (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_app_id_title is None and "intersection_result_app_id_title" in self.model_fields_set:
            _dict['intersection_result.$app_id.title'] = None

        # set to None if intersection_result_app_id_url (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_app_id_url is None and "intersection_result_app_id_url" in self.model_fields_set:
            _dict['intersection_result.$app_id.url'] = None

        # set to None if intersection_result_app_id_reviews_count (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_app_id_reviews_count is None and "intersection_result_app_id_reviews_count" in self.model_fields_set:
            _dict['intersection_result.$app_id.reviews_count'] = None

        # set to None if intersection_result_app_id_is_free (nullable) is None
        # and model_fields_set contains the field
        if self.intersection_result_app_id_is_free is None and "intersection_result_app_id_is_free" in self.model_fields_set:
            _dict['intersection_result.$app_id.is_free'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppleInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keyword_data.keyword": obj.get("keyword_data.keyword"),
            "keyword_data.keyword_info.last_updated_time": obj.get("keyword_data.keyword_info.last_updated_time"),
            "keyword_data.keyword_info.search_volume": obj.get("keyword_data.keyword_info.search_volume"),
            "keyword_data.serp_info.check_url": obj.get("keyword_data.serp_info.check_url"),
            "keyword_data.serp_info.se_results_count": obj.get("keyword_data.serp_info.se_results_count"),
            "keyword_data.serp_info.last_updated_time": obj.get("keyword_data.serp_info.last_updated_time"),
            "keyword_data.serp_info.previous_updated_time": obj.get("keyword_data.serp_info.previous_updated_time"),
            "intersection_result.$app_id.type": obj.get("intersection_result.$app_id.type"),
            "intersection_result.$app_id.rank_group": obj.get("intersection_result.$app_id.rank_group"),
            "intersection_result.$app_id.rank_absolute": obj.get("intersection_result.$app_id.rank_absolute"),
            "intersection_result.$app_id.position": obj.get("intersection_result.$app_id.position"),
            "intersection_result.$app_id.title": obj.get("intersection_result.$app_id.title"),
            "intersection_result.$app_id.url": obj.get("intersection_result.$app_id.url"),
            "intersection_result.$app_id.reviews_count": obj.get("intersection_result.$app_id.reviews_count"),
            "intersection_result.$app_id.is_free": obj.get("intersection_result.$app_id.is_free")
        })
        return _obj



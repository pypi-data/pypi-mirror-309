{"version":3,"file":"lib_index_js.7a4b135b532500a91e77.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAEyC;AAEqB;AAE1B;AAEpC;;GAEG;AACH,MAAM,SAAS,GAAG,oCAAoC,CAAC;AAEvD;;GAEG;AACH,MAAM,UAAU,GAAG,uBAAuB,CAAC;AAE3C;;GAEG;AACI,MAAM,UAAW,SAAQ,mDAAM;IACpC;;OAEG;IACH,YAAY,OAAqC;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,KAA6B;QAC9C,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAW,CAAC;QAEjD,yBAAyB;QACzB,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEzB,8BAA8B;QAC9B,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACpD,aAAa,CAAC,EAAE,GAAG,gBAAgB,GAAG,wCAAM,EAAE,CAAC,CAAC,6BAA6B;QAE7E,gDAAgD;QAChD,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;QACvC,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC;QACxC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAC;QAC9C,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QAErC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAErC,mCAAmC;QACnC,MAAM,IAAI,GAAG,IAAI,wEAAqB,CAAC,aAAa,CAAC,CAAC;QACtD,IAAI,CAAC,UAAU,CAAC;YACd,UAAU,EAAE,IAAI;YAChB,OAAO,EAAG,QAAQ,EAAE,QAAQ;YAC5B,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QAEH,yBAAyB;QACzB,OAAO,IAAI;aACN,IAAI,CAAC,IAAI,CAAC;aACV,IAAI,CAAC,GAAG,EAAE;YACP,IAAI,CAAC,MAAM,EAAE,CAAC;QAClB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,aAAa,CAAC,SAAS,GAAG,kCAAkC,CAAC;QACjE,CAAC,CAAC;aACD,OAAO,CAAC,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACT,CAAC;CAGF;AAED;;GAEG;AACI,MAAM,eAAe,GAAiC;IAC3D,IAAI,EAAE,IAAI;IACV,SAAS,EAAE,CAAC,SAAS,CAAC;IACtB,cAAc,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC;CACnD,CAAC;AAEF;;GAEG;AACH,MAAM,SAAS,GAA2B;IACxC,EAAE,EAAE,wBAAwB;IAC5B,+DAA+D;IAC/D,eAAe;IACf,IAAI,EAAE,GAAG;IACT,QAAQ,EAAE,QAAQ;IAClB,SAAS,EAAE;QACT;YACE,IAAI,EAAE,UAAU;YAChB,SAAS,EAAE,CAAC,SAAS,CAAC;YACtB,UAAU,EAAE,CAAC,WAAW,CAAC;SAC1B;KACF;IACD,4BAA4B,EAAE;QAC5B,IAAI,EAAE,uDAAuD;QAC7D,eAAe,EAAE,UAAU;QAC3B,SAAS,EAAE,CAAC,UAAU,CAAC;QACvB,UAAU,EAAE,CAAC,UAAU,CAAC;KACzB;CACF,CAAC;AAEF,iEAAe,SAAS,EAAC","sources":["webpack://jupyterlab-osmd/./src/index.ts"],"sourcesContent":["import { IRenderMime } from '@jupyterlab/rendermime-interfaces';\n\nimport { Widget } from '@lumino/widgets';\n\nimport { OpenSheetMusicDisplay } from 'opensheetmusicdisplay';\n\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * The default mime type for the extension.\n */\nconst MIME_TYPE = 'application/vnd.recordare.musicxml';\n\n/**\n * The class name added to the extension.\n */\nconst CLASS_NAME = 'mimerenderer-musicxml';\n\n/**\n * A widget for rendering musicxml.\n */\nexport class OSMDWidget extends Widget implements IRenderMime.IRenderer {\n  /**\n   * Construct a new output widget.\n   */\n  constructor(options: IRenderMime.IRendererOptions) {\n    super();\n    this._mimeType = options.mimeType;\n    this.addClass(CLASS_NAME);\n  }\n\n  /**\n   * Render musicxml into this widget's node.\n   */\n  async renderModel(model: IRenderMime.IMimeModel): Promise<void> {\n   const data = model.data[this._mimeType] as string;\n\n    // Clear existing content\n    this.node.innerHTML = '';\n\n    // Create a container for OSMD\n    const osmdContainer = document.createElement('div');\n    osmdContainer.id = 'osmdContainer-' + uuidv4(); // Use UUID as part of the ID\n\n    // Apply styles to make the container scrollable\n    osmdContainer.style.overflowY = 'auto';\n    osmdContainer.style.maxHeight = '700px';\n    osmdContainer.style.border = '1px solid #ccc';\n    osmdContainer.style.padding = '10px';\n\n    this.node.appendChild(osmdContainer);\n\n    // Initialize OpenSheetMusicDisplay\n    const osmd = new OpenSheetMusicDisplay(osmdContainer);\n    osmd.setOptions({\n      autoResize: true,\n      backend:  'canvas', //'svg',\n      drawTitle: true\n    });\n\n    // Return a Promise chain\n    return osmd\n        .load(data)\n        .then(() => {\n            osmd.render();\n        })\n        .catch((error) => {\n            console.error('Failed to load or render MusicXML:', error);\n            osmdContainer.innerHTML = '<p>Error loading music score</p>';\n        })\n        .finally(() => {\n            console.log('Rendering process complete');\n        });\n  }\n\n  private _mimeType: string;\n}\n\n/**\n * A mime renderer factory for musicxml data.\n */\nexport const rendererFactory: IRenderMime.IRendererFactory = {\n  safe: true,\n  mimeTypes: [MIME_TYPE],\n  createRenderer: options => new OSMDWidget(options)\n};\n\n/**\n * Extension definition.\n */\nconst extension: IRenderMime.IExtension = {\n  id: 'jupyterlab-osmd:plugin',\n  // description: 'Adds MIME type renderer for musicxml content',\n  rendererFactory,\n  rank: 100,\n  dataType: 'string',\n  fileTypes: [\n    {\n      name: 'musicxml',\n      mimeTypes: [MIME_TYPE],\n      extensions: ['.musicxml']\n    }\n  ],\n  documentWidgetFactoryOptions: {\n    name: 'JupyterLab OpenSheetMusicDisplay (OSMD) mime renderer',\n    primaryFileType: 'musicxml',\n    fileTypes: ['musicxml'],\n    defaultFor: ['musicxml']\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}
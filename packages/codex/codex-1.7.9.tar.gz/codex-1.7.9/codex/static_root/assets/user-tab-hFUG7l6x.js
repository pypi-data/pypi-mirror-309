import{_ as V,h as i,j as u,k as c,a as r,W as h,D as y,A as v,M as C,E as b,l as n,w as l,q as E,n as m,H as j,ap as I}from"./main-B0XsokNO.js";import{A as x,R as N,a as B,b as L,c as z}from"./relation-chips-DcMagp92.js";import{useAdminStore as p}from"./admin-DSf9mKpY.js";import{b as f}from"./VSelectionControl-dirzqbsX.js";import{V as U}from"./VCheckbox-LVWiZ44B.js";import{D as O}from"./datetime-column-DOcyrUSv.js";import{a as J}from"./change-password-dialog-DWFtOUJt.js";import{V as k}from"./VCheckboxBtn-gRk-tQmL.js";import"./forwardRefs--sLajfbv.js";import"./VForm-CVsL2Cxt.js";import"./VDialog-Z7zDn7KN.js";import"./VSelect-CyG4ax1z.js";import"./ssrBoot-D0SN4REy.js";import"./VDivider-Nn4Fa5-R.js";import"./VTable-C5cDzOH4.js";import"./filter-DZR8HlwW.js";import"./confirm-dialog-Blv3xlBT.js";const D=["username","isStaff","isActive","groups"];Object.freeze(D);const A={username:"",password:"",passwordConfirm:"",isStaff:!1,isActive:!0,groups:[]};Object.freeze(A);const K={name:"AdminUserCreateUpdateInputs",components:{AdminRelationPicker:x},props:{oldRow:{type:[Object,Boolean],default:!1}},emits:["change"],data(){return{rules:{username:[e=>!!e||"Username is required",e=>!!e&&!this.usernames.has(e.trim())||"Username already used"],password:[e=>!!e||"Password is required"],passwordConfirm:[e=>e===this.row.password||"Passwords must match"]},row:C(this.oldRow||A)}},computed:{...b(p,{groups:e=>e.groups,users:e=>e.users}),usernames(){return this.nameSet(this.users,"username",this.oldRow,!0)}},watch:{row:{handler(e){this.$emit("change",e)},deep:!0},oldRow:{handler(e){this.row=C(e)},deep:!0}},methods:{...v(p,["nameSet"])},UPDATE_KEYS:D,EMPTY_ROW:A},M={key:0};function Y(e,s,g,R,o,S){const d=i("AdminRelationPicker");return u(),c("div",null,[r(f,{modelValue:o.row.username,"onUpdate:modelValue":s[0]||(s[0]=a=>o.row.username=a),autocomplete:"username",label:"Username",rules:o.rules.username,clearable:"",autofocus:"",onKeydown:s[1]||(s[1]=h(a=>e.$refs.password.focus(),["enter"]))},null,8,["modelValue","rules"]),g.oldRow?y("",!0):(u(),c("div",M,[r(f,{ref:"password",modelValue:o.row.password,"onUpdate:modelValue":s[2]||(s[2]=a=>o.row.password=a),autocomplete:"new-password",label:"Password",rules:o.rules.password,clearable:"",type:"password",onKeydown:s[3]||(s[3]=h(a=>e.$refs.passwordConfirm.focus(),["enter"]))},null,8,["modelValue","rules"]),r(f,{ref:"passwordConfirm",modelValue:o.row.passwordConfirm,"onUpdate:modelValue":s[4]||(s[4]=a=>o.row.passwordConfirm=a),autocomplete:"new-password",label:"Confirm Password",rules:o.rules.passwordConfirm,clearable:"",type:"password"},null,8,["modelValue","rules"])])),r(U,{modelValue:o.row.isStaff,"onUpdate:modelValue":s[5]||(s[5]=a=>o.row.isStaff=a),label:"Is Staff"},null,8,["modelValue"]),r(U,{modelValue:o.row.isActive,"onUpdate:modelValue":s[6]||(s[6]=a=>o.row.isActive=a),label:"Is Active"},null,8,["modelValue"]),r(d,{modelValue:o.row.groups,"onUpdate:modelValue":s[7]||(s[7]=a=>o.row.groups=a),label:"Groups",objs:e.groups,"title-key":"name","group-type":""},null,8,["modelValue","objs"])])}const q=V(K,[["render",Y]]),G={name:"AdminUsersTab",components:{AdminTable:z,AdminDeleteRowDialog:L,ChangePasswordDialog:J,AdminCreateUpdateDialog:B,DateTimeColumn:O,RelationChips:N},data(){return{AdminUserCreateUpdateInputs:I(q),headers:[{title:"Username",key:"username",align:"start"},{title:"Staff",key:"isStaff"},{title:"Active",key:"isActive"},{title:"Groups",key:"groups"},{title:"Last Active",key:"lastActive"},{title:"Last Login",key:"lastLogin"},{title:"Joined",key:"dateJoined"},{title:"Actions",key:"actions",sortable:!1}]}},computed:{...b(p,{users:e=>e.users,groups:e=>e.groups}),...b(j,{me:e=>e.user})},mounted(){this.loadTables(["Group","User"])},methods:{...v(p,["loadTables"])}},H={class:"tabHeader"};function W(e,s,g,R,o,S){const d=i("AdminCreateUpdateDialog"),a=i("RelationChips"),w=i("DateTimeColumn"),T=i("ChangePasswordDialog"),_=i("AdminDeleteRowDialog"),P=i("AdminTable");return u(),c("div",null,[n("header",H,[r(d,{table:"User",inputs:o.AdminUserCreateUpdateInputs,"max-width":"20em"},null,8,["inputs"])]),r(P,{"item-title":"username",headers:o.headers,items:e.users},{"no-data":l(()=>s[0]||(s[0]=[n("td",{class:"adminNoData",colspan:"100%"},[m(" No Users. "),n("div",null,[m(" This is an error. There should always be at least one Staff user."),n("br"),m(" You should not be able to see this page"),n("br"),m(" You should restart Codex with the CODEX_RESET_ADMIN=1 variable set."),n("br"),m(" See the "),n("a",{href:"https://github.com/ajslater/codex#reset-the-admin-password",target:"_blank"}," README ")])],-1)])),"item.isStaff":l(({item:t})=>[r(k,{"model-value":t.isStaff,disabled:""},null,8,["model-value"])]),"item.isActive":l(({item:t})=>[r(k,{"model-value":t.isActive,disabled:""},null,8,["model-value"])]),"item.groups":l(({item:t})=>[r(a,{pks:t.groups,objs:e.groups,"title-key":"name","group-type":""},null,8,["pks","objs"])]),"item.lastActive":l(({item:t})=>[r(w,{dttm:t.lastActive},null,8,["dttm"])]),"item.lastLogin":l(({item:t})=>[r(w,{dttm:t.lastLogin},null,8,["dttm"])]),"item.dateJoined":l(({item:t})=>[r(w,{dttm:t.dateJoined},null,8,["dttm"])]),"item.actions":l(({item:t})=>[r(d,{table:"User",inputs:o.AdminUserCreateUpdateInputs,"old-row":t,"max-width":"20em",size:"small",density:"compact"},null,8,["inputs","old-row"]),r(T,{user:t,"is-admin-mode":!0,size:"small",density:"compact"},null,8,["user"]),e.me.id!==t.pk?(u(),E(_,{key:0,table:"User",pk:t.pk,name:t.username,size:"small",density:"compact"},null,8,["pk","name"])):y("",!0)]),_:2},1032,["headers","items"])])}const pe=V(G,[["render",W]]);export{pe as default};

#!/usr/bin/env python3

from enum import Enum

from loguru import logger

from peelee.color_utils import hex2hls, hex2rgb, hls2hex


class SliceType(Enum):
    """Color slice types"""

    DARKER = 0
    LIGHTER = 1


class SliceParameters(dict):
    """Slice parameters to generate slice colors"""

    def __init__(self, hex_color, n_slices, slice_type):
        self.hex_color = hex_color
        self.n_slices = n_slices
        self.slice_type = slice_type

        rgb_color = hex2rgb(hex_color)
        self.is_black_or_white_gray = max(rgb_color) == min(rgb_color)

        hls_color = hex2hls(self.hex_color)
        orig_lightness = hls_color[1]
        orig_saturation = hls_color[2]
        self.hue = hls_color[0]

        self.lightness_decimal_length = max(len(str(orig_lightness)[2:]), 16)
        self.full_lightness = 10**self.lightness_decimal_length
        lightness = orig_lightness * self.full_lightness
        self.int_lightness = int(lightness)

        self.saturation_decimal_length = max(len(str(orig_saturation)[2:]), 16)
        self.full_saturation = 10**self.saturation_decimal_length
        saturation = orig_saturation * self.full_saturation
        self.int_saturation = int(saturation)

        if slice_type == SliceType.LIGHTER:
            self.min_lightness = self.int_lightness
            self.max_lightness = self.full_lightness
            self.lightness_slice_step = (
                self.full_lightness - self.int_lightness
            ) // self.n_slices
            self.min_saturation = self.int_saturation
            self.max_saturation = self.full_saturation
            self.saturation_slice_step = (
                self.full_saturation - self.int_saturation
            ) // self.n_slices
        else:
            self.max_lightness = self.int_lightness
            self.min_lightness = 0
            self.lightness_slice_step = self.int_lightness // self.n_slices
            self.max_saturation = self.int_saturation
            self.min_saturation = 0
            self.saturation_slice_step = self.int_saturation // self.n_slices

        super().update(
            hex_color=self.hex_color,
            hue=self.hue,
            n_slices=self.n_slices,
            slice_type=self.slice_type,
            is_black_or_white_gray=self.is_black_or_white_gray,
            full_lightness=self.full_lightness,
            full_saturation=self.full_saturation,
            int_lightness=self.int_lightness,
            int_saturation=self.int_saturation,
            min_lightness=self.min_lightness,
            max_lightness=self.max_lightness,
            min_saturation=self.min_saturation,
            max_saturation=self.max_saturation,
            lightness_slice_step=self.lightness_slice_step,
            saturation_slice_step=self.saturation_slice_step,
        )


def darker(base_color, n_color):
    """Given base color, return 'n' color hex codes from base color to darkest
    color."""
    return get_slice_colors(base_color, n_color, SliceType.DARKER)


def lighter(base_color, n_color):
    """Given base color, return 'n' color hex codes from base color to lightest
    color."""
    return get_slice_colors(base_color, n_color, SliceType.LIGHTER)


def get_slice_colors(
    hex_color,
    n_slices,
    color_slice_type: SliceType = SliceType.DARKER,
):
    """Given base color, return 'n' color hex codes from base color to darkest
    color.

    Parameters:
        hex_color - base color in hex format.
        n_slices - how many slices to generate.
        color_slice_type - type of slice: DARKER or LIGHTER.

    Return:
        list - a list of hex colors generated by slicing the hex_color.
    """
    slice_parameters = SliceParameters(hex_color, n_slices, color_slice_type)

    lightness_list = get_lightness_list(slice_parameters)
    saturation_list = get_saturation_list(slice_parameters)

    hls_slice_colors = get_hls_slice_colors(
        slice_parameters, lightness_list, saturation_list
    )

    hex_slice_colors = [hls2hex(hls_color) for hls_color in hls_slice_colors]
    if hex_color not in hex_slice_colors:
        if color_slice_type == SliceType.DARKER:
            hex_slice_colors = hex_slice_colors[0:-1]
            hex_slice_colors.append(hex_color)
        else:
            hex_slice_colors.insert(0, hex_color)
            hex_slice_colors = hex_slice_colors[0:-1]
    return hex_slice_colors


def get_lightness_list(slice_parameters: SliceParameters):
    """Generate a list of lightnesses based on slice parameters.

    Return:
        A list of lightness values.

    Refer to:
        class SliceParameters
    """
    n_slices = slice_parameters.n_slices
    int_lightness = slice_parameters.int_lightness
    min_lightness = slice_parameters.min_lightness
    max_lightness = slice_parameters.max_lightness
    color_slice_type = slice_parameters.slice_type
    lightness_slice_step = slice_parameters.lightness_slice_step

    if int_lightness == 0 and color_slice_type == SliceType.DARKER:
        lightness_list = [0 for _ in range(n_slices)]
    elif lightness_slice_step == 0:
        lightness_list = [int_lightness for _ in range(n_slices)]
    else:
        lightness_list = list(
            range(min_lightness, max_lightness, lightness_slice_step)[
                0:n_slices
            ]
        )
    return lightness_list


def get_saturation_list(slice_parameters):
    """Generate a list of saturation based on slice parameters.

    Return:
        A list of lightness values.

    Refer to:
        class SliceParameters
    """
    n_slices = slice_parameters.n_slices
    slice_type = slice_parameters.slice_type
    is_black_or_white_gray = slice_parameters.is_black_or_white_gray
    full_saturation = slice_parameters.full_saturation
    int_saturation = slice_parameters.int_saturation
    min_saturation = slice_parameters.min_saturation
    max_saturation = slice_parameters.max_saturation
    saturation_slice_step = slice_parameters.saturation_slice_step

    # cannot be darker or won't change black to other color (e.g. red)
    if int_saturation == 0 and (
        slice_type == SliceType.DARKER or is_black_or_white_gray
    ):
        saturation_list = [0 for _ in range(n_slices)]
    elif int_saturation >= full_saturation and (
        slice_type == SliceType.LIGHTER or is_black_or_white_gray
    ):
        saturation_list = [full_saturation for _ in range(n_slices)]
    elif saturation_slice_step == 0:
        saturation_list = [int_saturation for _ in range(n_slices)]
    else:
        try:
            saturation_list = list(
                range(min_saturation, max_saturation, saturation_slice_step)[
                    0:n_slices
                ]
            )
        except ValueError as exc:
            logger.error(slice_parameters)
            raise exc
    return saturation_list


def get_hls_slice_colors(slice_parameters, lightness_list, saturation_list):
    """Generate HLS Slice Colors"""
    hue = slice_parameters.hue
    n_slices = slice_parameters.n_slices
    full_lightness = slice_parameters.full_lightness
    full_saturation = slice_parameters.full_saturation
    try:
        hls_slice_colors = [
            (
                hue,
                lightness_list[index] / full_lightness,
                saturation_list[index] / full_saturation,
            )
            for index in range(n_slices)
        ]
        return hls_slice_colors
    except IndexError as exc:
        logger.error((slice_parameters, lightness_list, saturation_list))
        raise exc

# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications  # noqa: E501

    The version of the OpenAPI document: 0.7.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc_client.configuration import Configuration


class PricingUnitGet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pricing_unit_id': 'int',
        'unit_name': 'str',
        'unit_extra_info': 'object',
        'current_cost_per_unit': 'float',
        'default': 'bool'
    }

    attribute_map = {
        'pricing_unit_id': 'pricingUnitId',
        'unit_name': 'unitName',
        'unit_extra_info': 'unitExtraInfo',
        'current_cost_per_unit': 'currentCostPerUnit',
        'default': 'default'
    }

    def __init__(self, pricing_unit_id=None, unit_name=None, unit_extra_info=None, current_cost_per_unit=None, default=None, local_vars_configuration=None):  # noqa: E501
        """PricingUnitGet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pricing_unit_id = None
        self._unit_name = None
        self._unit_extra_info = None
        self._current_cost_per_unit = None
        self._default = None
        self.discriminator = None

        self.pricing_unit_id = pricing_unit_id
        self.unit_name = unit_name
        self.unit_extra_info = unit_extra_info
        self.current_cost_per_unit = current_cost_per_unit
        self.default = default

    @property
    def pricing_unit_id(self):
        """Gets the pricing_unit_id of this PricingUnitGet.  # noqa: E501


        :return: The pricing_unit_id of this PricingUnitGet.  # noqa: E501
        :rtype: int
        """
        return self._pricing_unit_id

    @pricing_unit_id.setter
    def pricing_unit_id(self, pricing_unit_id):
        """Sets the pricing_unit_id of this PricingUnitGet.


        :param pricing_unit_id: The pricing_unit_id of this PricingUnitGet.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and pricing_unit_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pricing_unit_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                pricing_unit_id is not None and pricing_unit_id <= 0):  # noqa: E501
            raise ValueError("Invalid value for `pricing_unit_id`, must be a value greater than `0`")  # noqa: E501

        self._pricing_unit_id = pricing_unit_id

    @property
    def unit_name(self):
        """Gets the unit_name of this PricingUnitGet.  # noqa: E501


        :return: The unit_name of this PricingUnitGet.  # noqa: E501
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this PricingUnitGet.


        :param unit_name: The unit_name of this PricingUnitGet.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and unit_name is None:  # noqa: E501
            raise ValueError("Invalid value for `unit_name`, must not be `None`")  # noqa: E501

        self._unit_name = unit_name

    @property
    def unit_extra_info(self):
        """Gets the unit_extra_info of this PricingUnitGet.  # noqa: E501


        :return: The unit_extra_info of this PricingUnitGet.  # noqa: E501
        :rtype: object
        """
        return self._unit_extra_info

    @unit_extra_info.setter
    def unit_extra_info(self, unit_extra_info):
        """Sets the unit_extra_info of this PricingUnitGet.


        :param unit_extra_info: The unit_extra_info of this PricingUnitGet.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and unit_extra_info is None:  # noqa: E501
            raise ValueError("Invalid value for `unit_extra_info`, must not be `None`")  # noqa: E501

        self._unit_extra_info = unit_extra_info

    @property
    def current_cost_per_unit(self):
        """Gets the current_cost_per_unit of this PricingUnitGet.  # noqa: E501


        :return: The current_cost_per_unit of this PricingUnitGet.  # noqa: E501
        :rtype: float
        """
        return self._current_cost_per_unit

    @current_cost_per_unit.setter
    def current_cost_per_unit(self, current_cost_per_unit):
        """Sets the current_cost_per_unit of this PricingUnitGet.


        :param current_cost_per_unit: The current_cost_per_unit of this PricingUnitGet.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and current_cost_per_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `current_cost_per_unit`, must not be `None`")  # noqa: E501

        self._current_cost_per_unit = current_cost_per_unit

    @property
    def default(self):
        """Gets the default of this PricingUnitGet.  # noqa: E501


        :return: The default of this PricingUnitGet.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this PricingUnitGet.


        :param default: The default of this PricingUnitGet.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and default is None:  # noqa: E501
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingUnitGet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PricingUnitGet):
            return True

        return self.to_dict() != other.to_dict()

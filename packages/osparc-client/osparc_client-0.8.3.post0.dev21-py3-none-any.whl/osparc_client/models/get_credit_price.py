# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications  # noqa: E501

    The version of the OpenAPI document: 0.7.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc_client.configuration import Configuration


class GetCreditPrice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'product_name': 'str',
        'usd_per_credit': 'float',
        'min_payment_amount_usd': 'int'
    }

    attribute_map = {
        'product_name': 'productName',
        'usd_per_credit': 'usdPerCredit',
        'min_payment_amount_usd': 'minPaymentAmountUsd'
    }

    def __init__(self, product_name=None, usd_per_credit=None, min_payment_amount_usd=None, local_vars_configuration=None):  # noqa: E501
        """GetCreditPrice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._product_name = None
        self._usd_per_credit = None
        self._min_payment_amount_usd = None
        self.discriminator = None

        self.product_name = product_name
        self.usd_per_credit = usd_per_credit
        self.min_payment_amount_usd = min_payment_amount_usd

    @property
    def product_name(self):
        """Gets the product_name of this GetCreditPrice.  # noqa: E501


        :return: The product_name of this GetCreditPrice.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GetCreditPrice.


        :param product_name: The product_name of this GetCreditPrice.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and product_name is None:  # noqa: E501
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def usd_per_credit(self):
        """Gets the usd_per_credit of this GetCreditPrice.  # noqa: E501

        Price of a credit in USD. If None, then this product's price is UNDEFINED  # noqa: E501

        :return: The usd_per_credit of this GetCreditPrice.  # noqa: E501
        :rtype: float
        """
        return self._usd_per_credit

    @usd_per_credit.setter
    def usd_per_credit(self, usd_per_credit):
        """Sets the usd_per_credit of this GetCreditPrice.

        Price of a credit in USD. If None, then this product's price is UNDEFINED  # noqa: E501

        :param usd_per_credit: The usd_per_credit of this GetCreditPrice.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and usd_per_credit is None:  # noqa: E501
            raise ValueError("Invalid value for `usd_per_credit`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                usd_per_credit is not None and usd_per_credit < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `usd_per_credit`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._usd_per_credit = usd_per_credit

    @property
    def min_payment_amount_usd(self):
        """Gets the min_payment_amount_usd of this GetCreditPrice.  # noqa: E501

        Minimum amount (included) in USD that can be paid for this productCan be None if this product's price is UNDEFINED  # noqa: E501

        :return: The min_payment_amount_usd of this GetCreditPrice.  # noqa: E501
        :rtype: int
        """
        return self._min_payment_amount_usd

    @min_payment_amount_usd.setter
    def min_payment_amount_usd(self, min_payment_amount_usd):
        """Sets the min_payment_amount_usd of this GetCreditPrice.

        Minimum amount (included) in USD that can be paid for this productCan be None if this product's price is UNDEFINED  # noqa: E501

        :param min_payment_amount_usd: The min_payment_amount_usd of this GetCreditPrice.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and min_payment_amount_usd is None:  # noqa: E501
            raise ValueError("Invalid value for `min_payment_amount_usd`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                min_payment_amount_usd is not None and min_payment_amount_usd < 0):  # noqa: E501
            raise ValueError("Invalid value for `min_payment_amount_usd`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_payment_amount_usd = min_payment_amount_usd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCreditPrice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCreditPrice):
            return True

        return self.to_dict() != other.to_dict()

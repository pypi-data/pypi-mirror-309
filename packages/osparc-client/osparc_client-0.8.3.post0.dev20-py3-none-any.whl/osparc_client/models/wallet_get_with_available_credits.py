# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications  # noqa: E501

    The version of the OpenAPI document: 0.7.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc_client.configuration import Configuration


class WalletGetWithAvailableCredits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'wallet_id': 'int',
        'name': 'str',
        'description': 'str',
        'owner': 'int',
        'thumbnail': 'str',
        'status': 'WalletStatus',
        'created': 'datetime',
        'modified': 'datetime',
        'available_credits': 'float'
    }

    attribute_map = {
        'wallet_id': 'walletId',
        'name': 'name',
        'description': 'description',
        'owner': 'owner',
        'thumbnail': 'thumbnail',
        'status': 'status',
        'created': 'created',
        'modified': 'modified',
        'available_credits': 'availableCredits'
    }

    def __init__(self, wallet_id=None, name=None, description=None, owner=None, thumbnail=None, status=None, created=None, modified=None, available_credits=None, local_vars_configuration=None):  # noqa: E501
        """WalletGetWithAvailableCredits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._wallet_id = None
        self._name = None
        self._description = None
        self._owner = None
        self._thumbnail = None
        self._status = None
        self._created = None
        self._modified = None
        self._available_credits = None
        self.discriminator = None

        self.wallet_id = wallet_id
        self.name = name
        if description is not None:
            self.description = description
        self.owner = owner
        if thumbnail is not None:
            self.thumbnail = thumbnail
        self.status = status
        self.created = created
        self.modified = modified
        self.available_credits = available_credits

    @property
    def wallet_id(self):
        """Gets the wallet_id of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The wallet_id of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: int
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this WalletGetWithAvailableCredits.


        :param wallet_id: The wallet_id of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and wallet_id is None:  # noqa: E501
            raise ValueError("Invalid value for `wallet_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                wallet_id is not None and wallet_id <= 0):  # noqa: E501
            raise ValueError("Invalid value for `wallet_id`, must be a value greater than `0`")  # noqa: E501

        self._wallet_id = wallet_id

    @property
    def name(self):
        """Gets the name of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The name of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WalletGetWithAvailableCredits.


        :param name: The name of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The description of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WalletGetWithAvailableCredits.


        :param description: The description of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def owner(self):
        """Gets the owner of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The owner of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this WalletGetWithAvailableCredits.


        :param owner: The owner of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                owner is not None and owner <= 0):  # noqa: E501
            raise ValueError("Invalid value for `owner`, must be a value greater than `0`")  # noqa: E501

        self._owner = owner

    @property
    def thumbnail(self):
        """Gets the thumbnail of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The thumbnail of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this WalletGetWithAvailableCredits.


        :param thumbnail: The thumbnail of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def status(self):
        """Gets the status of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The status of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: WalletStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WalletGetWithAvailableCredits.


        :param status: The status of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: WalletStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created(self):
        """Gets the created of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The created of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WalletGetWithAvailableCredits.


        :param created: The created of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The modified of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this WalletGetWithAvailableCredits.


        :param modified: The modified of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and modified is None:  # noqa: E501
            raise ValueError("Invalid value for `modified`, must not be `None`")  # noqa: E501

        self._modified = modified

    @property
    def available_credits(self):
        """Gets the available_credits of this WalletGetWithAvailableCredits.  # noqa: E501


        :return: The available_credits of this WalletGetWithAvailableCredits.  # noqa: E501
        :rtype: float
        """
        return self._available_credits

    @available_credits.setter
    def available_credits(self, available_credits):
        """Sets the available_credits of this WalletGetWithAvailableCredits.


        :param available_credits: The available_credits of this WalletGetWithAvailableCredits.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and available_credits is None:  # noqa: E501
            raise ValueError("Invalid value for `available_credits`, must not be `None`")  # noqa: E501

        self._available_credits = available_credits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletGetWithAvailableCredits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WalletGetWithAvailableCredits):
            return True

        return self.to_dict() != other.to_dict()

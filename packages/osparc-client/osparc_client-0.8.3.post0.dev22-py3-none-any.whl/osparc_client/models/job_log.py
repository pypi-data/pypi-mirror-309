# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications  # noqa: E501

    The version of the OpenAPI document: 0.7.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc_client.configuration import Configuration


class JobLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_id': 'str',
        'node_id': 'str',
        'log_level': 'int',
        'messages': 'list[str]'
    }

    attribute_map = {
        'job_id': 'job_id',
        'node_id': 'node_id',
        'log_level': 'log_level',
        'messages': 'messages'
    }

    def __init__(self, job_id=None, node_id=None, log_level=None, messages=None, local_vars_configuration=None):  # noqa: E501
        """JobLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_id = None
        self._node_id = None
        self._log_level = None
        self._messages = None
        self.discriminator = None

        self.job_id = job_id
        if node_id is not None:
            self.node_id = node_id
        self.log_level = log_level
        self.messages = messages

    @property
    def job_id(self):
        """Gets the job_id of this JobLog.  # noqa: E501


        :return: The job_id of this JobLog.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobLog.


        :param job_id: The job_id of this JobLog.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def node_id(self):
        """Gets the node_id of this JobLog.  # noqa: E501


        :return: The node_id of this JobLog.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this JobLog.


        :param node_id: The node_id of this JobLog.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def log_level(self):
        """Gets the log_level of this JobLog.  # noqa: E501


        :return: The log_level of this JobLog.  # noqa: E501
        :rtype: int
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this JobLog.


        :param log_level: The log_level of this JobLog.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and log_level is None:  # noqa: E501
            raise ValueError("Invalid value for `log_level`, must not be `None`")  # noqa: E501

        self._log_level = log_level

    @property
    def messages(self):
        """Gets the messages of this JobLog.  # noqa: E501


        :return: The messages of this JobLog.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this JobLog.


        :param messages: The messages of this JobLog.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and messages is None:  # noqa: E501
            raise ValueError("Invalid value for `messages`, must not be `None`")  # noqa: E501

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobLog):
            return True

        return self.to_dict() != other.to_dict()

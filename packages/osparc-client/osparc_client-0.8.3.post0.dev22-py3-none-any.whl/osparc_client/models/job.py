# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications  # noqa: E501

    The version of the OpenAPI document: 0.7.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc_client.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'inputs_checksum': 'str',
        'created_at': 'datetime',
        'runner_name': 'str',
        'url': 'str',
        'runner_url': 'str',
        'outputs_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'inputs_checksum': 'inputs_checksum',
        'created_at': 'created_at',
        'runner_name': 'runner_name',
        'url': 'url',
        'runner_url': 'runner_url',
        'outputs_url': 'outputs_url'
    }

    def __init__(self, id=None, name=None, inputs_checksum=None, created_at=None, runner_name=None, url=None, runner_url=None, outputs_url=None, local_vars_configuration=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._inputs_checksum = None
        self._created_at = None
        self._runner_name = None
        self._url = None
        self._runner_url = None
        self._outputs_url = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.inputs_checksum = inputs_checksum
        self.created_at = created_at
        self.runner_name = runner_name
        self.url = url
        self.runner_url = runner_url
        self.outputs_url = outputs_url

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501


        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.


        :param name: The name of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^([^\s\/]+\/?){1,10}$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^([^\s\/]+\/?){1,10}$/`")  # noqa: E501

        self._name = name

    @property
    def inputs_checksum(self):
        """Gets the inputs_checksum of this Job.  # noqa: E501

        Input's checksum  # noqa: E501

        :return: The inputs_checksum of this Job.  # noqa: E501
        :rtype: str
        """
        return self._inputs_checksum

    @inputs_checksum.setter
    def inputs_checksum(self, inputs_checksum):
        """Sets the inputs_checksum of this Job.

        Input's checksum  # noqa: E501

        :param inputs_checksum: The inputs_checksum of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and inputs_checksum is None:  # noqa: E501
            raise ValueError("Invalid value for `inputs_checksum`, must not be `None`")  # noqa: E501

        self._inputs_checksum = inputs_checksum

    @property
    def created_at(self):
        """Gets the created_at of this Job.  # noqa: E501

        Job creation timestamp  # noqa: E501

        :return: The created_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Job.

        Job creation timestamp  # noqa: E501

        :param created_at: The created_at of this Job.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def runner_name(self):
        """Gets the runner_name of this Job.  # noqa: E501

        Runner that executes job  # noqa: E501

        :return: The runner_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._runner_name

    @runner_name.setter
    def runner_name(self, runner_name):
        """Sets the runner_name of this Job.

        Runner that executes job  # noqa: E501

        :param runner_name: The runner_name of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and runner_name is None:  # noqa: E501
            raise ValueError("Invalid value for `runner_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                runner_name is not None and not re.search(r'^([^\s\/]+\/?){1,10}$', runner_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `runner_name`, must be a follow pattern or equal to `/^([^\s\/]+\/?){1,10}$/`")  # noqa: E501

        self._runner_name = runner_name

    @property
    def url(self):
        """Gets the url of this Job.  # noqa: E501

        Link to get this resource (self)  # noqa: E501

        :return: The url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Job.

        Link to get this resource (self)  # noqa: E501

        :param url: The url of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 2083):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) < 1):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    @property
    def runner_url(self):
        """Gets the runner_url of this Job.  # noqa: E501

        Link to the solver's job (parent collection)  # noqa: E501

        :return: The runner_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._runner_url

    @runner_url.setter
    def runner_url(self, runner_url):
        """Sets the runner_url of this Job.

        Link to the solver's job (parent collection)  # noqa: E501

        :param runner_url: The runner_url of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and runner_url is None:  # noqa: E501
            raise ValueError("Invalid value for `runner_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                runner_url is not None and len(runner_url) > 2083):
            raise ValueError("Invalid value for `runner_url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                runner_url is not None and len(runner_url) < 1):
            raise ValueError("Invalid value for `runner_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._runner_url = runner_url

    @property
    def outputs_url(self):
        """Gets the outputs_url of this Job.  # noqa: E501

        Link to the job outputs (sub-collection)  # noqa: E501

        :return: The outputs_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._outputs_url

    @outputs_url.setter
    def outputs_url(self, outputs_url):
        """Sets the outputs_url of this Job.

        Link to the job outputs (sub-collection)  # noqa: E501

        :param outputs_url: The outputs_url of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and outputs_url is None:  # noqa: E501
            raise ValueError("Invalid value for `outputs_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                outputs_url is not None and len(outputs_url) > 2083):
            raise ValueError("Invalid value for `outputs_url`, length must be less than or equal to `2083`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                outputs_url is not None and len(outputs_url) < 1):
            raise ValueError("Invalid value for `outputs_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._outputs_url = outputs_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications  # noqa: E501

    The version of the OpenAPI document: 0.7.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc_client.configuration import Configuration


class ClientFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filename': 'str',
        'filesize': 'int',
        'sha256_checksum': 'str'
    }

    attribute_map = {
        'filename': 'filename',
        'filesize': 'filesize',
        'sha256_checksum': 'sha256_checksum'
    }

    def __init__(self, filename=None, filesize=None, sha256_checksum=None, local_vars_configuration=None):  # noqa: E501
        """ClientFile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filename = None
        self._filesize = None
        self._sha256_checksum = None
        self.discriminator = None

        self.filename = filename
        self.filesize = filesize
        self.sha256_checksum = sha256_checksum

    @property
    def filename(self):
        """Gets the filename of this ClientFile.  # noqa: E501

        File name  # noqa: E501

        :return: The filename of this ClientFile.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ClientFile.

        File name  # noqa: E501

        :param filename: The filename of this ClientFile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filename is None:  # noqa: E501
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def filesize(self):
        """Gets the filesize of this ClientFile.  # noqa: E501

        File size in bytes  # noqa: E501

        :return: The filesize of this ClientFile.  # noqa: E501
        :rtype: int
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this ClientFile.

        File size in bytes  # noqa: E501

        :param filesize: The filesize of this ClientFile.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and filesize is None:  # noqa: E501
            raise ValueError("Invalid value for `filesize`, must not be `None`")  # noqa: E501

        self._filesize = filesize

    @property
    def sha256_checksum(self):
        """Gets the sha256_checksum of this ClientFile.  # noqa: E501

        SHA256 checksum  # noqa: E501

        :return: The sha256_checksum of this ClientFile.  # noqa: E501
        :rtype: str
        """
        return self._sha256_checksum

    @sha256_checksum.setter
    def sha256_checksum(self, sha256_checksum):
        """Sets the sha256_checksum of this ClientFile.

        SHA256 checksum  # noqa: E501

        :param sha256_checksum: The sha256_checksum of this ClientFile.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sha256_checksum is None:  # noqa: E501
            raise ValueError("Invalid value for `sha256_checksum`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sha256_checksum is not None and not re.search(r'^[a-fA-F0-9]{64}$', sha256_checksum)):  # noqa: E501
            raise ValueError(r"Invalid value for `sha256_checksum`, must be a follow pattern or equal to `/^[a-fA-F0-9]{64}$/`")  # noqa: E501

        self._sha256_checksum = sha256_checksum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientFile):
            return True

        return self.to_dict() != other.to_dict()

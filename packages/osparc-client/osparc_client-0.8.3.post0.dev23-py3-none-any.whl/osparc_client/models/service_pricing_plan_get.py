# coding: utf-8

"""
    osparc.io public API

    osparc-simcore public API specifications  # noqa: E501

    The version of the OpenAPI document: 0.7.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from osparc_client.configuration import Configuration


class ServicePricingPlanGet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pricing_plan_id': 'int',
        'display_name': 'str',
        'description': 'str',
        'classification': 'PricingPlanClassification',
        'created_at': 'datetime',
        'pricing_plan_key': 'str',
        'pricing_units': 'list[PricingUnitGet]'
    }

    attribute_map = {
        'pricing_plan_id': 'pricingPlanId',
        'display_name': 'displayName',
        'description': 'description',
        'classification': 'classification',
        'created_at': 'createdAt',
        'pricing_plan_key': 'pricingPlanKey',
        'pricing_units': 'pricingUnits'
    }

    def __init__(self, pricing_plan_id=None, display_name=None, description=None, classification=None, created_at=None, pricing_plan_key=None, pricing_units=None, local_vars_configuration=None):  # noqa: E501
        """ServicePricingPlanGet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pricing_plan_id = None
        self._display_name = None
        self._description = None
        self._classification = None
        self._created_at = None
        self._pricing_plan_key = None
        self._pricing_units = None
        self.discriminator = None

        self.pricing_plan_id = pricing_plan_id
        self.display_name = display_name
        self.description = description
        self.classification = classification
        self.created_at = created_at
        self.pricing_plan_key = pricing_plan_key
        self.pricing_units = pricing_units

    @property
    def pricing_plan_id(self):
        """Gets the pricing_plan_id of this ServicePricingPlanGet.  # noqa: E501


        :return: The pricing_plan_id of this ServicePricingPlanGet.  # noqa: E501
        :rtype: int
        """
        return self._pricing_plan_id

    @pricing_plan_id.setter
    def pricing_plan_id(self, pricing_plan_id):
        """Sets the pricing_plan_id of this ServicePricingPlanGet.


        :param pricing_plan_id: The pricing_plan_id of this ServicePricingPlanGet.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and pricing_plan_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pricing_plan_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                pricing_plan_id is not None and pricing_plan_id <= 0):  # noqa: E501
            raise ValueError("Invalid value for `pricing_plan_id`, must be a value greater than `0`")  # noqa: E501

        self._pricing_plan_id = pricing_plan_id

    @property
    def display_name(self):
        """Gets the display_name of this ServicePricingPlanGet.  # noqa: E501


        :return: The display_name of this ServicePricingPlanGet.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ServicePricingPlanGet.


        :param display_name: The display_name of this ServicePricingPlanGet.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this ServicePricingPlanGet.  # noqa: E501


        :return: The description of this ServicePricingPlanGet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServicePricingPlanGet.


        :param description: The description of this ServicePricingPlanGet.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def classification(self):
        """Gets the classification of this ServicePricingPlanGet.  # noqa: E501


        :return: The classification of this ServicePricingPlanGet.  # noqa: E501
        :rtype: PricingPlanClassification
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this ServicePricingPlanGet.


        :param classification: The classification of this ServicePricingPlanGet.  # noqa: E501
        :type: PricingPlanClassification
        """
        if self.local_vars_configuration.client_side_validation and classification is None:  # noqa: E501
            raise ValueError("Invalid value for `classification`, must not be `None`")  # noqa: E501

        self._classification = classification

    @property
    def created_at(self):
        """Gets the created_at of this ServicePricingPlanGet.  # noqa: E501


        :return: The created_at of this ServicePricingPlanGet.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServicePricingPlanGet.


        :param created_at: The created_at of this ServicePricingPlanGet.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def pricing_plan_key(self):
        """Gets the pricing_plan_key of this ServicePricingPlanGet.  # noqa: E501


        :return: The pricing_plan_key of this ServicePricingPlanGet.  # noqa: E501
        :rtype: str
        """
        return self._pricing_plan_key

    @pricing_plan_key.setter
    def pricing_plan_key(self, pricing_plan_key):
        """Sets the pricing_plan_key of this ServicePricingPlanGet.


        :param pricing_plan_key: The pricing_plan_key of this ServicePricingPlanGet.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and pricing_plan_key is None:  # noqa: E501
            raise ValueError("Invalid value for `pricing_plan_key`, must not be `None`")  # noqa: E501

        self._pricing_plan_key = pricing_plan_key

    @property
    def pricing_units(self):
        """Gets the pricing_units of this ServicePricingPlanGet.  # noqa: E501


        :return: The pricing_units of this ServicePricingPlanGet.  # noqa: E501
        :rtype: list[PricingUnitGet]
        """
        return self._pricing_units

    @pricing_units.setter
    def pricing_units(self, pricing_units):
        """Sets the pricing_units of this ServicePricingPlanGet.


        :param pricing_units: The pricing_units of this ServicePricingPlanGet.  # noqa: E501
        :type: list[PricingUnitGet]
        """
        if self.local_vars_configuration.client_side_validation and pricing_units is None:  # noqa: E501
            raise ValueError("Invalid value for `pricing_units`, must not be `None`")  # noqa: E501

        self._pricing_units = pricing_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePricingPlanGet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServicePricingPlanGet):
            return True

        return self.to_dict() != other.to_dict()

{"version":3,"file":"lib_index_js.92bf0c77d726eaa1df79.js","mappings":";;;;;;;;;;;;;;AAIwD;AAExD,MAAM,SAAS,GAAG,0BAA0B,CAAC;AAE7C,MAAM,aAAa,GAAyC;IAC1D,EAAE,EAAE,SAAS;IACb,WAAW,EACT,0EAA0E;IAC5E,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,kDAAc;IACxB,QAAQ,EAAE,KAAK,EAAE,GAAoB,EAAE,EAAE;QACvC,OAAO,CAAC,GAAG,CACT,GAAG,SAAS,sBAAsB,CACnC,CAAC;QACF,MAAM,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC;QAC/B,MAAM,aAAa,GAAG,IAAI,iDAAa,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACnE,OAAO,aAAa,CAAC;IACvB,CAAC;CACF,CAAC;AAEF,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;ACvBa;AAEnC,MAAM,cAAc,GAAG,IAAI,oDAAK,CAAiB,eAAe,CAAC,CAAC;AAclE,MAAM,aAAa;IACxB,YAAY,YAA4B;QAwChC,eAAU,GAA2C,EAAE,CAAC;QAvC9D,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAElC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAC/B,KAAK,EAAE,OAAuB,EAAE,KAAqB,EAAE,EAAE;YACvD,2CAA2C;YAC3C,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;gBACzC,OAAO;aACR;YACD,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACjD,KAAK,IAAI,QAAQ,IAAI,SAAS,EAAE;gBAC9B,MAAM,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aACjD;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,WAAW,CAAC,QAAgB,EAAE,QAAmB;QAC/C,IAAI,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;YAC/B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACxC,OAAO;SACR;QACD,sEAAsE;QACtE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,cAAc,CAAC,QAAgB,EAAE,QAAmB;QAClD,IAAI,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;YAC/B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC3C,OAAO;SACR;IACH,CAAC;CAIF","sources":["webpack://jupyterlab-eventlistener/./src/index.ts","webpack://jupyterlab-eventlistener/./src/token.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { IEventListener, EventListener } from './token';\n\nconst PLUGIN_ID = 'jupyterlab-eventlistener';\n\nconst eventlistener: JupyterFrontEndPlugin<EventListener> = {\n  id: PLUGIN_ID,\n  description:\n    \"An API for listening to events coming off of JupyterLab's event manager.\",\n  autoStart: true,\n  provides: IEventListener,\n  activate: async (app: JupyterFrontEnd) => {\n    console.log(\n      `${PLUGIN_ID} has been activated!`\n    );\n    await app.serviceManager.ready;\n    const eventListener = new EventListener(app.serviceManager.events);\n    return eventListener;\n  }\n};\n\nexport default eventlistener;\n","import { Event } from '@jupyterlab/services';\nimport { Token } from '@lumino/coreutils';\n\nexport const IEventListener = new Token<IEventListener>('eventListener');\n\nexport interface IListener {\n  (\n    eventManager: Event.IManager,\n    schemaId: string,\n    data: Event.Emission\n  ): Promise<void>;\n}\n\nexport interface IEventListener {\n  addListener(schemaId: string, listener: IListener): void;\n}\n\nexport class EventListener implements IEventListener {\n  constructor(eventManager: Event.IManager) {\n    this._eventManager = eventManager;\n\n    this._eventManager.stream.connect(\n      async (manager: Event.IManager, event: Event.Emission) => {\n        // Ignore an event if there is no listener.\n        if (!(event.schema_id in this._listeners)) {\n          return;\n        }\n        let listeners = this._listeners[event.schema_id];\n        for (let listener of listeners) {\n          await listener(manager, event.schema_id, event);\n        }\n      }\n    );\n  }\n\n  /**\n   * Add a listener to a named event.\n   *\n   * @param schemaId : the event schema ID to register callbacks.\n   * @param listener : callback function to register\n   * @returns\n   */\n  addListener(schemaId: string, listener: IListener): void {\n    if (schemaId in this._listeners) {\n      this._listeners[schemaId].add(listener);\n      return;\n    }\n    // If this schemaId doesn't have any previous listeners, add one here.\n    this._listeners[schemaId] = new Set([listener]);\n  }\n\n  removeListener(schemaId: string, listener: IListener): void {\n    if (schemaId in this._listeners) {\n      this._listeners[schemaId].delete(listener);\n      return;\n    }\n  }\n\n  private _listeners: { [schemaId: string]: Set<IListener> } = {};\n  private _eventManager: Event.IManager;\n}\n"],"names":[],"sourceRoot":""}
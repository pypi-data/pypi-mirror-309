"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class StaticChunkingStrategy(google.protobuf.message.Message):
    """Defines a chunking strategy where chunks are created with a fixed maximum chunk size and an overlap between consecutive chunks."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAX_CHUNK_SIZE_TOKENS_FIELD_NUMBER: builtins.int
    CHUNK_OVERLAP_TOKENS_FIELD_NUMBER: builtins.int
    max_chunk_size_tokens: builtins.int
    """The maximum number of tokens allowed in a single chunk.
    Constraints: must be within the range [100, 2048].
    Default value: 800
    """
    chunk_overlap_tokens: builtins.int
    """The number of tokens that should overlap between consecutive chunks.
    This allows for some context from the previous chunk to be included in the next chunk.
    Constraints: must be less than or equal to half of `max_chunk_size_tokens`.
    Default value: 400
    """
    def __init__(
        self,
        *,
        max_chunk_size_tokens: builtins.int = ...,
        chunk_overlap_tokens: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["chunk_overlap_tokens", b"chunk_overlap_tokens", "max_chunk_size_tokens", b"max_chunk_size_tokens"]) -> None: ...

global___StaticChunkingStrategy = StaticChunkingStrategy

@typing.final
class ChunkingStrategy(google.protobuf.message.Message):
    """Defines a general strategy for chunking text into smaller segments.
    Currently, only StaticChunkingStrategy is supported.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATIC_STRATEGY_FIELD_NUMBER: builtins.int
    @property
    def static_strategy(self) -> global___StaticChunkingStrategy: ...
    def __init__(
        self,
        *,
        static_strategy: global___StaticChunkingStrategy | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["Strategy", b"Strategy", "static_strategy", b"static_strategy"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["Strategy", b"Strategy", "static_strategy", b"static_strategy"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["Strategy", b"Strategy"]) -> typing.Literal["static_strategy"] | None: ...

global___ChunkingStrategy = ChunkingStrategy

# image2text/core.py

import os
import base64
from openai import OpenAI
import requests

def get_description(image_url, prompt="What's in this image?", model="gpt-4o", api_key=None):
    """
    Get a description of an image using OpenAI's GPT models.

    Parameters:
    - image_url (str): The URL of the image.
    - prompt (str): The prompt to use for the description.
    - model (str): The OpenAI model to use (default 'gpt-4').
    - api_key (str, optional): Your OpenAI API key.

    Returns:
    - str: The description generated by the model.
    """

    # Set the API key
    client = OpenAI(api_key=api_key)
    if not api_key:
        raise ValueError("OpenAI API key is not set. Provide it via the 'api_key' parameter or set the 'OPENAI_API_KEY' environment variable.")

    # Download the image
    response = requests.get(image_url)
    if response.status_code != 200:
        raise ValueError(f"Could not retrieve image from URL: {image_url}")

    # Encode the image in base64
    encoded_image = base64.b64encode(response.content).decode('utf-8')

    # Create the OpenAI API request
    # Note: As of 2023, OpenAI models don't accept images directly in the API.
    # This is a placeholder for when such functionality becomes available.
    # Currently, you might need to use OpenAI's Vision API or another service.

    # For demonstration purposes, let's pretend we can send the image data
    # This code will not work until OpenAI supports image data in this way
    try:
        # Encode the uploaded image in base64

        # Create the GPT-4o or GPT-4o-mini API request
        response = client.chat.completions.create(
            model=model,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/png;base64,{encoded_image}"}
                        },
                    ],
                }
            ],
            max_tokens=300,
        )
    except Exception as e:
        raise RuntimeError(f"OpenAI API request failed: {e}")

    # Extract and return the description
    description = response.choices[0].message.content
    return description

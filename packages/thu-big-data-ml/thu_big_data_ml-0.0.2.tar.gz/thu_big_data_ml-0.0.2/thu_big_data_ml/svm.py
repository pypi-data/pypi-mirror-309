# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/theory_assignments/A5/P_Assignment5_yecanming.ipynb.

# %% auto 0
__all__ = ['plot_binary_classification_2d', 'make_meshgrid', 'plot_contours', 'try_svm_and_plot_for_binary_2d']

# %% ../notebooks/theory_assignments/A5/P_Assignment5_yecanming.ipynb 9
# 创建图表，
# 需要有网格线，
# 需要有文本标注点的名字和坐标
# 坐标轴名称和正负例的图例要和李航书的一样
# 正负例的形状不同（黑白打印的审稿人），颜色不同
# plt.figure(figsize=(8, 6))
def plot_binary_classification_2d(X, y, labels = [1, -1], label_names=['正例', '负例'],
                                       label_colors=['blue','red'],
                                       label_markers=['o', 'x'], 
                                       x_names = ['x(1)', 'x(2)'], 
                                       point_size=100,
                                       text_offset = (0.1, 0), 
                                       point_names = None, 
                                       title = '数据点可视化', 
                                       size = (9, 6), 
                                       ):
    fig, ax = plt.subplots()
    if point_names is None:
        point_names = [f'x{i+1}' for i in range(len(X))]

    # 绘制正例和负例，并标注点名和坐标
    label_has_drawn = set()
    for i, (x, label) in enumerate(zip(X, y)):
        
        label_idx = labels.index(label)
        if label_idx in label_has_drawn:
            label_name = ''
        else:
            label_has_drawn.add(label_idx)
            label_name = label_names[label_idx]
        
        ax.scatter(x[0], x[1], color=label_colors[label_idx], marker=label_markers[label_idx], 
                   label=label_name, 
                   s=point_size)
        ax.text(x[0] + text_offset[0], x[1] + text_offset[1], f' {point_names[i]} ({x[0]}, {x[1]})', fontsize=12, ha='left')

    # 添加网格线
    ax.grid(True)

    # 添加图例
    ax.legend()

    # 修改坐标轴名称
    ax.set_xlabel(x_names[0])
    ax.set_ylabel(x_names[1])
    ax.set_title(title)
    fig.set_size_inches(*size)
    
    ax.set_aspect('equal', adjustable='box')
    return fig, ax

# %% ../notebooks/theory_assignments/A5/P_Assignment5_yecanming.ipynb 30
def make_meshgrid(x, y, h=.02):
    x_min, x_max = x.min() - 1, x.max() + 1
    y_min, y_max = y.min() - 1, y.max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    return xx, yy

def plot_contours(ax, clf, xx, yy, **params):
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    out = ax.contourf(xx, yy, Z, **params)
    return out

def try_svm_and_plot_for_binary_2d(X, y, 
                                   C=1.0 # 软间隔的惩罚项, >0
                                   ,x_names = ['x(1)', 'x(2)']
                                   ):

    models = (svm.SVC(kernel='linear', C=C),
            svm.LinearSVC(C=C, # loss='hinge'
                          ),
            svm.SVC(kernel='rbf', gamma=0.7, C=C),
            svm.SVC(kernel='poly', degree=3, C=C))
    models = (clf.fit(X, y) for clf in models)

    # title for the plots
    titles = ('SVC with linear kernel',
            'LinearSVC (linear kernel)',
            'SVC with RBF kernel',
            'SVC with polynomial (degree 3) kernel')

    # Set-up 2x2 grid for plotting.
    fig, sub = plt.subplots(2, 2)
    plt.subplots_adjust(wspace=0.4, hspace=0.4)

    X0, X1 = X[:, 0], X[:, 1]
    xx, yy = make_meshgrid(X0, X1)

    for clf, title, ax in zip(models, titles, sub.flatten()):
        plot_contours(ax, clf, xx, yy,
                    cmap=plt.cm.coolwarm, alpha=0.8)
        ax.scatter(X0, X1, c=y, cmap=plt.cm.coolwarm, s=20, edgecolors='k')
        ax.set_xlim(xx.min(), xx.max())
        ax.set_ylim(yy.min(), yy.max())
        ax.set_xlabel(x_names[0])
        ax.set_ylabel(x_names[1])
        ax.set_xticks(())
        ax.set_yticks(())
        ax.set_title(title)
        ax.set_aspect('equal', adjustable='box') # 一定要加上
    return fig, sub


.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "RAMDISK" "8" "" "1.1.18" "Funtoo Linux"
.SH NAME
ramdisk \- create a bootable initial ramdisk
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
\fBramdisk\fP [build] [\fIOPTION...\fP] \fBinitramfs_outfile\fP
.sp
\fBramdisk\fP list kernels
.sp
\fBramdisk\fP list plugins
.UNINDENT
.UNINDENT
.SH DESCRIPTION
.sp
The Funtoo ramdisk tool, called \fBramdisk\fP is a stand\-alone tool to create an
initial RAM disk filesystem (initramfs) for booting your Linux system.
.sp
The internal initramfs logic is based on the logic found in Gentoo Linux\(aqs
genkernel tool, but has been rewritten to be simpler and more efficient.
.sp
You can use this tool to create an initramfs to boot to a Funtoo Linux root
ext4 or XFS filesystem, which is what we support in our official installation
documentation at  <https://www.funtoo.org/Install> \&.
.SH CAPABILITIES
.INDENT 0.0
.IP \(bu 2
genkernel\-style initramfs without the cruft. In comparison to genkernel\(aqs
initramfs, the shell code is about 10x simpler and a lot cleaner and has
been modernized. About 100 lines of shell script, with another 215 lines
of functions in a support file.
.IP \(bu 2
Copies over the modules you specify \-\- and automatically figures out any
kernel module dependencies, so any depended\-upon modules are also copied.
This eliminates the need to track these dependencies manually.
.IP \(bu 2
Rootless operation. You do not need enhanced privileges to create the
initramfs.
.IP \(bu 2
You can read the \fBlinuxrc\fP script and actually understand what it does.
It is written to be easy to understand and adapt. So it\(aqs not just short,
but easy to grasp.
.IP \(bu 2
Enhanced module loading engine on the initramfs which is significantly
faster than genkernel. This effectively eliminates the \(dqwatching the
stream of useless modules being loaded\(dq issue with genkernel. Modern
systems with NVMe drives will load just a handful of modules to boot
\-\- all without requiring any special action from the user.
.IP \(bu 2
\(dqkpop\(dq functionality allows for building ramdisks with just the modules
you need. For example, \fBramdisk \-\-kpop=nvme,ext4\fP will create a
ramdisk that can boot on NVMe ext4 root filesystems, and only include
these necessary modules, leaving all other modules to be loaded by
your Funtoo Linux system.
.IP \(bu 2
Effective Python\-based command to actually build the ramdisk, which is
called: \fBramdisk\fP\&. This gives us an extensible platform for the future.
.IP \(bu 2
Enhanced ini\-style system for selecting modules to include on your initramfs.
.IP \(bu 2
Enhanced ini\-style system for selecting module groups to autoload on the
initramfs.
.IP \(bu 2
Support for xz and zstd compression.
.UNINDENT
.SH ACTIONS
.sp
The default action is \fBbuild\fP, and can be optionally specified, which will
instruct \fBramdisk\fP to build an initramfs. Available actions:
.SS build
.sp
Create an initramfs. See \fBOPTIONS\fP below for all options supported. The \fBbuild\fP
action requires a destination initramfs path. This will be the literal path and
filename for the output initramfs. Use \fB\-\-force\fP to overwrite any existing file.
.SS list
.sp
List various things \-\- currently supported targets are \fBkernels\fP and \fBplugins\fP\&.
\fBkernels\fP will show you a list of available installed kernels on your system for
which you can build a ramdisk, and \fBplugins\fP will show the available boot\-time
plugins that can be enabled to add more functionality to your ramdisk.
.SH OPTIONS
.INDENT 0.0
.TP
.B  \-\-debug
Enable debug output.
.TP
.B  \-\-backtrace
Display full python backtrace/traceback instead of just a
short error summary.
.TP
.B  \-\-force
Overwrite target initramfs if it exists. The command will refuse to do
so by default.
.TP
.B  \-\-keep
Keep the temporary directory after execution for investigation/debugging.
.TP
.B  \-\-version
Show this program\(aqs version number and exit.
.TP
.B  \-\-help
Show this help message and exit.
.TP
.BI \-\-fs_foot\fB= <path>
This defaults to \fB/\fP, and specifies the filesystem root to look at
for finding both kernel sources (in \fB/usr/src\fP) and kernel modules
(in \fB/lib/modules\fP). This option also applies to \fBramdisk list
kernels\fP\&.
.TP
.BI \-\-kernel\fB= <kernel>
Specify what kernel to build a ramdisk for. Use
\fBramdisk list kernels\fP to display available options. The
default setting is to use the current value of the
\fB/usr/src/linux\fP symlink at the filesystem root to determine
which kernel to build a ramdisk for.
.TP
.BI \-\-compression\fB= <method>
Compression method to use. Default is \fBxz\fP\&. Also supported: \fBzstd\fP\&.
.TP
.BI \-\-temp_root\fB= <path>
Where to create temporary files. Defaults to \fB/var/tmp\fP\&.
.TP
.BI \-\-plugins\fB= <plugins>
A comma\-delimited list of plugins to enable. The \fBcore\fP plugin is
always enabled. Type \fBramdisk list plugins\fP to see a list of available
plugins.
.TP
.BI \-\-kmod_config\fB= <cfg>
\fBramdisk\fP supports different sets of kernel module configurations, which
define what kernel modules get copied to the initramfs, and which ones
get auto\-loaded by the initramfs at boot. Default value: \fBfull\fP\&. This
is currently the only option unless overridden by \fB\-\-kpop\fP (see below.)
.TP
.BI \-\-kpop\fB= <mods>
A comma\-delimited list of kernel module names that you are sure, if loaded,
will allow your root block device and filesystem to be mounted. For example,
\fB\-\-kpop=nvme,ext4\fP will include just the modules required for booting
NVMe disks and mounting your root ext4 filesystem. When this option is used,
a special minimal kernel module config is used instead of what is specified
via \fB\-\-kmod_config\fP (see above).
.UNINDENT
.SH USAGE
.sp
In its simplest form, the command can be used as follows, as a regular user:
.INDENT 0.0
.INDENT 3.5
.sp
.EX
$ ramdisk /var/tmp/my\-new\-initramfs
$ sudo cp /var/tmp/my\-new\-initramfs /boot
.EE
.UNINDENT
.UNINDENT
.sp
By default, \fBramdisk\fP will use your \fB/usr/src/linux\fP symlink to determine which
kernel to use to build a ramdisk for. It will parse \fB/usr/src/linux/Makefile\fP,
extract kernel version information, and then find the appropriate directory in
\fB/lib/modules/<kernel_name>\fP for copying modules. You can type:
\fBramdisk list kernels\fP and \fBramdisk \-\-kernel <kernel_name>\fP to build a ramdisk
for a non\-default kernel.
.sp
Since this is brand\-new software, it is highly recommended that you \fBDO NOT OVERWRITE
YOUR EXISTING, WORKING INITRAMFS THAT YOU CURRENTLY USE TO BOOT YOUR SYSTEM.\fP
.sp
Instead \-\- create a \fBNEW BOOT ENTRY\fP to test your initramfs. In GRUB, you can also
press \(aqe\(aq to edit an entry and type in the name of the new initramfs to give it a try.
.SH PLUGINS
.sp
\fBramdisk\fP ships with a collection of different plugins that add various boot features
to a Funtoo Linux system. Included plugins:
.INDENT 0.0
.TP
.B \fBbtrfs\fP
Adds support for booting off a root volume formatted with btrfs.
.TP
.B \fBcore\fP
Adds core components required by every \fBramdisk\fP generated initramfs.
.TP
.B \fBluks\fP
Adds support for booting off a LUKS encrypted root volume.
.TP
.B \fBlvm\fP
Adds support for booting off a LVM root volume.
.UNINDENT
.SH INITRAMFS BOOT OPTIONS
.sp
The following options are recognized by the initramfs and should be separated by whitespace on the
kernel boot line. In Funtoo Linux, you would add them to \fB/etc/boot.conf\fP \-\- see boot.conf(5).
.INDENT 0.0
.TP
.B \fBreal_root=\fP
This is used to specify the root device that we want to mount and boot.
.TP
.B \fBroot=\fP
This is not used right now but will be used for live media booting.
.TP
.B \fBreal_init=\fP
Defaults to \fB/sbin/init\fP \-\- what to run as PID 1 when booting your system.
.TP
.B \fBinit_opts=\fP
Defaults to empty \-\- what command\-line options to pass to PID 1.
.TP
.B \fBcrypt_root=\fP
This is used to specify the root device that is LUKS encrypted by cryptsetup
and we want to boot.
.TP
.B \fBshell\fP
Start a debug shell immediately before booting your system. This will allow
you to inspect the state of the initramfs. Exiting the shell will resume the
normal boot process.
.TP
.B \fBdebug\fP
Enable debug mode. More verbose output and \fBdmesg\fP after boot will display
additional debug information for later review.
.TP
.B \fBquick\fP
On by default, this tells the initramfs to opportunistically see if the root
block device is available during modules scanning to avoid loading all modules.
.TP
.B \fBslow\fP
This disables the \(dqquick\(dq option and exhaustively loads all modules before
looking for a root block device.
.TP
.B \fBramdisk.activate=\fP
A comma\-delimited list of plugins to enable at boot\-time. For example, set this
to \(dqlvm\(dq to enable LVM boot. Or set this to \(dqluks,lvm\(dq to enable encrypted boot
and LVM volume group scanning.
.TP
.B \fBramdisk.scan_mode=\fP
Currently defaulting to \(dqlegacy\(dq which is the only option, and means \(dqdo the
classic \fBgenkernel\fP thing and manually load modules from our modules list.\(ga\(ga.
I hope to add dynamic loading of modules via (e)udev soon, which will become a
new option.
.TP
.B \fBmagic=\fP
This is a comma\-delimited \(dqmagic\(dq list of modules that you have determined are
needed to boot your system. When this option is specified, the initramfs will
load \fIonly\fP these modules and then try to find the root device. This can be
used to test out which modules you need to specify for the \fB\-\-kpop\fP option
by testing with a regular fully\-populated initramfs. Once you figure out the
modules you need, you can then reduce the size of the initramfs by using the
\fB\-\-kpop\fP options which will only oopy the those specified modules (and
their dependencies) to the initramfs.
.TP
.B \fBreal_rootflags=\fP
Specify mount flags to pass to the \fBmount\fP command for your root filesystem
mount. A \fBro\fP will always be at the beginning of this setting. Defaults to
blank.
.TP
.B \fBrootfstype=\fP
Specify the filesystem type for your root filesystem. This is currently a
required option and is set by \fBego boot\fP\&.
.UNINDENT
.SH AUTHOR
Daniel Robbins <drobbins@funtoo.org>
.SH COPYRIGHT
Copyright 2023-2024 Daniel Robbins, Funtoo Solutions, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
.\" Generated by docutils manpage writer.
.

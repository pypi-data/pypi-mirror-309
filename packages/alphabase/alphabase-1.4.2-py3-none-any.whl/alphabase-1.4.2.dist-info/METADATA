Metadata-Version: 2.1
Name: alphabase
Version: 1.4.2
Summary: An infrastructure Python package of the AlphaX ecosystem
Home-page: https://github.com/MannLabs/alphabase
Author: Mann Labs
Author-email: jalew188@gmail.com
License: Apache
Project-URL: Mann Labs at MPIB, https://www.biochem.mpg.de/mann
Project-URL: Mann Labs at CPR, https://www.cpr.ku.dk/research/proteomics/mann/
Project-URL: GitHub, https://github.com/MannLabs/alphabase
Project-URL: Docs, https://alphabase.readthedocs.io/en/latest/
Project-URL: PyPi, https://pypi.org/project/alphabase/
Keywords: bioinformatics,software,AlphaX ecosystem
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: LICENSE.txt
Requires-Dist: numba
Requires-Dist: numpy
Requires-Dist: pyyaml
Requires-Dist: pandas
Requires-Dist: h5py
Requires-Dist: contextlib2
Requires-Dist: xxhash
Requires-Dist: biopython
Requires-Dist: psutil
Requires-Dist: tqdm
Requires-Dist: scikit-learn
Requires-Dist: regex
Requires-Dist: dask
Requires-Dist: dask-expr
Requires-Dist: pyahocorasick
Requires-Dist: pyteomics
Requires-Dist: lxml
Requires-Dist: rdkit
Requires-Dist: pywin32; sys_platform == "win32"
Provides-Extra: development
Requires-Dist: jupyter; extra == "development"
Requires-Dist: twine; extra == "development"
Requires-Dist: bumpversion; extra == "development"
Requires-Dist: pipdeptree; extra == "development"
Requires-Dist: ipykernel; extra == "development"
Requires-Dist: pyteomics; extra == "development"
Requires-Dist: scikit-learn; extra == "development"
Requires-Dist: matplotlib; extra == "development"
Requires-Dist: autodocsumm; extra == "development"
Requires-Dist: myst-parser; extra == "development"
Requires-Dist: sphinx; extra == "development"
Requires-Dist: nbsphinx; extra == "development"
Requires-Dist: jinja2; extra == "development"
Requires-Dist: contextfilter; extra == "development"
Requires-Dist: furo; extra == "development"
Requires-Dist: tqdm; extra == "development"
Requires-Dist: psutil; extra == "development"
Requires-Dist: biopython; extra == "development"
Requires-Dist: numba; extra == "development"
Requires-Dist: numpy; extra == "development"
Requires-Dist: pyyaml; extra == "development"
Requires-Dist: pandas; extra == "development"
Requires-Dist: h5py; extra == "development"
Requires-Dist: contextlib2; extra == "development"
Requires-Dist: xxhash; extra == "development"
Requires-Dist: regex; extra == "development"
Requires-Dist: pydivsufsort; extra == "development"
Requires-Dist: pyahocorasick; extra == "development"
Requires-Dist: pytest; extra == "development"
Requires-Dist: pre-commit; extra == "development"
Requires-Dist: nbmake; extra == "development"
Provides-Extra: development-stable
Requires-Dist: jupyter; extra == "development-stable"
Requires-Dist: twine; extra == "development-stable"
Requires-Dist: bumpversion; extra == "development-stable"
Requires-Dist: pipdeptree; extra == "development-stable"
Requires-Dist: ipykernel; extra == "development-stable"
Requires-Dist: pyteomics; extra == "development-stable"
Requires-Dist: scikit-learn; extra == "development-stable"
Requires-Dist: matplotlib; extra == "development-stable"
Requires-Dist: autodocsumm; extra == "development-stable"
Requires-Dist: myst-parser; extra == "development-stable"
Requires-Dist: sphinx; extra == "development-stable"
Requires-Dist: nbsphinx; extra == "development-stable"
Requires-Dist: jinja2; extra == "development-stable"
Requires-Dist: contextfilter; extra == "development-stable"
Requires-Dist: furo; extra == "development-stable"
Requires-Dist: tqdm; extra == "development-stable"
Requires-Dist: psutil; extra == "development-stable"
Requires-Dist: biopython; extra == "development-stable"
Requires-Dist: numba; extra == "development-stable"
Requires-Dist: numpy; extra == "development-stable"
Requires-Dist: pyyaml; extra == "development-stable"
Requires-Dist: pandas; extra == "development-stable"
Requires-Dist: h5py; extra == "development-stable"
Requires-Dist: contextlib2; extra == "development-stable"
Requires-Dist: xxhash; extra == "development-stable"
Requires-Dist: regex; extra == "development-stable"
Requires-Dist: pydivsufsort; extra == "development-stable"
Requires-Dist: pyahocorasick; extra == "development-stable"
Requires-Dist: pytest; extra == "development-stable"
Requires-Dist: pre-commit==3.7.0; extra == "development-stable"
Requires-Dist: nbmake==1.5.3; extra == "development-stable"
Provides-Extra: stable
Requires-Dist: numba; extra == "stable"
Requires-Dist: numpy; extra == "stable"
Requires-Dist: pyyaml; extra == "stable"
Requires-Dist: pandas; extra == "stable"
Requires-Dist: h5py; extra == "stable"
Requires-Dist: contextlib2; extra == "stable"
Requires-Dist: xxhash; extra == "stable"
Requires-Dist: biopython; extra == "stable"
Requires-Dist: psutil; extra == "stable"
Requires-Dist: tqdm; extra == "stable"
Requires-Dist: scikit-learn; extra == "stable"
Requires-Dist: regex; extra == "stable"
Requires-Dist: dask; extra == "stable"
Requires-Dist: dask-expr; extra == "stable"
Requires-Dist: pyahocorasick; extra == "stable"
Requires-Dist: pyteomics; extra == "stable"
Requires-Dist: lxml; extra == "stable"
Requires-Dist: rdkit==2024.3.3; extra == "stable"

# AlphaBase

![Pip installation](https://github.com/MannLabs/alphabase/workflows/Default%20installation%20and%20tests/badge.svg)
![PyPi releases](https://github.com/MannLabs/alphabase/workflows/Publish%20on%20PyPi%20and%20release%20on%20GitHub/badge.svg)
[![Documentation Status](https://readthedocs.org/projects/alphabase/badge/?version=latest)](https://alphabase.readthedocs.io/en/latest/?badge=latest)
[![PyPI](https://img.shields.io/pypi/v/alphabase)](https://pypi.org/project/alphabase)
[![pip downloads](https://img.shields.io/pypi/dm/alphabase?color=blue&label=pip%20downloads)](https://pypi.org/project/alphabase)
![Python](https://img.shields.io/pypi/pyversions/alphabase)

AlphaBase provides all basic python functionalities for AlphaPept
ecosystem from the [Mann Labs at the Max Planck Institute of
Biochemistry](https://www.biochem.mpg.de/mann) and the [University of
Copenhagen](https://www.cpr.ku.dk/research/proteomics/mann/). To enable
all hyperlinks in this document, please view it at
[GitHub](https://github.com/MannLabs/alphabase). For documentation,
please see [readthedocs](https://alphabase.readthedocs.io/en/latest).

- [**About**](#about)
- [**License**](#license)
- [**Installation**](#installation)
  - [**Pip installer**](#pip)
  - [**Developer installer**](#developer)
- [**Usage**](#usage)
- [**Troubleshooting**](#troubleshooting)
- [**Citations**](#citations)
- [**How to contribute**](#how-to-contribute)
- [**Changelog**](#changelog)

------------------------------------------------------------------------

## About

The infrastructure package of AlphaX ecosystem for MS proteomics. It was first published with AlphaPeptDeep, see [Citations](#citations).

### Packages built upon AlphaBase

- [AlphaPeptDeep](https://github.com/MannLabs/alphapeptdeep): deep learning framework for proteomics.
- [AlphaRaw](https://github.com/MannLabs/alpharaw): raw data reader for different vendors.
- [AlphaDIA](https://github.com/MannLabs/alphadia): DIA search engine.
- [PeptDeep-HLA](https://github.com/MannLabs/peptdeep-hla): personalized HLA-binding peptide prediction.
- [AlphaViz](https://github.com/MannLabs/alphaviz): visualization for MS-based proteomics.
- [AlphaQuant](https://github.com/MannLabs/alphaquant): quantification for MS-based proteomics.

------------------------------------------------------------------------

## Citations

Wen-Feng Zeng, Xie-Xuan Zhou, Sander Willems, Constantin Ammar, Maria Wahle, Isabell Bludau, Eugenia Voytik, Maximillian T. Strauss & Matthias Mann. AlphaPeptDeep: a modular deep learning framework to predict peptide properties for proteomics. Nat Commun 13, 7238 (2022). https://doi.org/10.1038/s41467-022-34904-3

------------------------------------------------------------------------

## License

AlphaBase was developed by the [Mann Labs at the Max Planck Institute of Biochemistry](https://www.biochem.mpg.de/mann) and the [University of Copenhagen](https://www.cpr.ku.dk/research/proteomics/mann/) and is
freely available with an [Apache License](LICENSE.txt). External Python
packages (available in the [requirements](requirements) folder) have
their own licenses, which can be consulted on their respective websites.

------------------------------------------------------------------------

## Installation

AlphaBase can be installed and used on all major operating systems
(Windows, macOS and Linux). There are two different types of
installation possible:

- [**Pip installer:**](#pip) Choose this installation if you want to use
  AlphaBase as a Python package in an existing Python 3.8 environment
  (e.g.Â a Jupyter notebook).
- [**Developer installer:**](#developer) Choose this installation if you
  are familiar with [conda](https://docs.conda.io/en/latest/) and
  Python. This installation allows access to all available features of
  AlphaBase and even allows to modify its source code directly.
  Generally, the developer version of AlphaBase outperforms the
  precompiled versions which makes this the installation of choice for
  high-throughput experiments.

### Pip

AlphaBase can be installed in an existing Python 3.8 environment with a
single `bash` command. *This `bash` command can also be run directly
from within a Jupyter notebook by prepending it with a `!`*:

``` bash
pip install alphabase
```

Installing AlphaBase like this avoids conflicts when integrating it in
other tools, as this does not enforce strict versioning of dependancies.
However, if new versions of dependancies are released, they are not
guaranteed to be fully compatible with AlphaBase. While this should only
occur in rare cases where dependencies are not backwards compatible, you
can always force AlphaBase to use dependancy versions which are known to
be compatible with:

``` bash
pip install "alphabase[stable]"
```

NOTE: You might need to run `pip install -U pip` before installing
AlphaBase like this. Also note the double quotes `"`.

For those who are really adventurous, it is also possible to directly
install any branch (e.g.Â `@development`) with any extras
(e.g.Â `#egg=alphabase[stable,development-stable]`) from GitHub with e.g.

``` bash
pip install "git+https://github.com/MannLabs/alphabase.git@development#egg=alphabase[stable,development-stable]"
```

### Developer

AlphaBase can also be installed in editable (i.e.Â developer) mode with a
few `bash` commands. This allows to fully customize the software and
even modify the source code to your specific needs. When an editable
Python package is installed, its source code is stored in a transparent
location of your choice. While optional, it is advised to first (create
and) navigate to e.g.Â a general software folder:

``` bash
mkdir ~/folder/where/to/install/software
cd ~/folder/where/to/install/software
```

***The following commands assume you do not perform any additional `cd`
commands anymore***.

Next, download the AlphaBase repository from GitHub either directly or
with a `git` command. This creates a new AlphaBase subfolder in your
current directory.

``` bash
git clone https://github.com/MannLabs/alphabase.git
```

For any Python package, it is highly recommended to use a separate
[conda virtual environment](https://docs.conda.io/en/latest/), as
otherwise *dependancy conflicts can occur with already existing
packages*.

``` bash
conda create --name alphabase python=3.9 -y
conda activate alphabase
```

Finally, AlphaBase and all its [dependancies](requirements) need to be
installed. To take advantage of all features and allow development (with
the `-e` flag), this is best done by also installing the [development
dependencies](requirements/requirements_development.txt) instead of only
the [core dependencies](requirements/requirements.txt):

``` bash
pip install -e "./alphabase[development]"
```

By default this installs loose dependancies (no explicit versioning),
although it is also possible to use stable dependencies
(e.g.Â `pip install -e "./alphabase[stable,development-stable]"`).

***By using the editable flag `-e`, all modifications to the [AlphaBase
source code folder](alphabase) are directly reflected when running
AlphaBase. Note that the AlphaBase folder cannot be moved and/or renamed
if an editable version is installed. In case of confusion, you can
always retrieve the location of any Python module with e.g.Â the command
`import module` followed by `module.__file__`.***

------------------------------------------------------------------------

## Usage

TODO

------------------------------------------------------------------------

## Troubleshooting

In case of issues, check out the following:

- [Issues](https://github.com/MannLabs/alphabase/issues): Try a few
  different search terms to find out if a similar problem has been
  encountered before
- [Discussions](https://github.com/MannLabs/alphabase/discussions):
  Check if your problem or feature requests has been discussed before.

------------------------------------------------------------------------

## How to contribute

If you like this software, you can give us a
[star](https://github.com/MannLabs/alphabase/stargazers) to boost our
visibility! All direct contributions are also welcome. Feel free to post
a new [issue](https://github.com/MannLabs/alphabase/issues) or clone the
repository and create a [pull
request](https://github.com/MannLabs/alphabase/pulls) with a new branch.
For an even more interactive participation, check out the
[discussions](https://github.com/MannLabs/alphabase/discussions) and the
[the Contributors License Agreement](misc/CLA.md).

### Notes for developers

#### Tagging of changes
In order to have release notes automatically generated, changes need to be tagged with labels.
The following labels are used (should be safe-explanatory):
`breaking-change`, `bug`, `enhancement`.

#### Release a new version
This package uses a shared release process defined in the
[alphashared](https://github.com/MannLabs/alphashared) repository. Please see the instructions
[there](https://github.com/MannLabs/alphashared/blob/reusable-release-workflow/.github/workflows/README.md#release-a-new-version).

#### pre-commit hooks
It is highly recommended to use the provided pre-commit hooks, as the CI pipeline enforces all checks therein to
pass in order to merge a branch.

The hooks need to be installed once by
```bash
pre-commit install
```
You can run the checks yourself using:
```bash
pre-commit run --all-files
```

------------------------------------------------------------------------

## Changelog

See the [HISTORY.md](HISTORY.md) for a full overview of the changes made
in each version.

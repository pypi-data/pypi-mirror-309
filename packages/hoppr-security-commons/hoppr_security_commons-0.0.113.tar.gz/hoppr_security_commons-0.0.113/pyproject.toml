[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "hoppr-security-commons"
version = "0.0.113"
description = "Common Library For hoppr-cop"
authors = ["kganger <keith.e.ganger@lmco.com>"]
license = "MIT"

[[tool.poetry.packages]]
include = "hoppr_security_commons"

[[tool.poetry.packages]]
include = "security_commons"

[tool.poetry.dependencies]
python = "^3.10"
hoppr-cyclonedx-models = "0.*"
jinja2 = "^3.1.2"
packageurl-python = "0.*"
requests = "^2.29.0"
tabulate = "0.*"
typer = "0.*"

[tool.poetry.group.dev.dependencies]
black = "^23.9.0"
pre-commit = "^4.0.0"
ruff = ">=0.0.290, <1.0.0"
sourcery = "^1.10.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-cov = "^6.0.0"
pytest-pretty = "^1.1.0"

[tool.poetry.group.typing.dependencies]
types-docutils = ">=0.20.0.3, <1.0.0"
types-pygments = "^2.16.0.0"
types-requests = "^2.31.0.2"
types-setuptools = "^68.2.0.0"
types-tabulate = ">=0.9.0.3, <1.0.0"
types-urllib3 = "^1.26.25.14"

[tool.poetry.group.typing.dependencies.mypy]
extras = ["reports"]
version = "^1.5.1"

[tool.black]
color = true
line-length = 120
target-version = ["py310"]

[tool.coverage.report]
exclude_also = [
  "if __name__ == .__main__.:",
  "if not TYPE_CHECKING:",
  "if self.debug:",
  "if settings.DEBUG:",
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "raise NotImplementedError"
]
precision = 2
show_missing = true
skip_covered = true
skip_empty = true

[tool.mypy]
cobertura_xml_report = "."
enable_error_code = ["ignore-without-code"]
explicit_package_bases = true
follow_imports = "silent"
incremental = false
junit_xml = "mypy.xml"
mypy_path = "stubs"
namespace_packages = true
no_implicit_reexport = true
packages = ["hoppr_security_commons", "test.unit"]
plugins = ["pydantic.mypy"]
pretty = true
python_version = "3.10"
show_error_codes = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pyright]
include = ["hoppr_security_commons", "test/unit"]
pythonPlatform = "All"
pythonVersion = "3.10"
reportGeneralTypeIssues = false
reportSelfClsParameterName = false

[tool.pytest.ini_options]
addopts = [
  "--strict-markers",
  "--cov=hoppr_security_commons",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--cov-fail-under=100",
  "--import-mode=importlib",
  "--junit-xml=test.xml"
]
console_output_style = "progress"
junit_family = "xunit2"
pythonpath = ["."]
testpaths = ["test"]

[tool.ruff]
extend-exclude = ["security_commons"]
extend-select = [
  "ANN",  # All flake8-annotations rules
  "B",    # All flake8-bugbear rules
  "C4",   # All flake8-comprehension rules
  "D",    # All pydocstyle rules
  "ERA",  # All flake8-eradicate/eradicate rules
  "I",    # All isort rules
  "ISC",  # All flake8-implicit-str-concat rules
  "N",    # All pep8-naming rules
  "PIE",  # All flake8-pie rules
  "PGH",  # All pygrep-hooks rules
  "PTH",  # All flake8-use-pathlib rules
  "PYI",  # All flake8-pyi rules
  "Q",    # All flake8-quotes rules
  "RUF",  # All ruff checks
  "SIM",  # All flake8-simplify rules
  "T",    # All flake8-debugger and flake8-print rules
  "TCH",  # All flake8-type-checking rules
  "TID",  # All flake8-tidy-imports rules
  "UP",   # All pyupgrade rules
]
ignore = [
  "ANN002", # Missing type annotation for `*args`
  "ANN003", # Missing type annotation for `*kwargs`
  "ANN101", # Missing type annotation for `self` in method
  "ANN102", # Missing type annotation for `cls` in classmethod
  "D104",   # Missing docstring in public package
  "D105",   # Missing docstring in magic method
  "D106",   # Missing docstring in public nested class
  "D107",   # Missing docstring in `__init__`
]
line-length = 120
output-format = "gitlab"
target-version = "py310"
unfixable = [
  "ERA", # do not autoremove commented out code
]

[tool.ruff.flake8-annotations]
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "list"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2
lines-between-types = 1
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"test/unit/**/*.py" = [
  "D100",  # Missing docstring in public module
  "D103",  # Missing docstring in public function
]

[tool.ruff.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload", "typing.override", "typing_extensions.override"]

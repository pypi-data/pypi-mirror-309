import abc
from abc import ABC, abstractmethod
from functools import cached_property as cached_property
from typing import Callable, Iterable, Self

from bs4 import BeautifulSoup
from bs4 import Tag as Tag

class ListItem(ABC, metaclass=abc.ABCMeta):
    def __init__(self, tag: Tag, parent: ListItem | None = None) -> None: ...
    @property
    def parent(self) -> ListItem | None: ...
    @property
    def tag(self) -> Tag: ...
    @cached_property
    def children(self) -> list[ListItem]: ...
    @cached_property
    def text(self) -> str: ...
    @abstractmethod
    def init_children(self) -> list[ListItem]: ...
    @abstractmethod
    def init_text(self) -> str: ...
    @cached_property
    def depth(self) -> int: ...
    @cached_property
    def height(self) -> int: ...
    def depth_first_traverse(
        self, max_depth: int | None = None
    ) -> Iterable[ListItem]: ...
    def breadth_first_traverse(
        self, max_depth: int | None = None
    ) -> Iterable[ListItem]: ...

class UnorderedList(ABC, metaclass=abc.ABCMeta):
    soup: BeautifulSoup
    def __init__(self, soup: BeautifulSoup) -> None: ...
    @property
    @abstractmethod
    def list_item_class(self) -> type[ListItem]: ...
    @abstractmethod
    def get_root_ul(self) -> Tag: ...
    @cached_property
    def items(self) -> list[ListItem]: ...
    @cached_property
    def height(self) -> int: ...
    def depth_first_traverse(
        self, max_depth: int | None = None
    ) -> Iterable[ListItem]: ...
    def breadth_first_traverse(self) -> Iterable[ListItem]: ...
    def save(
        self,
        filename: str,
        indent: int = 2,
        max_depth: int | None = None,
        item_formatter: Callable[[ListItem], str] | None = None,
    ) -> None: ...
    @classmethod
    def from_file(cls, filename: str) -> Self: ...

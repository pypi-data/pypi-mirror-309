## LLM-Focused Summary System

One of the most valuable features `llamero` offers is tooling to automate generation of various kinds of project/directory summaries that can be provided to an LLM for context.

This system generates both local directory summaries and project-wide summaries to provide focused, relevant context for different tasks.

The default behavior is to generate summaries and force push them to a dedicated `summaries` branch, keeping the actual project uncluttered so the user can pick and choose 
the specific summaries to share as they need to, when they need to, rather than filling up the LLMs context unnecessarily.

For a concrete example, poke around [llamero's `summaries` branch](https://github.com/dmarx/llamero/tree/summaries).
`llamero`'s summaries are currently configured to only be generated on request, through the `on: workflow_dispatch:` directive in the workflow configuration [here](https://github.com/dmarx/llamero/blob/main/.github/workflows/generate_summaries.yaml).

### Directory Summaries

Each directory in the project contains a `SUMMARY` file that concatenates all text files in that directory, recursively. 
This provides focused, local context when working on directory-specific tasks.

### Project-Wide Summaries
Special project-wide summaries are maintained in the `SUMMARIES/` directory:

- `READMEs.md`: Concatenation of all README files in the project
- `README_SUBs.md`: Same as above but excluding the root README
- `PYTHON.md`: Structured view of all Python code including:
  - Function and class signatures
  - Type hints
  - Docstrings
  - Clear indication of class membership


```bash
# Switch to summaries branch
git checkout summaries

# View available summaries
ls SUMMARIES/
```

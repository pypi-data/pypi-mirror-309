from varphi_parsing_tools import *
from ..model import State, Instruction, HeadDirection, TapeCharacter

TALLY_CHARACTERS = {'1'}
BLANK_CHARACTERS = {'b'}
LEFT_CHARACTERS = {'L'}
RIGHT_CHARACTERS = {'R'}


class VarphiRepresentor(VarphiListener):
    """
    This class translates the tokens generated by VarphiParser into model
    objects.
    """
    stateNameToObject: dict[str, State]
    initialState: State | None

    def __init__(self):
        """
        Initializes the VarphiEvaluator.
        Sets up a mapping of state names to State objects and initializes
        the initial state to None.
        """
        self.stateNameToObject = {}
        self.initialState = None
        super().__init__()

    def enterLine(self, ctx: VarphiParser.LineContext) -> None:
        """
        Enter a parse tree produced by VarphiParser#line.
        Processes the parse tree nodes to extract state transitions and
        instructions.

        Args:
            - ctx (VarphiParser.LineContext): The context for the parse tree
              node.
        """
        ifStateString = str(ctx.STATE(0).getText())
        ifCharacterString = str(ctx.SYMBOL(0).getText())
        thenStateString = str(ctx.STATE(1).getText())
        thenCharacterString = str(ctx.SYMBOL(1).getText())
        thenDirectionString = str(ctx.DIRECTION().getText())

        if ifStateString in self.stateNameToObject:
            ifStateObject = self.stateNameToObject[ifStateString]
        else:
            ifStateObject = State(ifStateString)
            self.stateNameToObject[ifStateString] = ifStateObject

            if self.initialState is None:
                self.initialState = ifStateObject

        if ifCharacterString in TALLY_CHARACTERS:
            ifCharacterObject = TapeCharacter.TALLY
        else:
            ifCharacterObject = TapeCharacter.BLANK

        if thenStateString in self.stateNameToObject:
            thenStateObject = self.stateNameToObject[thenStateString]
        else:
            thenStateObject = State(thenStateString)
            self.stateNameToObject[thenStateString] = thenStateObject

        if thenCharacterString in TALLY_CHARACTERS:
            thenCharacterObject = TapeCharacter.TALLY
        else:
            thenCharacterObject = TapeCharacter.BLANK

        if thenDirectionString in RIGHT_CHARACTERS:
            thenDirectionObject = HeadDirection.RIGHT
        else:
            thenDirectionObject = HeadDirection.LEFT

        instruction = Instruction(thenStateObject,
                                  thenCharacterObject,
                                  thenDirectionObject,
                                  ctx.start.line,
                                  f"{ctx.start.line} {ifStateString} {ifCharacterString} {thenStateString} {thenCharacterString} {thenDirectionString}")

        if ifCharacterObject == TapeCharacter.TALLY:
            ifStateObject.addOnTallyInstruction(instruction)
        else:
            ifStateObject.addOnBlankInstruction(instruction)
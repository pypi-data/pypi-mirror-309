import json
def make_dict_value_as_keys(dictObj):
    new_dict = {}
    setss = []
    if dictObj:
        for key,value in dictObj.items():
            setss.append(f"{key} = '{value}'")
            new_dict[key]=f"{key}".replace("'",'')
    
    return new_dict ,setss
for key,values in {'__init__': None, 'is_connected': None, 'get_balance': {'method': 'getBalance', 'jsonrpc': '2.0', 'id': 0, 'params': ['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', {'commitment': 'finalized', 'minContextSlot': None}], 'init': 'pubkey'}, 'get_account_info': {'method': 'getAccountInfo', 'jsonrpc': '2.0', 'id': 0, 'params': ['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', {'encoding': 'base64', 'dataSlice': None, 'commitment': 'confirmed', 'minContextSlot': None}], 'init': 'pubkey'}, 'get_account_info_json_parsed': {'method': 'getAccountInfo', 'jsonrpc': '2.0', 'id': 0, 'params': ['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', {'encoding': 'jsonParsed', 'dataSlice': None, 'commitment': 'confirmed', 'minContextSlot': None}], 'init': 'pubkey'}, 'get_block_commitment': {'method': 'getBlockCommitment', 'jsonrpc': '2.0', 'id': 0, 'params': [168036172], 'init': 'slot'}, 'get_block_time': {'method': 'getBlockTime', 'jsonrpc': '2.0', 'id': 0, 'params': [168036172], 'init': 'slot'}, 'get_cluster_nodes': None, 'get_block': {'method': 'getBlock', 'jsonrpc': '2.0', 'id': 0, 'params': [168036172, {'encoding': 'json', 'transactionDetails': None, 'rewards': None, 'maxSupportedTransactionVersion': 0}], 'init': 'slot'}, 'get_recent_performance_samples': {'method': 'getRecentPerformanceSamples', 'jsonrpc': '2.0', 'id': 0, 'params': [0], 'init': 'limit'}, 'get_block_height': {'method': 'getBlockHeight', 'jsonrpc': '2.0', 'id': 0, 'params': [{'commitment': 'processed', 'minContextSlot': None}], 'init': 'commitment'}, 'get_blocks': {'method': 'getBlocks', 'jsonrpc': '2.0', 'id': 0, 'params': [0, None], 'init': 'start_slot'}, 'get_signatures_for_address': {'method': 'getSignaturesForAddress', 'jsonrpc': '2.0', 'id': 0, 'params': ['Vote111111111111111111111111111111111111111', {'before': None, 'until': None, 'limit': 1000, 'commitment': 'confirmed', 'minContextSlot': None}], 'init': 'account'}, 'get_transaction': {'method': 'getTransaction', 'jsonrpc': '2.0', 'id': 0, 'params': ['5VERv8NMvzbJMEkV8xnrLkEaWRtSz9CosKDYjCJjBRnbJLgp8uirBgmQpjKhoR4tjF3ZpRzrFmBV6UjKdiSZkQUW', {'encoding': 'json', 'commitment': 'confirmed', 'maxSupportedTransactionVersion': 0}], 'init': 'tx_sig'}, 'get_epoch_info': {'method': 'getEpochInfo', 'jsonrpc': '2.0', 'id': 0, 'params': [{'commitment': 'processed', 'minContextSlot': None}], 'init': 'commitment'}, 'get_fee_for_message': None, 'get_first_available_block': None, 'get_genesis_hash': None, 'get_identity': None, 'get_inflation_governor': {'method': 'getInflationGovernor', 'jsonrpc': '2.0', 'id': 0, 'params': [{'commitment': 'processed'}], 'init': 'commitment'}, 'get_inflation_rate': None, 'get_inflation_reward': None, 'get_largest_accounts': None, 'get_leader_schedule': {'method': 'getLeaderSchedule', 'jsonrpc': '2.0', 'id': 0, 'params': [0, {'identity': None, 'commitment': 'finalized'}], 'init': 'epoch'}, 'get_minimum_balance_for_rent_exemption': {'method': 'getMinimumBalanceForRentExemption', 'jsonrpc': '2.0', 'id': 0, 'params': [0, {'commitment': 'finalized'}], 'init': 'usize'}, 'get_multiple_accounts': {'method': 'getMultipleAccounts', 'jsonrpc': '2.0', 'id': 0, 'params': [['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', 'EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG'], {'encoding': 'base64', 'dataSlice': None, 'commitment': 'confirmed', 'minContextSlot': None}], 'init': 'pubkeys'}, 'get_multiple_accounts_json_parsed': {'method': 'getMultipleAccounts', 'jsonrpc': '2.0', 'id': 0, 'params': [['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', 'EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG'], {'encoding': 'jsonParsed', 'dataSlice': None, 'commitment': 'confirmed', 'minContextSlot': None}], 'init': 'pubkeys'}, 'get_program_accounts': {'method': 'getProgramAccounts', 'jsonrpc': '2.0', 'id': 0, 'params': ['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', {'filters': None, 'encoding': 'base64', 'dataSlice': None, 'commitment': 'confirmed', 'minContextSlot': None, 'withContext': None}], 'init': 'pubkey'}, 'get_program_accounts_json_parsed': None, 'get_latest_blockhash': {'method': 'getLatestBlockhash', 'jsonrpc': '2.0', 'id': 0, 'params': [{'commitment': 'processed', 'minContextSlot': None}], 'init': 'commitment'}, 'get_signature_statuses': None, 'get_slot': {'method': 'getSlot', 'jsonrpc': '2.0', 'id': 0, 'params': [{'commitment': 'processed', 'minContextSlot': None}], 'init': 'commitment'}, 'get_slot_leader': {'method': 'getSlotLeader', 'jsonrpc': '2.0', 'id': 0, 'params': [{'commitment': 'processed', 'minContextSlot': None}], 'init': 'commitment'}, 'get_stake_activation': {'method': 'getStakeActivation', 'jsonrpc': '2.0', 'id': 0, 'params': ['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', {'epoch': None, 'commitment': 'confirmed', 'minContextSlot': None}], 'init': 'pubkey'}, 'get_supply': {'method': 'getSupply', 'jsonrpc': '2.0', 'id': 0, 'params': [{'commitment': 'processed', 'excludeNonCirculatingAccountsList': False}], 'init': 'commitment'}, 'get_token_account_balance': {'method': 'getTokenAccountBalance', 'jsonrpc': '2.0', 'id': 0, 'params': ['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', {'commitment': 'finalized'}], 'init': 'pubkey'}, 'get_token_accounts_by_delegate': None, 'get_token_accounts_by_delegate_json_parsed': None, 'get_token_accounts_by_owner': None, 'get_token_accounts_by_owner_json_parsed': None, 'get_token_largest_accounts': {'method': 'getTokenLargestAccounts', 'jsonrpc': '2.0', 'id': 0, 'params': ['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', {'commitment': 'finalized'}], 'init': 'pubkey'}, 'get_token_supply': {'method': 'getTokenSupply', 'jsonrpc': '2.0', 'id': 0, 'params': ['EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG', {'commitment': 'finalized'}], 'init': 'pubkey'}, 'get_transaction_count': {'method': 'getTransactionCount', 'jsonrpc': '2.0', 'id': 0, 'params': [{'commitment': 'processed', 'minContextSlot': None}], 'init': 'commitment'}, 'get_minimum_ledger_slot': None, 'get_version': None, 'get_vote_accounts': {'method': 'getVoteAccounts', 'jsonrpc': '2.0', 'id': 0, 'params': [{'votePubkey': None, 'commitment': 'processed', 'keepUnstakedDelinquents': None, 'delinquentSlotDistance': None}], 'init': 'commitment'}, 'request_airdrop': None, 'send_raw_transaction': None, 'send_transaction': None, 'simulate_transaction': None, 'validator_exit': None}.items():
    if values:
        new_dict,setss = make_dict_value_as_keys(values['params'][-1])
        f"def {key}({values['init']},{values['params'][-1]})"
        function = f'def {key}({",".join(setss)}'.replace("'None'","None")+")):"
        values['params']=str(new_dict).replace(": '",':').replace("',",',')
        function+='\n'+str(values)


    

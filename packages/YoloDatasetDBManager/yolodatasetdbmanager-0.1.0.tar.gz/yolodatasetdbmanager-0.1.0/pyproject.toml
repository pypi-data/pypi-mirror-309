[project]
name = "YoloDatasetDBManager"
dynamic = []
description = "A Python library for managing YOLO datasets, allowing seamless conversion between filesystem-based datasets and PostgreSQL storage. Features include inserting datasets into a database, retrieving and rebuilding datasets, and preserving YOLO-compliant folder structures."
authors = [
    { name = "Macktireh", email = "abdimack97@gmail.com" },
]
readme = "README.md"
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Typing :: Typed",
    "Topic :: Software Development :: Libraries",
]
requires-python = ">=3.11"
dependencies = [
    "psycopg[binary]>=3.2.3",
    "pydantic>=2.9.2",
    "python-dotenv>=1.0.1",
]
version = "0.1.0"

[project.license]
text = "MIT"

[project.urls]
Homepage = "https://github.com/Macktireh/YoloDatasetDBManager"
Documentation = "https://github.com/Macktireh/YoloDatasetDBManager#readme"
Repository = "https://github.com/Macktireh/YoloDatasetDBManager"
Issues = "https://github.com/Macktireh/YoloDatasetDBManager/issues"

[dependency-groups]
lint = [
    "ruff>=0.7.4",
    "pre-commit>=4.0.1",
]
test = [
    "pytest>=8.3.3",
]

[tool.pdm]
distribution = true

[tool.pdm.version]
source = "scm"

[tool.pdm.scripts]
rufffix = "ruff check --fix"
precommit = "pre-commit run --all-files"
test = "pytest"

[tool.pytest.ini_options]
python_files = "test*.py"
pythonpath = "src"

[tool.ruff]
line-length = 110
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "UP",
    "B",
    "SIM",
    "I",
]

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

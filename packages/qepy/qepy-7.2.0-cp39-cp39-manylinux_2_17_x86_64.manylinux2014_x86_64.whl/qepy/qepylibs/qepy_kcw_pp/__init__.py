from __future__ import print_function, absolute_import, division
pname = 'libqepy_kcw_pp'

# control the output
import sys
from importlib import import_module
from qepy.core import Logger, env
class QEpyLib :
    def __init__(self, **kwargs):
        qepylib = import_module(pname)
        sys.modules[pname] = self
        self.qepylib = qepylib

    def __getattr__(self, attr):
        attr_value = getattr(self.qepylib, attr)
        if '__array__' not in attr :
            attr_value = Logger.stdout2file(attr_value, fileobj=env['STDOUT'])
        return attr_value
qepylib = QEpyLib()
import libqepy_kcw_pp
import f90wrap.runtime
import logging
import numpy

def compute_self_hartree():
    """
    compute_self_hartree()
    
    
    Defined at compute_self_hartree.fpp lines 14-136
    
    
    -----------------------------------------------------------------
      This simple code read the PWSCF and Wannier output and
      compute the self-Hartree of the orbitals
      Code written by Nicola Colonna.
    """
    libqepy_kcw_pp.f90wrap_compute_self_hartree()

def interp_r_to_k():
    """
    interp_r_to_k()
    
    
    Defined at interp_r_to_k.fpp lines 14-47
    
    
    -----------------------------------------------------------------
      This simple code read the KC hamiltonian generated by
      kcw_ham in real space and interpolate on a given path(from input)
      Code written by Nicola Colonna and based on intepolation.f90 by Riccardo de \
          Gennaro
    """
    libqepy_kcw_pp.f90wrap_interp_r_to_k()



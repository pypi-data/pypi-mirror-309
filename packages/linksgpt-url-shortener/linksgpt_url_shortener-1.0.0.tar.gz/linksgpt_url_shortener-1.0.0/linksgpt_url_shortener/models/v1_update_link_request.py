# coding: utf-8

"""
    LinksGPT URL Shortener SDK

    LinksGPT URL Shortener SDK  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: service@linksgpt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1UpdateLinkRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'title': 'str',
        'destination': 'str',
        'path': 'str',
        'utm': 'object',
        'tags': 'list[str]'
    }

    attribute_map = {
        'domain': 'domain',
        'title': 'title',
        'destination': 'destination',
        'path': 'path',
        'utm': 'utm',
        'tags': 'tags'
    }

    def __init__(self, domain=None, title=None, destination=None, path=None, utm=None, tags=None):  # noqa: E501
        """V1UpdateLinkRequest - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._title = None
        self._destination = None
        self._path = None
        self._utm = None
        self._tags = None
        self.discriminator = None
        if domain is not None:
            self.domain = domain
        if title is not None:
            self.title = title
        if destination is not None:
            self.destination = destination
        if path is not None:
            self.path = path
        if utm is not None:
            self.utm = utm
        if tags is not None:
            self.tags = tags

    @property
    def domain(self):
        """Gets the domain of this V1UpdateLinkRequest.  # noqa: E501

        A reference to the Domain resource for this short link. Specify either domain id or domain fullName. If not specified, will not be updated  # noqa: E501

        :return: The domain of this V1UpdateLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this V1UpdateLinkRequest.

        A reference to the Domain resource for this short link. Specify either domain id or domain fullName. If not specified, will not be updated  # noqa: E501

        :param domain: The domain of this V1UpdateLinkRequest.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def title(self):
        """Gets the title of this V1UpdateLinkRequest.  # noqa: E501

        A title you assign to the short link in order to remember what's behind it. If not specified, will not be updated  # noqa: E501

        :return: The title of this V1UpdateLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V1UpdateLinkRequest.

        A title you assign to the short link in order to remember what's behind it. If not specified, will not be updated  # noqa: E501

        :param title: The title of this V1UpdateLinkRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def destination(self):
        """Gets the destination of this V1UpdateLinkRequest.  # noqa: E501

        The destination URL you want your short link to point to. If not specified, will not be updated  # noqa: E501

        :return: The destination of this V1UpdateLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this V1UpdateLinkRequest.

        The destination URL you want your short link to point to. If not specified, will not be updated  # noqa: E501

        :param destination: The destination of this V1UpdateLinkRequest.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def path(self):
        """Gets the path of this V1UpdateLinkRequest.  # noqa: E501

        The keyword portion of your branded short link. If not specified, will not be updated  # noqa: E501

        :return: The path of this V1UpdateLinkRequest.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this V1UpdateLinkRequest.

        The keyword portion of your branded short link. If not specified, will not be updated  # noqa: E501

        :param path: The path of this V1UpdateLinkRequest.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def utm(self):
        """Gets the utm of this V1UpdateLinkRequest.  # noqa: E501

        UTM params  # noqa: E501

        :return: The utm of this V1UpdateLinkRequest.  # noqa: E501
        :rtype: object
        """
        return self._utm

    @utm.setter
    def utm(self, utm):
        """Sets the utm of this V1UpdateLinkRequest.

        UTM params  # noqa: E501

        :param utm: The utm of this V1UpdateLinkRequest.  # noqa: E501
        :type: object
        """

        self._utm = utm

    @property
    def tags(self):
        """Gets the tags of this V1UpdateLinkRequest.  # noqa: E501

        Unique identifier of the Tag resource. If not specified, will not be updated  # noqa: E501

        :return: The tags of this V1UpdateLinkRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V1UpdateLinkRequest.

        Unique identifier of the Tag resource. If not specified, will not be updated  # noqa: E501

        :param tags: The tags of this V1UpdateLinkRequest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UpdateLinkRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UpdateLinkRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    LinksGPT URL Shortener SDK

    LinksGPT URL Shortener SDK  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: service@linksgpt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1LinkResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'workspace_id': 'str',
        'domain_id': 'str',
        'domain_name': 'str',
        'title': 'str',
        'path': 'str',
        'link': 'str',
        'file': 'str',
        'record_type': 'str',
        'destination': 'str',
        'utm': 'V1LinkResourceUtm',
        'tags': 'list[str]',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'workspace_id': 'workspaceId',
        'domain_id': 'domainId',
        'domain_name': 'domainName',
        'title': 'title',
        'path': 'path',
        'link': 'link',
        'file': 'file',
        'record_type': 'recordType',
        'destination': 'destination',
        'utm': 'utm',
        'tags': 'tags',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, workspace_id=None, domain_id=None, domain_name=None, title=None, path=None, link=None, file=None, record_type=None, destination=None, utm=None, tags=None, created_at=None, updated_at=None):  # noqa: E501
        """V1LinkResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._workspace_id = None
        self._domain_id = None
        self._domain_name = None
        self._title = None
        self._path = None
        self._link = None
        self._file = None
        self._record_type = None
        self._destination = None
        self._utm = None
        self._tags = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if domain_id is not None:
            self.domain_id = domain_id
        if domain_name is not None:
            self.domain_name = domain_name
        if title is not None:
            self.title = title
        if path is not None:
            self.path = path
        if link is not None:
            self.link = link
        if file is not None:
            self.file = file
        if record_type is not None:
            self.record_type = record_type
        if destination is not None:
            self.destination = destination
        if utm is not None:
            self.utm = utm
        if tags is not None:
            self.tags = tags
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this V1LinkResource.  # noqa: E501

        link id  # noqa: E501

        :return: The id of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1LinkResource.

        link id  # noqa: E501

        :param id: The id of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this V1LinkResource.  # noqa: E501

        workspace id  # noqa: E501

        :return: The workspace_id of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this V1LinkResource.

        workspace id  # noqa: E501

        :param workspace_id: The workspace_id of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def domain_id(self):
        """Gets the domain_id of this V1LinkResource.  # noqa: E501

        domain id  # noqa: E501

        :return: The domain_id of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this V1LinkResource.

        domain id  # noqa: E501

        :param domain_id: The domain_id of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def domain_name(self):
        """Gets the domain_name of this V1LinkResource.  # noqa: E501

        domain name  # noqa: E501

        :return: The domain_name of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this V1LinkResource.

        domain name  # noqa: E501

        :param domain_name: The domain_name of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def title(self):
        """Gets the title of this V1LinkResource.  # noqa: E501

        title  # noqa: E501

        :return: The title of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V1LinkResource.

        title  # noqa: E501

        :param title: The title of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def path(self):
        """Gets the path of this V1LinkResource.  # noqa: E501

        path  # noqa: E501

        :return: The path of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this V1LinkResource.

        path  # noqa: E501

        :param path: The path of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def link(self):
        """Gets the link of this V1LinkResource.  # noqa: E501

        short link  # noqa: E501

        :return: The link of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this V1LinkResource.

        short link  # noqa: E501

        :param link: The link of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def file(self):
        """Gets the file of this V1LinkResource.  # noqa: E501

        file  # noqa: E501

        :return: The file of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this V1LinkResource.

        file  # noqa: E501

        :param file: The file of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def record_type(self):
        """Gets the record_type of this V1LinkResource.  # noqa: E501

        record type  # noqa: E501

        :return: The record_type of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this V1LinkResource.

        record type  # noqa: E501

        :param record_type: The record_type of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def destination(self):
        """Gets the destination of this V1LinkResource.  # noqa: E501

        destination url  # noqa: E501

        :return: The destination of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this V1LinkResource.

        destination url  # noqa: E501

        :param destination: The destination of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def utm(self):
        """Gets the utm of this V1LinkResource.  # noqa: E501


        :return: The utm of this V1LinkResource.  # noqa: E501
        :rtype: V1LinkResourceUtm
        """
        return self._utm

    @utm.setter
    def utm(self, utm):
        """Sets the utm of this V1LinkResource.


        :param utm: The utm of this V1LinkResource.  # noqa: E501
        :type: V1LinkResourceUtm
        """

        self._utm = utm

    @property
    def tags(self):
        """Gets the tags of this V1LinkResource.  # noqa: E501

        tags  # noqa: E501

        :return: The tags of this V1LinkResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V1LinkResource.

        tags  # noqa: E501

        :param tags: The tags of this V1LinkResource.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def created_at(self):
        """Gets the created_at of this V1LinkResource.  # noqa: E501

        created at  # noqa: E501

        :return: The created_at of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V1LinkResource.

        created at  # noqa: E501

        :param created_at: The created_at of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V1LinkResource.  # noqa: E501

        updated at  # noqa: E501

        :return: The updated_at of this V1LinkResource.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V1LinkResource.

        updated at  # noqa: E501

        :param updated_at: The updated_at of this V1LinkResource.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LinkResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LinkResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    LinksGPT URL Shortener SDK

    LinksGPT URL Shortener SDK  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: service@linksgpt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1DomainResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'domain_name': 'str',
        'provider': 'V1DomainResourceProvider',
        'root_domain_name': 'str',
        'sub_domain': 'str',
        'actual_domain_name': 'str',
        'active': 'bool',
        'type': 'int',
        'dns_type': 'str',
        'dns_value': 'str',
        'dns_correct': 'bool',
        'https_requested': 'bool',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'domain_name': 'domainName',
        'provider': 'provider',
        'root_domain_name': 'rootDomainName',
        'sub_domain': 'subDomain',
        'actual_domain_name': 'actualDomainName',
        'active': 'active',
        'type': 'type',
        'dns_type': 'dnsType',
        'dns_value': 'dnsValue',
        'dns_correct': 'dnsCorrect',
        'https_requested': 'httpsRequested',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, domain_name=None, provider=None, root_domain_name=None, sub_domain=None, actual_domain_name=None, active=None, type=None, dns_type=None, dns_value=None, dns_correct=None, https_requested=None, created_at=None, updated_at=None):  # noqa: E501
        """V1DomainResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._domain_name = None
        self._provider = None
        self._root_domain_name = None
        self._sub_domain = None
        self._actual_domain_name = None
        self._active = None
        self._type = None
        self._dns_type = None
        self._dns_value = None
        self._dns_correct = None
        self._https_requested = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if domain_name is not None:
            self.domain_name = domain_name
        if provider is not None:
            self.provider = provider
        if root_domain_name is not None:
            self.root_domain_name = root_domain_name
        if sub_domain is not None:
            self.sub_domain = sub_domain
        if actual_domain_name is not None:
            self.actual_domain_name = actual_domain_name
        if active is not None:
            self.active = active
        if type is not None:
            self.type = type
        if dns_type is not None:
            self.dns_type = dns_type
        if dns_value is not None:
            self.dns_value = dns_value
        if dns_correct is not None:
            self.dns_correct = dns_correct
        if https_requested is not None:
            self.https_requested = https_requested
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this V1DomainResource.  # noqa: E501

        id  # noqa: E501

        :return: The id of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1DomainResource.

        id  # noqa: E501

        :param id: The id of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def domain_name(self):
        """Gets the domain_name of this V1DomainResource.  # noqa: E501

        domain name  # noqa: E501

        :return: The domain_name of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this V1DomainResource.

        domain name  # noqa: E501

        :param domain_name: The domain_name of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def provider(self):
        """Gets the provider of this V1DomainResource.  # noqa: E501


        :return: The provider of this V1DomainResource.  # noqa: E501
        :rtype: V1DomainResourceProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this V1DomainResource.


        :param provider: The provider of this V1DomainResource.  # noqa: E501
        :type: V1DomainResourceProvider
        """

        self._provider = provider

    @property
    def root_domain_name(self):
        """Gets the root_domain_name of this V1DomainResource.  # noqa: E501

        root domain name  # noqa: E501

        :return: The root_domain_name of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._root_domain_name

    @root_domain_name.setter
    def root_domain_name(self, root_domain_name):
        """Sets the root_domain_name of this V1DomainResource.

        root domain name  # noqa: E501

        :param root_domain_name: The root_domain_name of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._root_domain_name = root_domain_name

    @property
    def sub_domain(self):
        """Gets the sub_domain of this V1DomainResource.  # noqa: E501

        sub domain  # noqa: E501

        :return: The sub_domain of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._sub_domain

    @sub_domain.setter
    def sub_domain(self, sub_domain):
        """Sets the sub_domain of this V1DomainResource.

        sub domain  # noqa: E501

        :param sub_domain: The sub_domain of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._sub_domain = sub_domain

    @property
    def actual_domain_name(self):
        """Gets the actual_domain_name of this V1DomainResource.  # noqa: E501

        actual domain name  # noqa: E501

        :return: The actual_domain_name of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._actual_domain_name

    @actual_domain_name.setter
    def actual_domain_name(self, actual_domain_name):
        """Sets the actual_domain_name of this V1DomainResource.

        actual domain name  # noqa: E501

        :param actual_domain_name: The actual_domain_name of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._actual_domain_name = actual_domain_name

    @property
    def active(self):
        """Gets the active of this V1DomainResource.  # noqa: E501

        whether the domain is active  # noqa: E501

        :return: The active of this V1DomainResource.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this V1DomainResource.

        whether the domain is active  # noqa: E501

        :param active: The active of this V1DomainResource.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def type(self):
        """Gets the type of this V1DomainResource.  # noqa: E501

        type of domain 0: domain of platform  1: domain of user  # noqa: E501

        :return: The type of this V1DomainResource.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1DomainResource.

        type of domain 0: domain of platform  1: domain of user  # noqa: E501

        :param type: The type of this V1DomainResource.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def dns_type(self):
        """Gets the dns_type of this V1DomainResource.  # noqa: E501

        dns type  # noqa: E501

        :return: The dns_type of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._dns_type

    @dns_type.setter
    def dns_type(self, dns_type):
        """Sets the dns_type of this V1DomainResource.

        dns type  # noqa: E501

        :param dns_type: The dns_type of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._dns_type = dns_type

    @property
    def dns_value(self):
        """Gets the dns_value of this V1DomainResource.  # noqa: E501

        current dns value  # noqa: E501

        :return: The dns_value of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._dns_value

    @dns_value.setter
    def dns_value(self, dns_value):
        """Sets the dns_value of this V1DomainResource.

        current dns value  # noqa: E501

        :param dns_value: The dns_value of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._dns_value = dns_value

    @property
    def dns_correct(self):
        """Gets the dns_correct of this V1DomainResource.  # noqa: E501

        whether dns is correct  # noqa: E501

        :return: The dns_correct of this V1DomainResource.  # noqa: E501
        :rtype: bool
        """
        return self._dns_correct

    @dns_correct.setter
    def dns_correct(self, dns_correct):
        """Sets the dns_correct of this V1DomainResource.

        whether dns is correct  # noqa: E501

        :param dns_correct: The dns_correct of this V1DomainResource.  # noqa: E501
        :type: bool
        """

        self._dns_correct = dns_correct

    @property
    def https_requested(self):
        """Gets the https_requested of this V1DomainResource.  # noqa: E501

        whether https requested  # noqa: E501

        :return: The https_requested of this V1DomainResource.  # noqa: E501
        :rtype: bool
        """
        return self._https_requested

    @https_requested.setter
    def https_requested(self, https_requested):
        """Sets the https_requested of this V1DomainResource.

        whether https requested  # noqa: E501

        :param https_requested: The https_requested of this V1DomainResource.  # noqa: E501
        :type: bool
        """

        self._https_requested = https_requested

    @property
    def created_at(self):
        """Gets the created_at of this V1DomainResource.  # noqa: E501

        created at  # noqa: E501

        :return: The created_at of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V1DomainResource.

        created at  # noqa: E501

        :param created_at: The created_at of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V1DomainResource.  # noqa: E501

        updated at  # noqa: E501

        :return: The updated_at of this V1DomainResource.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V1DomainResource.

        updated at  # noqa: E501

        :param updated_at: The updated_at of this V1DomainResource.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DomainResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DomainResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

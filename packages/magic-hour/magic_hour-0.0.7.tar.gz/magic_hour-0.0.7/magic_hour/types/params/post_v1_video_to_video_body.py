"""
Generated by Sideko (sideko.dev)
"""

import typing
import typing_extensions
import pydantic

from .post_v1_video_to_video_body_assets import (
    PostV1VideoToVideoBodyAssets,
    _SerializerPostV1VideoToVideoBodyAssets,
)
from .post_v1_video_to_video_body_style import (
    PostV1VideoToVideoBodyStyle,
    _SerializerPostV1VideoToVideoBodyStyle,
)


class PostV1VideoToVideoBody(typing_extensions.TypedDict):
    """ """

    assets: typing_extensions.Required[PostV1VideoToVideoBodyAssets]
    end_seconds: typing_extensions.Required[float]
    fps_resolution: typing_extensions.NotRequired[
        typing_extensions.Literal["FULL", "HALF"]
    ]
    height: typing_extensions.Required[float]
    name: typing.Optional[str]
    start_seconds: typing_extensions.Required[float]
    style: typing_extensions.Required[PostV1VideoToVideoBodyStyle]
    width: typing_extensions.Required[float]


class _SerializerPostV1VideoToVideoBody(pydantic.BaseModel):
    """
    Serializer for PostV1VideoToVideoBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    assets: _SerializerPostV1VideoToVideoBodyAssets = pydantic.Field(alias="assets")
    end_seconds: float = pydantic.Field(alias="end_seconds")
    fps_resolution: typing.Optional[typing_extensions.Literal["FULL", "HALF"]] = (
        pydantic.Field(alias="fps_resolution", default=None)
    )
    height: float = pydantic.Field(alias="height")
    name: typing.Optional[str] = pydantic.Field(alias="name")
    start_seconds: float = pydantic.Field(alias="start_seconds")
    style: _SerializerPostV1VideoToVideoBodyStyle = pydantic.Field(alias="style")
    width: float = pydantic.Field(alias="width")

# coding: utf-8

"""
    Connect API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class DisclosedFields(BaseModel):
    """
    DisclosedFields
    """ # noqa: E501
    id_number: StrictBool = Field(alias="idNumber")
    given_name: StrictBool = Field(alias="givenName")
    family_name: StrictBool = Field(alias="familyName")
    address: StrictBool
    date_of_birth: StrictBool = Field(alias="dateOfBirth")
    country: StrictBool
    issue_date: StrictBool = Field(alias="issueDate")
    expiration_date: StrictBool = Field(alias="expirationDate")
    document_front: StrictBool = Field(alias="documentFront")
    document_back: StrictBool = Field(alias="documentBack")
    document_portrait: StrictBool = Field(alias="documentPortrait")
    selfie: StrictBool
    __properties: ClassVar[List[str]] = ["idNumber", "givenName", "familyName", "address", "dateOfBirth", "country", "issueDate", "expirationDate", "documentFront", "documentBack", "documentPortrait", "selfie"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DisclosedFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DisclosedFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idNumber": obj.get("idNumber"),
            "givenName": obj.get("givenName"),
            "familyName": obj.get("familyName"),
            "address": obj.get("address"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "country": obj.get("country"),
            "issueDate": obj.get("issueDate"),
            "expirationDate": obj.get("expirationDate"),
            "documentFront": obj.get("documentFront"),
            "documentBack": obj.get("documentBack"),
            "documentPortrait": obj.get("documentPortrait"),
            "selfie": obj.get("selfie")
        })
        return _obj



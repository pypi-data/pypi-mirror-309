Metadata-Version: 2.1
Name: academic_metrics
Version: 0.3.0a0
Summary: A tool to extract and format academic data from Web of Science and Crossref
Author-email: Spencer Presley <spencerpresley96@gmail.com>, Cole Barbes <cbarbes1@gulls.salisbury.edu>
Project-URL: Homepage, https://github.com/SpencerPresley/COSC425-DATA
Project-URL: Bug Tracker, https://github.com/SpencerPresley/COSC425-DATA/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: aiohappyeyeballs
Requires-Dist: aiohttp
Requires-Dist: aiosignal
Requires-Dist: asttokens
Requires-Dist: attrs
Requires-Dist: beautifulsoup4
Requires-Dist: black
Requires-Dist: certifi
Requires-Dist: cfgv
Requires-Dist: charset-normalizer
Requires-Dist: click
Requires-Dist: datasketch
Requires-Dist: decorator
Requires-Dist: distlib
Requires-Dist: et_xmlfile
Requires-Dist: executing
Requires-Dist: filelock
Requires-Dist: frozenlist
Requires-Dist: fuzzywuzzy
Requires-Dist: identify
Requires-Dist: idna
Requires-Dist: ijson
Requires-Dist: ipython
Requires-Dist: jedi
Requires-Dist: langchain
Requires-Dist: langchain-core
Requires-Dist: langchain-community
Requires-Dist: langchain-experimental
Requires-Dist: langchain-anthropic
Requires-Dist: langchain-google-genai
Requires-Dist: langchain-openai
Requires-Dist: lxml
Requires-Dist: matplotlib-inline
Requires-Dist: multidict
Requires-Dist: mypy-extensions
Requires-Dist: nodeenv
Requires-Dist: numpy
Requires-Dist: openpyxl
Requires-Dist: packaging
Requires-Dist: pandas
Requires-Dist: parso
Requires-Dist: pathspec
Requires-Dist: pexpect
Requires-Dist: platformdirs
Requires-Dist: pre_commit
Requires-Dist: prompt_toolkit
Requires-Dist: propcache
Requires-Dist: psutil
Requires-Dist: ptyprocess
Requires-Dist: pure_eval
Requires-Dist: pydantic
Requires-Dist: Pygments
Requires-Dist: python-dateutil
Requires-Dist: python-dotenv
Requires-Dist: pytz
Requires-Dist: pyYAML
Requires-Dist: requests
Requires-Dist: scipy
Requires-Dist: setuptools
Requires-Dist: shortuuid
Requires-Dist: six
Requires-Dist: selenium
Requires-Dist: soupsieve
Requires-Dist: stack-data
Requires-Dist: striprtf
Requires-Dist: tokenize_rt
Requires-Dist: tqdm
Requires-Dist: traitlets
Requires-Dist: tzdata
Requires-Dist: urllib3
Requires-Dist: virtualenv
Requires-Dist: wcwidth
Requires-Dist: wheel
Requires-Dist: yarl
Requires-Dist: pymongo

# COSC425-DATA  

A repository which implements data collection of a University's academic research articles within a given time period and classifies them into categories defined by the NSF PhD research focus areas taxonomy then provides:

- Data on an article level
- Data on individual authors
- Data on category level

Currently the data is outputted in JSON format. There exists a script for converting the JSON to an Excel file but is currently somewhat finnicky.  

A more thorough offline file formatting will be implemented in the future.  

## How to install

### For non-development

1. Install the package `pip install academic-metrics`
2. Create a `.env` file in the root directory and add your OpenAI API key: `OPENAI_API_KEY=<your_openai_api_key>`  
3. Create a script `run_pipeline.py` in the root directory and add the following:  

    ```python
    from academic_metrics.runners.pipeline import PipelineRunner

    runner = PipelineRunner(ai_api_key=os.getenv("OPENAI_API_KEY"))
    runner.run_pipeline()
    ```  

### For development
1. Clone the repository:  
    - HTTPS: `git clone https://github.com/SpencerPresley/COSC425-DATA.git`
    - SSH: `git clone git@github.com:SpencerPresley/COSC425-DATA.git`
2. Navigate into the project root directory `cd COSC425-DATA` and run the setup script `python setup_environment.py`:  
    - This will install the academic_metrics package in editable mode and configure the pre-commit in `.git/hooks`
    - The git hook will format the code on commit using black

## Note

As of 11/9/2024 the pipeline runs off input files in `src/academic_metrics/data/core/input_files`  

Shortly integration of the crossref API code will be made in `academic_metrics/runners/pipeline.py` so that you can pass in your school name, data range, etc. to get your own data outputted.  

Integration for writing to a mongoDB database is currently implemented only for our use case, future integration will allow two modes:  

1. Offline output files to `src/academic_metrics/data/core/output_files`
    - In this mode the API for crossref will still work but the output files will be saved locally rather to a database.  
2. Database support. For this you will have to create a `.env` file in the root directory and add the following:  
    - `MONGO_URI=<your_mongo_uri>`
    - `MONGO_DB_NAME=<your_mongo_db_name>`
    - `MONGO_COLLECTION_NAME=<your_mongo_collection_name>`

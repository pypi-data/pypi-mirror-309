#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta


# noinspection PyPep8Naming
class TypeHelpers(metaclass=ABCMeta):
    """A collection of functions that provide C# style cast
    and instance_of operations to Python.
    """

    @staticmethod
    def Cast(value: typing.Any) -> TTarget:
        """Converts a .NET object to the target type if possible.
         Throws an exception if the cast fails.

         This method attempts to cast the object. If that fails it searches
         and
         for a suitable converter function it can use instead. Does not
         use a constructor even if there is one.

        TTarget: The type that we're casting to.

        :param value: The object to cast.
        :type value: typing.Any
        :return: cast to the correct type.
        :rtype: TTarget

        :exception InvalidCastException: If the object does not implement
        .
        """
        pass

    @staticmethod
    def IsInstanceOfType(value: typing.Any) -> bool:
        """Checks if supports the type
        . If so then
        can be cast to to gain access to more
        functions. See "Function Object)"

        TType: The type to check

        :param value: The object to check
        :type value: typing.Any
        :return: True if implements
        and false otherwise.
        :rtype: bool
        """
        pass

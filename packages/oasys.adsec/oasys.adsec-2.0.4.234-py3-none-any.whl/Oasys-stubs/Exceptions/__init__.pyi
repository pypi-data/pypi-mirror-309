#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from System import ArgumentException, Exception, SystemException
from System.Collections import IDictionary
from System.Runtime.Serialization import ISerializable


# noinspection PyPep8Naming
class OasysException(Exception, ISerializable):
    """This is the base class for all application exceptions
    that are thrown by the API. Do not throw OasysException itself;
    throw one of its more specific subclasses instead.
    """
    pass


# noinspection PyPep8Naming
class LicenceException(OasysException, ISerializable):
    """Indicates that users software licence is invalid or
    cannot be used for some reason.
    """

    def __init__(self, message: str, source: str, data: IDictionary) -> None: ...


# noinspection PyPep8Naming
class ValidationException(OasysException, ISerializable):
    """This exception is thrown when a method cannot continue
    because the data it depends on is incomplete or inconsistent.

    Functions should not throw this exception just because an argument
    is not acceptable. They should throw an "ArgumentException"
    instead.
    """

    def __init__(self, message: str, source: str, data: IDictionary) -> None: ...


# noinspection PyPep8Naming
class ApiException(OasysException, ISerializable):
    """The API throws this exception when there isn't a more specific
     "OasysException" available.
    """

    def __init__(self, message: str, source: str, data: IDictionary) -> None: ...


# noinspection PyPep8Naming
class LogicError(ArgumentException, ISerializable):
    """Any std::logic_error that cannot be mapped to a more
    specific error is converted to this type.

    Do not throw this exception deliberately. Use a more specific
    exception instead.
    """

    def __init__(self, message: str) -> None: ...


# noinspection PyPep8Naming
class RuntimeError(SystemException, ISerializable):
    """std::runtime_error and some other standard exceptions
    that cannot be mapped to a more suitable exception are converted
    to this type.

    Do not throw this exception deliberately. Use a more specific
    exception instead.
    """

    def __init__(self, message: str) -> None: ...

#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec import IWarning
from Oasys.Collections import IList
from Oasys.Profiles.Properties import ILocalAxisSecondMomentOfArea, IPrincipalAxisSecondMomentOfArea, IRadiusOfGyration, ISectionModulus, IShearAreaFactor, ITorsionConstant
from OasysUnits import Angle, Area, Length


# noinspection PyPep8Naming
class IPoint(metaclass=ABCMeta):
    """A 2D vertex in the yz-plane.
    """

    @property
    def Z(self) -> Length:
        """The local Z coordinate.

        :exception System.ArgumentException: When the value is out of range.
        """
        pass

    @Z.setter
    def Z(self, value: Length) -> None: ...

    @property
    def Y(self) -> Length:
        """The local Y coordinate.

        :exception System.ArgumentException: When the value is out of range.
        """
        pass

    @Y.setter
    def Y(self, value: Length) -> None: ...

    @staticmethod
    def Create(y: Length, z: Length) -> IPoint:
        """Creates a new "IPoint" from
         "Property Y" and
         "Property Z".

        :param y: The local Y coordinate.
        :type y: Length
        :param z: The local Z coordinate.
        :type z: Length
        :return: Point with the specified local Y and Z coordinates.
        :rtype: IPoint

        :exception System.ArgumentException: When any value is out of range.
        """
        pass


# noinspection PyPep8Naming
class IProfile(metaclass=ABCMeta):
    """Defines a cross-section's shape, size and orientation.

    See Glossary
     "IProfile" is a base class for other profiles with specific shapes,
    e.g. "Oasys.Profiles.ICircleProfile" and "Oasys.Profiles.IRectangleProfile".
    """

    @property
    def IsReflectedZ(self) -> bool:
        """Reflects the profile over the z-axis in the local coordinate system.
        """
        pass

    @IsReflectedZ.setter
    def IsReflectedZ(self, value: bool) -> None: ...

    @property
    def IsReflectedY(self) -> bool:
        """Reflects the profile over the y-axis in the local coordinate system.
        """
        pass

    @IsReflectedY.setter
    def IsReflectedY(self, value: bool) -> None: ...

    @property
    def Rotation(self) -> Angle:
        """The angle at which the profile is rotated.
        Positive rotation is anti-clockwise around the x-axis in the local coordinate system.

        :exception System.ArgumentException: When the angle is not a finite value.
        """
        pass

    @Rotation.setter
    def Rotation(self, value: Angle) -> None: ...

    @abstractmethod
    def Area(self) -> Area:
        """Calculates the profile's area.
        """
        pass

    @abstractmethod
    def LocalAxisSecondMomentOfArea(self) -> ILocalAxisSecondMomentOfArea:
        """Calculates the profile's second moment of area about local axis.
        """
        pass

    @abstractmethod
    def PrincipalAxisSecondMomentOfArea(self) -> IPrincipalAxisSecondMomentOfArea:
        """Calculates the profile's second moment of area about principal axis.
        """
        pass

    @abstractmethod
    def ShearAreaFactor(self) -> IShearAreaFactor:
        """Calculates the profile's shear area factor.
        """
        pass

    @abstractmethod
    def TorsionConstant(self) -> ITorsionConstant:
        """Calculates the profile's torsion constant.
        """
        pass

    @abstractmethod
    def ElasticModulus(self) -> ISectionModulus:
        """Calculates the profile's elastic section modulus.
        """
        pass

    @abstractmethod
    def PlasticModulus(self) -> ISectionModulus:
        """Calculates the profile's plastic section modulus.
        """
        pass

    @abstractmethod
    def ElasticCentroid(self) -> IPoint:
        """Calculates the profile's elastic centroid.
        """
        pass

    @abstractmethod
    def RadiusOfGyration(self) -> IRadiusOfGyration:
        """Calculates the profile's radius of gyration.
        """
        pass

    @abstractmethod
    def SurfaceAreaPerUnitLength(self) -> Length:
        """Calculates the profile's surface area per unit length.
        This does not include the surface area of a void in case of hollow sections.
        """
        pass

    @abstractmethod
    def Description(self) -> str:
        """Converts the profile's geometry into a string description.
        """
        pass

    @abstractmethod
    def Validate(self) -> IList[IWarning]:
        """Checks that the definition of the profile is consistent.
        A profile must be valid for its containing section to be analysed.

        :return: Warnings observed from the profile definition.
        :rtype: IList[IWarning]

        :exception Oasys.Exceptions.ValidationException: When the profile is not valid.
        """
        pass


# noinspection PyPep8Naming
class IAngleProfile(IProfile, metaclass=ABCMeta):
    """Defines an angle profile.
     "IAngleProfile" inherits "IProfile".

    The outside corner of the flange and web (min y and min z extent in the local coordinate system)is the origin of its local coordinate system.
    """

    @property
    def Web(self) -> IWeb:
        """The web of the angle profile.

        :exception System.ArgumentNullException: If Web is set to null
        """
        pass

    @Web.setter
    def Web(self, value: IWeb) -> None: ...

    @property
    def Flange(self) -> IFlange:
        """The flange of the angle profile (leg in the local y axis).

        :exception System.ArgumentNullException: If Flange is set to null
        """
        pass

    @Flange.setter
    def Flange(self, value: IFlange) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the angle profile (leg in the local z axis).

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flange: IFlange, web: IWeb) -> IAngleProfile:
        """Creates a new "IAngleProfile" profile from its
         "Property Depth",
         "Property Flange" and
         "Property Web".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flange: Defines the profile's flange.
        :type flange: IFlange
        :param web: Defines the profile's web.
        :type web: IWeb
        :return: Angle profile with the specified dimensions.
        :rtype: IAngleProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        :exception System.ArgumentNullException: If flange is null
        :exception System.ArgumentNullException: If web is null
        """
        pass


# noinspection PyPep8Naming
class IFlange(metaclass=ABCMeta):
    """A flange used in profiles.
    """

    @property
    def Thickness(self) -> Length:
        """The flange thickness.

        :exception System.ArgumentException: When the flange thickness is not a positive and finite value.
        """
        pass

    @Thickness.setter
    def Thickness(self, value: Length) -> None: ...

    @property
    def Width(self) -> Length:
        """The flange width.

        :exception System.ArgumentException: When the flange width is not a positive and finite value.
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @staticmethod
    def Create(width: Length, thickness: Length) -> IFlange:
        """Creates a new "IFlange" from its
         "Property Width" and
         "Property Thickness".

        :param width: Defines the flange width.
        :type width: Length
        :param thickness: Defines the flange thickness.
        :type thickness: Length
        :return: Flange with the specified dimensions.
        :rtype: IFlange

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IWeb(metaclass=ABCMeta):
    """Defines a profile web. Thickness only is defined. Depth is defined by the profile.
     "IWeb" is a base class for:
     "IWebConstant" and "IWebTapered".
    """

    @property
    def BottomThickness(self) -> Length:
        """The bottom thickness. Bottom is relative to the profiles local z-axis.

        :exception System.ArgumentException: When the bottom thickness is not a positive and finite value.
        """
        pass

    @property
    def TopThickness(self) -> Length:
        """The top thickness. Top is relative to the profiles local z-axis.

        :exception System.ArgumentException: When the top thickness is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class ICatalogueProfile(IProfile, metaclass=ABCMeta):
    """Defines a catalogue section profile from its unique string identifier.

    See Glossary
     "ICatalogueProfile" inherits "IProfile".
    """

    @staticmethod
    def Create(description: str) -> ICatalogueProfile:
        """Creates a new "ICatalogueProfile" profile from its unique string description.
        Valid strings can be found using the section profile helper dialog within the AdSec application.

        :param description: The profile's description.
        :type description: str
        :return: A catalogue section profile with the specified description.
        :rtype: ICatalogueProfile

        :exception System.ArgumentException: When the description string is invalid.
        :exception System.ArgumentNullException: If description is null
        """
        pass


# noinspection PyPep8Naming
class IChannelProfile(IProfile, metaclass=ABCMeta):
    """Defines a channel profile.
     "IChannelProfile" inherits "Oasys.Profiles.IProfile".

    The outside corner of the flange and web (min y and min z extent in the local coordinate system)is the origin of its local coordinate system.
    """

    @property
    def Web(self) -> IWebConstant:
        """The web of the channel profile.

        :exception System.ArgumentNullException: If Web is set to null
        """
        pass

    @Web.setter
    def Web(self, value: IWebConstant) -> None: ...

    @property
    def Flanges(self) -> IFlange:
        """The flanges of the channel profile.

        :exception System.ArgumentNullException: If Flanges is set to null
        """
        pass

    @Flanges.setter
    def Flanges(self, value: IFlange) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the channel profile.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flanges: IFlange, web: IWebConstant) -> IChannelProfile:
        """Creates a new "IChannelProfile" profile from its
         "Property Depth",
         "Property Flanges" and
         "Property Web"

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flanges: Defines the profile's flanges.
        :type flanges: IFlange
        :param web: Defines the profile's web which has constant thickness.
        :type web: IWebConstant
        :return: Channel profile with the specified dimensions.
        :rtype: IChannelProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        :exception System.ArgumentNullException: If flanges is null
        :exception System.ArgumentNullException: If web is null
        """
        pass


# noinspection PyPep8Naming
class IWebConstant(IWeb, metaclass=ABCMeta):
    """A constant web used in profiles. A constant web has the same thickness along its depth.
     "IWebConstant" inherits "IWeb".

    For tapered thickness web see "IWebTapered".
    """

    @property
    def Thickness(self) -> Length:
        """The web thickness.

        :exception System.ArgumentException: When the thickness is not a positive and finite value.
        """
        pass

    @Thickness.setter
    def Thickness(self, value: Length) -> None: ...

    @staticmethod
    def Create(thickness: Length) -> IWebConstant:
        """Creates a new "IWebConstant" from its "Property Thickness".

        :param thickness: Defines the web's thickness.
        :type thickness: Length
        :return: Constant thickness web with the specified dimension.
        :rtype: IWebConstant

        :exception System.ArgumentException: When thickness is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class ICircleHollowProfile(IProfile, metaclass=ABCMeta):
    """Defines a hollow circular section profile from
     "Property Diameter" and
     "Property WallThickness".
     "ICircleHollowProfile" inherits "IProfile".

    The hollow circle is centered at the origin of its local coordinate system.
    """

    @property
    def WallThickness(self) -> Length:
        """The wall thickness of the hollow circle.

        :exception System.ArgumentException: When the wall thickness is not a positive and finite value.
        """
        pass

    @WallThickness.setter
    def WallThickness(self, value: Length) -> None: ...

    @property
    def Diameter(self) -> Length:
        """The diameter of the hollow circle.

        :exception System.ArgumentException: When the diameter is not a positive and finite value.
        """
        pass

    @Diameter.setter
    def Diameter(self, value: Length) -> None: ...

    @staticmethod
    def Create(diameter: Length, wallThickness: Length) -> ICircleHollowProfile:
        """Creates a new "ICircleHollowProfile" profile from its
         "Property Diameter" and
         "Property WallThickness".

        :param diameter: Defines the profile's diameter.
        :type diameter: Length
        :param wallThickness: Defines the profile's wall thickness.
        :type wallThickness: Length
        :return: Hollow circle profile with the specified dimensions.
        :rtype: ICircleHollowProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class ICircleProfile(IProfile, metaclass=ABCMeta):
    """Defines a circular section profile from "Property Diameter".
     "ICircleProfile" inherits "IProfile".

    The circle is centered at the origin of its local coordinate system.
    """

    @property
    def Diameter(self) -> Length:
        """The diameter of the circle.

        :exception System.ArgumentException: When the diameter is not a positive and finite value.
        """
        pass

    @Diameter.setter
    def Diameter(self, value: Length) -> None: ...

    @staticmethod
    def Create(diameter: Length) -> ICircleProfile:
        """Creates a new "ICircleProfile" profile from its "Property Diameter".

        :param diameter: Defines the profile's diameter.
        :type diameter: Length
        :return: Circle profile with the specified diameter.
        :rtype: ICircleProfile

        :exception System.ArgumentException: When the diameter is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class ICruciformSymmetricalProfile(IProfile, metaclass=ABCMeta):
    """A cruciform section profile.
     "ICruciformSymmetricalProfile" inherits "IProfile".
    """

    @property
    def Web(self) -> IWebConstant:
        """The web (z axis leg) thickness of the cruciform.

        :exception System.ArgumentNullException: If Web is set to null
        """
        pass

    @Web.setter
    def Web(self, value: IWebConstant) -> None: ...

    @property
    def Flange(self) -> IFlange:
        """The flange (y axis leg) of the cruciform.

        :exception System.ArgumentNullException: If Flange is set to null
        """
        pass

    @Flange.setter
    def Flange(self, value: IFlange) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the profile.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flange: IFlange, web: IWebConstant) -> ICruciformSymmetricalProfile:
        """Creates a new "ICruciformSymmetricalProfile" profile from its
         "Property Depth",
         "Property Flange" and
         "Property Web".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flange: Defines the profile's flange (the y axis leg of the cruciform).
        :type flange: IFlange
        :param web: Defines the profile's web (z axis leg thickness of the cruciform).
        :type web: IWebConstant
        :return: Cruciform profile with the specified dimensions.
        :rtype: ICruciformSymmetricalProfile

        :exception System.ArgumentException: When any of the dimensions is not a positive and finite value.
        :exception System.ArgumentNullException: If flange is null
        :exception System.ArgumentNullException: If web is null
        """
        pass


# noinspection PyPep8Naming
class IEllipseHollowProfile(IProfile, metaclass=ABCMeta):
    """Defines a hollow elliptical section profile from
     "Property Depth",
     "Property Width" and
     "Property WallThickness".
     "IEllipseHollowProfile" inherits "IProfile".

    The hollow ellipse is centered at the origin of its local coordinate system.
    """

    @property
    def WallThickness(self) -> Length:
        """The wall thickness of the hollow ellipse.

        :exception System.ArgumentException: When the wall thickness is not a positive and finite value.
        """
        pass

    @WallThickness.setter
    def WallThickness(self, value: Length) -> None: ...

    @property
    def Width(self) -> Length:
        """The width of the hollow ellipse.

        :exception System.ArgumentException: When the width is not a positive and finite value.
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the hollow ellipse.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length, wallThickness: Length) -> IEllipseHollowProfile:
        """Creates a new "IEllipseHollowProfile" profile from its
         "Property Depth",
         "Property Width" and
         "Property WallThickness".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param width: Defines the profile's width.
        :type width: Length
        :param wallThickness: Defines the profile's wall thickness.
        :type wallThickness: Length
        :return: Hollow ellipse profile with the specified dimensions.
        :rtype: IEllipseHollowProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IEllipseProfile(IProfile, metaclass=ABCMeta):
    """Defines an elliptical section profile from
     "Property Depth" and
     "Property Width".
     "IEllipseProfile" inherits "IProfile".

    The ellipse is centered at the origin of its local coordinate system.
    """

    @property
    def Width(self) -> Length:
        """The width of the ellipse.

        :exception System.ArgumentException: When the width is not a positive and finite value.
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the ellipse.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length) -> IEllipseProfile:
        """Creates a new "IEllipseProfile" profile from its
         "IEllipseProfile.Depth" and
         "IEllipseProfile.Width".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param width: Defines the profile's width.
        :type width: Length
        :return: Ellipse profile with the specified dimensions.
        :rtype: IEllipseProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IGeneralCProfile(IProfile, metaclass=ABCMeta):
    """A general c section profile.
     "IGeneralCProfile" inherits "IProfile".
    """

    @property
    def Thickness(self) -> Length:
        """The thickness of the generic c section profile.

        :exception System.ArgumentException: When the thickness is not a positive and finite value.
        """
        pass

    @Thickness.setter
    def Thickness(self, value: Length) -> None: ...

    @property
    def Lip(self) -> Length:
        """The lip of the generic c section profile.

        :exception System.ArgumentException: When the lip is not a positive and finite value.
        """
        pass

    @Lip.setter
    def Lip(self, value: Length) -> None: ...

    @property
    def FlangeWidth(self) -> Length:
        """The flange width of the generic c section profile.

        :exception System.ArgumentException: When the flange width is not a positive and finite value.
        """
        pass

    @FlangeWidth.setter
    def FlangeWidth(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the generic c section profile.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flangeWidth: Length, lip: Length, thickness: Length) -> IGeneralCProfile:
        """Creates a new "IGeneralCProfile" profile from its
         "Property Depth",
         "Property FlangeWidth",
         "Property Lip" and
         "Property Thickness".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flangeWidth: Defines the profile's flange width.
        :type flangeWidth: Length
        :param lip: Defines the profile's lip.
        :type lip: Length
        :param thickness: Defines the profile's thickness.
        :type thickness: Length

        :exception System.ArgumentException: When any of the dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IGeneralZProfile(IProfile, metaclass=ABCMeta):
    """A general z section profile.
     "IGeneralZProfile" inherits "IProfile".
    """

    @property
    def Thickness(self) -> Length:
        """The thickness of the generic z section profile.

        :exception System.ArgumentException: When the thickness is not a positive and finite value.
        """
        pass

    @Thickness.setter
    def Thickness(self, value: Length) -> None: ...

    @property
    def BottomLip(self) -> Length:
        """The bottom lip of the generic z section profile.

        :exception System.ArgumentException: When the bottom lip is not a positive and finite value.
        """
        pass

    @BottomLip.setter
    def BottomLip(self, value: Length) -> None: ...

    @property
    def TopLip(self) -> Length:
        """The top lip of the generic z section profile.

        :exception System.ArgumentException: When the top lip is not a positive and finite value.
        """
        pass

    @TopLip.setter
    def TopLip(self, value: Length) -> None: ...

    @property
    def BottomFlangeWidth(self) -> Length:
        """The bottom flange width of the generic z section profile.

        :exception System.ArgumentException: When the bottom flange width is not a positive and finite value.
        """
        pass

    @BottomFlangeWidth.setter
    def BottomFlangeWidth(self, value: Length) -> None: ...

    @property
    def TopFlangeWidth(self) -> Length:
        """The top flange width of the generic z section profile.

        :exception System.ArgumentException: When the top flange width is not a positive and finite value.
        """
        pass

    @TopFlangeWidth.setter
    def TopFlangeWidth(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the generic z section profile.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, topFlangeWidth: Length, bottomFlangeWidth: Length, topLip: Length, bottomLip: Length, thickness: Length) -> IGeneralZProfile:
        """Creates a new "IGeneralZProfile" profile from its
         "Property Depth",
         "Property TopFlangeWidth",
         "Property BottomFlangeWidth",
         "Property TopLip",
         "Property BottomLip" and
         "Property Thickness".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param topFlangeWidth: Defines the profile's top flange width.
        :type topFlangeWidth: Length
        :param bottomFlangeWidth: Defines the profile's bottom flange width.
        :type bottomFlangeWidth: Length
        :param topLip: Defines the profile's top lip.
        :type topLip: Length
        :param bottomLip: Defines the profile's bottom lip.
        :type bottomLip: Length
        :param thickness: Defines the profile's thickness.
        :type thickness: Length

        :exception System.ArgumentException: When any of the dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IIBeamProfile(IProfile, metaclass=ABCMeta):
    """An IBeam section profile.
     "IIBeamProfile" inherits "IProfile".
     "IIBeamProfile" is a base class for:
     "IIBeamAsymmetricalProfile" and "IIBeamSymmetricalProfile".

    The I-beam is centered at the origin of its local coordinate system.
    """

    @property
    def BottomFlange(self) -> IFlange:
        """The bottom flange of the beam. Bottom is relative to the beam local access.

        :exception System.ArgumentNullException: If BottomFlange is set to null
        """
        pass

    @property
    def TopFlange(self) -> IFlange:
        """The top flange of the beam. Top is relative to the beam local access.

        :exception System.ArgumentNullException: If TopFlange is set to null
        """
        pass

    @property
    def Depth(self) -> Length:
        """The depth of the beam.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...


# noinspection PyPep8Naming
class IIBeamAsymmetricalProfile(IIBeamProfile, IProfile, metaclass=ABCMeta):
    """An IBeam asymmetrical profile.
     "IIBeamProfile" inherits "IIBeamProfile" and "IProfile".

    The I-beam is centered at the origin of its local coordinate system.
    """

    @property
    def Web(self) -> IWeb:
        """The web of the beam.

        :exception System.ArgumentNullException: If Web is set to null
        """
        pass

    @Web.setter
    def Web(self, value: IWeb) -> None: ...

    @property
    def BottomFlange(self) -> IFlange:
        """The bottom flange of the beam. Bottom is relative to the beam local access.

        :exception System.ArgumentNullException: If BottomFlange is set to null
        """
        pass

    @BottomFlange.setter
    def BottomFlange(self, value: IFlange) -> None: ...

    @property
    def TopFlange(self) -> IFlange:
        """The top flange of the beam. Top is relative to the beam local access.

        :exception System.ArgumentNullException: If TopFlange is set to null
        """
        pass

    @TopFlange.setter
    def TopFlange(self, value: IFlange) -> None: ...

    @staticmethod
    def Create(depth: Length, topFlange: IFlange, bottomFlange: IFlange, web: IWeb) -> IIBeamAsymmetricalProfile:
        """Creates a new "IIBeamAsymmetricalProfile" profile from its
         "IIBeamProfile.Depth",
         "Property TopFlange",
         "Property BottomFlange" and
         "Property Web".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param topFlange: Defines the profile's top flange.
        :type topFlange: IFlange
        :param bottomFlange: Defines the profile's bottom flange.
        :type bottomFlange: IFlange
        :param web: Defines the profile's web.
        :type web: IWeb
        :return: I-beam-asymmetrical profile with the specified dimensions.
        :rtype: IIBeamAsymmetricalProfile

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        :exception System.ArgumentNullException: If topFlange is null
        :exception System.ArgumentNullException: If bottomFlange is null
        :exception System.ArgumentNullException: If web is null
        """
        pass


# noinspection PyPep8Naming
class IIBeamCellularProfile(IIBeamProfile, IProfile, metaclass=ABCMeta):
    """A cellular I-beam section profile.
    It is an I-beam section profile with an opening at the centre of the web.
     "IIBeamCellularProfile" inherits "IProfile".

    The I-beam is centered at the origin of its local coordinate system.
    """

    @property
    def WebOpening(self) -> Length:
        """The size of the web opening.

        :exception System.ArgumentException: When the size is not a positive and finite value.
        """
        pass

    @WebOpening.setter
    def WebOpening(self, value: Length) -> None: ...

    @property
    def Web(self) -> IWebConstant:
        """The web of the beam.

        :exception System.ArgumentNullException: If Web is set to null
        """
        pass

    @Web.setter
    def Web(self, value: IWebConstant) -> None: ...

    @property
    def Flanges(self) -> IFlange:
        """The flange of the cellular I-beam section profile.

        :exception System.ArgumentNullException: If Flanges is set to null
        """
        pass

    @Flanges.setter
    def Flanges(self, value: IFlange) -> None: ...

    @staticmethod
    def Create(depth: Length, flanges: IFlange, web: IWebConstant, webOpening: Length) -> IIBeamCellularProfile:
        """Creates a new "IIBeamCellularProfile" profile from its
         "IIBeamProfile.Depth",
         "Property Flanges",
         "Property Web" and
         "Property WebOpening".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flanges: Defines the profile's flanges.
        :type flanges: IFlange
        :param web: Defines the profile's web.
        :type web: IWebConstant
        :param webOpening: Defines the size of the web opening.
        :type webOpening: Length

        :exception System.ArgumentException: When any of the dimensions is not a positive and finite value.
        :exception System.ArgumentNullException: If flanges is null
        :exception System.ArgumentNullException: If web is null
        """
        pass


# noinspection PyPep8Naming
class IIBeamSymmetricalProfile(IIBeamProfile, IProfile, metaclass=ABCMeta):
    """An IBeam symmetrical profile. This profile is symmetrical about its local z axis.
     "IIBeamSymmetricalProfile" inherits "IIBeamProfile" and "IProfile".

    The I-beam is centered at the origin of its local coordinate system.
    """

    @property
    def Web(self) -> IWebConstant:
        """The web of the beam.

        :exception System.ArgumentNullException: If Web is set to null
        """
        pass

    @Web.setter
    def Web(self, value: IWebConstant) -> None: ...

    @property
    def Flanges(self) -> IFlange:
        """Both flanges of the beam.

        :exception System.ArgumentNullException: If Flanges is set to null
        """
        pass

    @Flanges.setter
    def Flanges(self, value: IFlange) -> None: ...

    @staticmethod
    def Create(depth: Length, flanges: IFlange, web: IWebConstant) -> IIBeamSymmetricalProfile:
        """Creates a new "IIBeamSymmetricalProfile" profile from its
         "IIBeamProfile.Depth",
         "Property Flanges" and
         "Property Web".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flanges: Defines both the profile's flanges.
        :type flanges: IFlange
        :param web: Defines the profile's web.
        :type web: IWebConstant
        :return: I-beam-symmetrical profile with the specified dimensions.
        :rtype: IIBeamSymmetricalProfile

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        :exception System.ArgumentNullException: If flanges is null
        :exception System.ArgumentNullException: If web is null
        """
        pass


# noinspection PyPep8Naming
class IPerimeterProfile(IProfile, metaclass=ABCMeta):
    """Defines a perimeter section profile from
     "Property SolidPolygon" and
     "Property VoidPolygons".

     "IPerimeterProfile" inherits "IProfile".

    See Glossary
    """

    @property
    def VoidPolygons(self) -> IList[IPolygon]:
        """The void polygons within the solid polygon of the perimeter profile.

        :exception System.ArgumentNullException: If VoidPolygons is set to null
        """
        pass

    @VoidPolygons.setter
    def VoidPolygons(self, value: IList[IPolygon]) -> None: ...

    @property
    def SolidPolygon(self) -> IPolygon:
        """The solid polygon of the perimeter profile.

        :exception System.ArgumentNullException: If SolidPolygon is set to null
        """
        pass

    @SolidPolygon.setter
    def SolidPolygon(self, value: IPolygon) -> None: ...

    @staticmethod
    @typing.overload
    def Create(profile: IProfile) -> IPerimeterProfile:
        """Creates a new "IPerimeterProfile" profile from any other profile.

        :param profile: The profile to be converted to an equivalent perimeter profile.
        :type profile: IProfile
        :return: Perimeter profile equivalent to the given profile.
        :rtype: IPerimeterProfile

        :exception System.ArgumentNullException: If profile is null
        """
        pass

    @staticmethod
    @typing.overload
    def Create() -> IPerimeterProfile:
        """Creates a new "IPerimeterProfile" profile.

        :return: Perimeter profile with empty solid and void polygons.
        :rtype: IPerimeterProfile
        """
        pass


# noinspection PyPep8Naming
class IPolygon(metaclass=ABCMeta):
    """A 2D polygon for defining section profile geometry.
    """

    @property
    def Points(self) -> IList[IPoint]:
        """The vertices of the polygon.

        :exception System.ArgumentNullException: If Points is set to null
        """
        pass

    @Points.setter
    def Points(self, value: IList[IPoint]) -> None: ...

    @staticmethod
    def Create() -> IPolygon:
        """Creates a new "IPolygon".

        :return: Polygon with zero vertices.
        :rtype: IPolygon
        """
        pass


# noinspection PyPep8Naming
class IRectangleHollowProfile(IProfile, metaclass=ABCMeta):
    """Defines a hollow rectangular section profile from
     "Property Depth",
     "Property Flanges" and
     "Property Webs".
     "IRectangleHollowProfile" inherits "IProfile".

    The hollow rectangle is centered at the origin of its local coordinate system.
    """

    @property
    def Webs(self) -> IWebConstant:
        """The webs (side walls) of the hollow rectangle.

        :exception System.ArgumentNullException: If Webs is set to null
        """
        pass

    @Webs.setter
    def Webs(self, value: IWebConstant) -> None: ...

    @property
    def Flanges(self) -> IFlange:
        """The flanges (top and bottom) of the hollow rectangle.
        The flange width defines the profile's total width.

        :exception System.ArgumentNullException: If Flanges is set to null
        """
        pass

    @Flanges.setter
    def Flanges(self, value: IFlange) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the hollow rectangle.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, flanges: IFlange, webs: IWebConstant) -> IRectangleHollowProfile:
        """Creates a new "IRectangleHollowProfile" profile from its
         "Property Depth",
         "Property Flanges" "Property Webs".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flanges: Defines the profile's flanges.
        :type flanges: IFlange
        :param webs: Defines the profile's webs.
        :type webs: IWebConstant
        :return: Hollow rectangle profile with the specified dimensions.
        :rtype: IRectangleHollowProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        :exception System.ArgumentNullException: If flanges is null
        :exception System.ArgumentNullException: If webs is null
        """
        pass


# noinspection PyPep8Naming
class ITrapezoidProfileAbstractInterface(IProfile, metaclass=ABCMeta):
    """Defines trapezoid profile.
     "ITrapezoidProfileAbstractInterface" inherits "IProfile".
     "ITrapezoidProfileAbstractInterface" is a base class for: "IRectangleProfile" and "ITrapezoidProfile"

    The trapizoid is centered at the origin of its local coordinate system.
    """

    @property
    def Depth(self) -> Length:
        """The depth in z-axis direction of trapezoidal profile.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @property
    def BottomWidth(self) -> Length:
        """The bottom width of trapezoidal profile.

        :exception System.ArgumentException: When bottom width is not a positive and finite value.
        """
        pass

    @property
    def TopWidth(self) -> Length:
        """The top width of trapezoidal profile.

        :exception System.ArgumentException: When top width is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IRectangleProfile(ITrapezoidProfileAbstractInterface, IProfile, metaclass=ABCMeta):
    """Defines a rectangular section profile.
     "IRectangleProfile" inherits "ITrapezoidProfileAbstractInterface" and "IProfile".

    The rectangle is centered at the origin of its local coordinate system.
    """

    @property
    def Width(self) -> Length:
        """Width of the rectangle, in y-axis direction.

        :exception System.ArgumentException: When the width is not a positive and finite value.
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length) -> IRectangleProfile:
        """Creates a new "IRectangleProfile" profile from its
         "ITrapezoidProfileAbstractInterface.Depth" and
         "Property Width"

        :param depth: Defines the profile's depth
        :type depth: Length
        :param width: Defines the profile's width
        :type width: Length
        :return: Rectangular profile with the specified width.
        :rtype: IRectangleProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IRectoEllipseProfile(IProfile, metaclass=ABCMeta):
    """A rectangular section profile with elliptical corners.
     "IRectoEllipseProfile" inherits "IProfile".
    """

    @property
    def WidthFlat(self) -> Length:
        """The flat length of the profile's overall width.

        :exception System.ArgumentException: When the length is not a positive and finite value.
        """
        pass

    @WidthFlat.setter
    def WidthFlat(self, value: Length) -> None: ...

    @property
    def Width(self) -> Length:
        """The overall width of the recto-ellipse profile.

        :exception System.ArgumentException: When the width is not a positive and finite value.
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def DepthFlat(self) -> Length:
        """The flat length of the profile's overall depth.

        :exception System.ArgumentException: When the length is not a positive and finite value.
        """
        pass

    @DepthFlat.setter
    def DepthFlat(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """The overall depth of the recto-ellipse profile.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, depthFlat: Length, width: Length, widthFlat: Length) -> IRectoEllipseProfile:
        """Creates a new "IRectoEllipseProfile" profile from its
         "Property Depth",
         "Property DepthFlat",
         "Property Width" and
         "Property WidthFlat".

        :param depth: Defines the overall depth of the profile.
        :type depth: Length
        :param depthFlat: Defines the flat length of the profile's overall depth.
        :type depthFlat: Length
        :param width: Defines the overall width of the profile.
        :type width: Length
        :param widthFlat: Defines the flat length of the profile's overall width.
        :type widthFlat: Length

        :exception System.ArgumentException: When any of the dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class ISecantPileProfile(IProfile, metaclass=ABCMeta):
    """A secant pile section profile.
     "ISecantPileProfile" inherits "IProfile".
    """

    @property
    def IsWallNotSection(self) -> bool:
        """Converts the profile into a wall secant pile profile if true.
        Converts the profile into a section secant pile profile if false.
        """
        pass

    @IsWallNotSection.setter
    def IsWallNotSection(self, value: bool) -> None: ...

    @property
    def PileCount(self) -> int:
        """The number of piles in the profile.
        """
        pass

    @PileCount.setter
    def PileCount(self, value: int) -> None: ...

    @property
    def PileCentres(self) -> Length:
        """The centre to centre distance between adjacent piles.

        :exception System.ArgumentException: When the distance is not a positive and finite value.
        """
        pass

    @PileCentres.setter
    def PileCentres(self, value: Length) -> None: ...

    @property
    def Diameter(self) -> Length:
        """The diameter of the piles.

        :exception System.ArgumentException: When the diameter is not a positive and finite value.
        """
        pass

    @Diameter.setter
    def Diameter(self, value: Length) -> None: ...

    @staticmethod
    def Create(diameter: Length, pileCentres: Length, pileCount: int, isWallNotSection: bool) -> ISecantPileProfile:
        """Creates a new "ISecantPileProfile" profile from its
         "Property Diameter",
         "Property PileCentres",
         "Property PileCount" and
         "Property IsWallNotSection".

        :param diameter: Defines the diameter of the piles.
        :type diameter: Length
        :param pileCentres: Defines the centre to centre distance between adjacent piles.
        :type pileCentres: Length
        :param pileCount: Defines the number of piles in the profile.
        :type pileCount: int
        :param isWallNotSection: Converts the profile into a wall secant pile profile if true.
        Converts the profile into a section secant pile profile if false.
        :type isWallNotSection: bool

        :exception System.ArgumentException: When any of the dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class ISheetPileProfile(IProfile, metaclass=ABCMeta):
    """A sheet pile section profile.
     "ISheetPileProfile" inherits "IProfile".
    """

    @property
    def WebThickness(self) -> Length:
        """The web thickness of the sheet pile section profile.

        :exception System.ArgumentException: When the web thickness is not a positive and finite value.
        """
        pass

    @WebThickness.setter
    def WebThickness(self, value: Length) -> None: ...

    @property
    def FlangeThickness(self) -> Length:
        """The flange thickness of the sheet pile section profile.

        :exception System.ArgumentException: When the flange thickness is not a positive and finite value.
        """
        pass

    @FlangeThickness.setter
    def FlangeThickness(self, value: Length) -> None: ...

    @property
    def BottomFlangeWidth(self) -> Length:
        """The bottom flange width of the sheet pile section profile.

        :exception System.ArgumentException: When the bottom flange width is not a positive and finite value.
        """
        pass

    @BottomFlangeWidth.setter
    def BottomFlangeWidth(self, value: Length) -> None: ...

    @property
    def TopFlangeWidth(self) -> Length:
        """The top flange width of the sheet pile section profile.

        :exception System.ArgumentException: When the top flange width is not a positive and finite value.
        """
        pass

    @TopFlangeWidth.setter
    def TopFlangeWidth(self, value: Length) -> None: ...

    @property
    def Width(self) -> Length:
        """The overall width of the sheet pile section profile.

        :exception System.ArgumentException: When the overall width is not a positive and finite value.
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """The depth of the sheet pile section profile.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length, topFlangeWidth: Length, bottomFlangeWidth: Length, flangeThickness: Length, webThickness: Length) -> ISheetPileProfile:
        """Creates a new "ISheetPileProfile" profile from its
         "Property Depth",
         "Property Width",
         "Property TopFlangeWidth",
         "Property BottomFlangeWidth",
         "Property FlangeThickness" and
         "Property WebThickness".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param width: Defines the profile's overall width.
        :type width: Length
        :param topFlangeWidth: Defines the profile's top flange width.
        :type topFlangeWidth: Length
        :param bottomFlangeWidth: Defines the profile's bottom flange width.
        :type bottomFlangeWidth: Length
        :param flangeThickness: Defines the profile's flange thickness.
        :type flangeThickness: Length
        :param webThickness: Defines the profile's web thickness.
        :type webThickness: Length

        :exception System.ArgumentException: When any of the dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IStadiumProfile(IProfile, metaclass=ABCMeta):
    """A stadium section profile.
    It is a profile consisting of a rectangle whose ends are capped off with semicircles.
     "IStadiumProfile" inherits "IProfile".
    """

    @property
    def Width(self) -> Length:
        """The profile's width (diameter of the semicircles).

        :exception System.ArgumentException: When the width is not a positive and finite value.
        """
        pass

    @Width.setter
    def Width(self, value: Length) -> None: ...

    @property
    def Depth(self) -> Length:
        """The profile's overall depth considering the side length
        of the rectangle and the radii of the semicircles on the two ends.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, width: Length) -> IStadiumProfile:
        """Creates a new "IStadiumProfile" profile from its
         "Property Depth" and
         "Property Width".

        :param depth: Defines the profile's overall depth considering the
        side length of the rectangle and the radii of the semicircles on the two ends.
        :type depth: Length
        :param width: Defines the profile's width (diameter of the semicircles).
        :type width: Length

        :exception System.ArgumentException: When any of the dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class ITrapezoidProfile(ITrapezoidProfileAbstractInterface, IProfile, metaclass=ABCMeta):
    """Defines a trapezoidal profile.
     "ITrapezoidProfile" inherits "ITrapezoidProfileAbstractInterface" and "IProfile" .

    The trapezoid is centered at the origin of its local coordinate system.
    """

    @property
    def BottomWidth(self) -> Length:
        """The bottom width of trapezoidal profile. Bottom is relative to the local z-axis.

        :exception System.ArgumentException: When the width is not a positive and finite value.
        """
        pass

    @BottomWidth.setter
    def BottomWidth(self, value: Length) -> None: ...

    @property
    def TopWidth(self) -> Length:
        """The top width of trapezoidal profile. Top is relative to the local z-axis.

        :exception System.ArgumentException: When the width is not a positive and finite value.
        """
        pass

    @TopWidth.setter
    def TopWidth(self, value: Length) -> None: ...

    @staticmethod
    def Create(depth: Length, topWidth: Length, bottomWidth: Length) -> ITrapezoidProfile:
        """Creates a new "ITrapezoidProfile" profile from its
         "ITrapezoidProfileAbstractInterface.Depth" "Property TopWidth" and
         "Property BottomWidth".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param topWidth: Defines the profile's top width.
        :type topWidth: Length
        :param bottomWidth: Defines the profile's bottom width.
        :type bottomWidth: Length
        :return: Trapezoid profile with the specified dimensions.
        :rtype: ITrapezoidProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class ITSectionProfile(IProfile, metaclass=ABCMeta):
    """Defines a Tee section profile.
     "ITSectionProfile" inherits "IProfile".

    The Tee profile is centered at the origin of its local coordinate system.
    """

    @property
    def Depth(self) -> Length:
        """The depth of the T section profile.

        :exception System.ArgumentException: When the depth is not a positive and finite value.
        """
        pass

    @Depth.setter
    def Depth(self, value: Length) -> None: ...

    @property
    def Web(self) -> IWeb:
        """The web of the T section profile.

        :exception System.ArgumentNullException: If Web is set to null
        """
        pass

    @Web.setter
    def Web(self, value: IWeb) -> None: ...

    @property
    def Flange(self) -> IFlange:
        """The flange of the T section profile.

        :exception System.ArgumentNullException: If Flange is set to null
        """
        pass

    @Flange.setter
    def Flange(self, value: IFlange) -> None: ...

    @staticmethod
    def Create(depth: Length, flange: IFlange, web: IWeb) -> ITSectionProfile:
        """Creates a new "ITSectionProfile" profile from its
         "Property Depth",
         "Property Flange" and
         "Property Web".

        :param depth: Defines the profile's depth.
        :type depth: Length
        :param flange: Defines the profile's flange thickness.
        :type flange: IFlange
        :param web: Defines the profile's web thickness.
        :type web: IWeb
        :return: Tee section profile with the specified dimensions.
        :rtype: ITSectionProfile

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        :exception System.ArgumentNullException: If flange is null
        :exception System.ArgumentNullException: If web is null
        """
        pass


# noinspection PyPep8Naming
class IWebTapered(IWeb, metaclass=ABCMeta):
    """A tapered web used in profiles.
     "IWebTapered" inherits "IWeb".

    For constant thickness web see "IWebConstant".
    """

    @property
    def BottomThickness(self) -> Length:
        """The bottom thickness.

        :exception System.ArgumentException: When the bottom thickness is not a positive and finite value.
        """
        pass

    @BottomThickness.setter
    def BottomThickness(self, value: Length) -> None: ...

    @property
    def TopThickness(self) -> Length:
        """The top thickness.

        :exception System.ArgumentException: When the top thickness is not a positive and finite value.
        """
        pass

    @TopThickness.setter
    def TopThickness(self, value: Length) -> None: ...

    @staticmethod
    def Create(topThickness: Length, bottomThickness: Length) -> IWebTapered:
        """Creates a new "IWebTapered" from its
         "Property TopThickness" and
         "Property BottomThickness".

        :param topThickness: Defines the web's top thickness.
        :type topThickness: Length
        :param bottomThickness: Defines the web's bottom thickness.
        :type bottomThickness: Length
        :return: Tapered thickness web with the specified dimension.
        :rtype: IWebTapered

        :exception System.ArgumentException: When any of its dimensions is not a positive and finite value.
        """
        pass

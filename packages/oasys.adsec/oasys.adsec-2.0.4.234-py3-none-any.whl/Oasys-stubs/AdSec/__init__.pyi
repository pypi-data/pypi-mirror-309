#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec.DesignCode import IDesignCode
from Oasys.AdSec.Materials import IMaterial
from Oasys.AdSec.Mesh import ILoadCurve, ILoadSurface
from Oasys.AdSec.Reinforcement import ICover
from Oasys.AdSec.Reinforcement.Groups import IGroup
from Oasys.Collections import IList
from Oasys.Profiles import IPoint, IProfile
from OasysUnits import Angle, AxialStiffness, BendingStiffness, Curvature, Force, Length, Moment, Ratio, Strain
from System import DateTime


# noinspection PyPep8Naming
class IAdSec(metaclass=ABCMeta):
    """An AdSec application instance. It allows to set a "Oasys.AdSec.DesignCode.IDesignCode".
    The design code is used to analyse a "ISection".
    """

    @property
    def DesignCode(self) -> IDesignCode:
        """The design code to be considered for analysis.

        :exception System.ArgumentNullException: If DesignCode is set to null
        """
        pass

    @DesignCode.setter
    def DesignCode(self, value: IDesignCode) -> None: ...

    @staticmethod
    def Create(designCode: IDesignCode) -> IAdSec:
        """Creates a new "IAdSec" application instance.

        :param designCode: The design code to be considered for analysis.
        :type designCode: IDesignCode
        :return: AdSec application instance with the specified design code.
        :rtype: IAdSec

        :exception Oasys.Exceptions.LicenceException: When the licence is expired.
        :exception System.ArgumentNullException: If designCode is null
        """
        pass

    @abstractmethod
    def Analyse(self, section: ISection) -> ISolution:
        """Analyses a "ISection" for a "ISolution".

        See Glossary

        :param section: The section to be analysed.
        :type section: ISection
        :return: Solution for the specified section.
        :rtype: ISolution

        :exception System.ArgumentNullException: If section is null
        """
        pass

    @abstractmethod
    def Flatten(self, section: ISection) -> ISection:
        """Simplifies the section into an equivalent section
        that has perimeter profiles for all its section components.
        If a section component is overlayed by another sub-component,
        the former is split into separate sub-components.
        In case of a reinforced section, the reinforcement that
        lie within a section component are grouped into multiple
         "Reinforcement.Groups.ISingleBars" based on the bar diameter, material
        and the preload. When a bar ends up in a void position, it is assigned to the main section.

        :param section: The section to be converted to a perimeter section.
        :type section: ISection
        :return: A main section with subcomponents, all of which have perimeter profiles
        in the Section Coordinate System.
        See Glossary
        :rtype: ISection

        :exception System.ArgumentNullException: If section is null
        """
        pass


# noinspection PyPep8Naming
class IDeformation(metaclass=ABCMeta):
    """A deformation that can also be used as an input type for calculating
    ULS ( "IStrength") and SLS ( "IServiceability") results.

    See Glossary
    """

    @property
    def ZZ(self) -> Curvature:
        """The curvature about local z-axis caused by "ILoad.ZZ" bending moment.
        It follows the right hand grip rule about the axis.
        Positive ZZ is anti-clockwise curvature about local z-axis.

        :exception System.ArgumentException: When the curvature is not a finite value.
        """
        pass

    @ZZ.setter
    def ZZ(self, value: Curvature) -> None: ...

    @property
    def YY(self) -> Curvature:
        """The curvature about local y-axis caused by
         "ILoad.YY" bending moment. It follows the
        right hand grip rule
        about the axis. Positive YY is anti-clockwise curvature about local y-axis.

        :exception System.ArgumentException: When the curvature is not a finite value.
        """
        pass

    @YY.setter
    def YY(self, value: Curvature) -> None: ...

    @property
    def X(self) -> Strain:
        """The axial strain. Positive X indicates tension.

        :exception System.ArgumentException: When the axial strain is not a finite value.
        """
        pass

    @X.setter
    def X(self, value: Strain) -> None: ...

    @staticmethod
    def Create(x: Strain, yy: Curvature, zz: Curvature) -> IDeformation:
        """Creates a new "IDeformation" from its
         "Property X",
         "Property YY" and
         "Property ZZ" components.

        :param x: The axial strain.
        Positive x indicates tension.
        :type x: Strain
        :param yy: The curvature about local y-axis.
        Positive yy is anti-clockwise curvature about local y-axis.
        :type yy: Curvature
        :param zz: The curvature about local z-axis.
        Positive zz is anti-clockwise curvature about local z-axis.
        :type zz: Curvature
        :return: Deformation with the specified axial strain and curvature about local y and z axes.
        :rtype: IDeformation

        :exception System.ArgumentException: When any of its inputs is not a finite value.
        """
        pass

    @abstractmethod
    def StrainAt(self, position: IPoint) -> Strain:
        """Calculates axial strain at a given point.

        :exception System.ArgumentNullException: If position is null
        """
        pass


# noinspection PyPep8Naming
class ILoad(metaclass=ABCMeta):
    """Defines an axial force and bending about the local y-axis and z-axis.
    It can be used as an input type for calculating
     "IStrength" (ULS) and "IServiceability" (SLS) results.

    See Glossary
    """

    @property
    def ZZ(self) -> Moment:
        """The moment about the local z-axis. It follows the
        right hand grip rule
        about the axis. Positive value is anti-clockwise about the local z-axis.

        :exception System.ArgumentException: When value is out of range.
        """
        pass

    @ZZ.setter
    def ZZ(self, value: Moment) -> None: ...

    @property
    def YY(self) -> Moment:
        """The moment about the local y-axis. It follows the
        right hand grip rule
        about the axis. Positive value is anti-clockwise about the local y-axis.

        :exception System.ArgumentException: When value is out of range.
        """
        pass

    @YY.setter
    def YY(self, value: Moment) -> None: ...

    @property
    def X(self) -> Force:
        """The axial force.
        Tension is represented by a positive value, compression by a negative value.

        :exception System.ArgumentException: When value is out of range.
        """
        pass

    @X.setter
    def X(self, value: Force) -> None: ...

    @staticmethod
    def Create(x: Force, yy: Moment, zz: Moment) -> ILoad:
        """Creates a new "ILoad" from its
         "Property X",
         "Property YY" and
         "Property ZZ" components.

        :param x: The axial force.
        Positive x is tension.
        :type x: Force
        :param yy: The moment about local y-axis.
        Positive yy is anti-clockwise moment about local y-axis.
        :type yy: Moment
        :param zz: The moment about local z-axis.
        Positive zz is anti-clockwise moment about local z-axis.
        :type zz: Moment
        :return: Load with the specified axial force and moments about local y and z axes.
        :rtype: ILoad

        :exception System.ArgumentException: When any of its inputs is not a finite value.
        """
        pass


# noinspection PyPep8Naming
class ISection(metaclass=ABCMeta):
    """Represents a cross-section through a structural member of the specified material which
    can contain reinforcement. A section has a profile that describes its shape, size and orientation.

    See Glossary
    """

    @property
    def SubComponents(self) -> IList[ISubComponent]:
        """The sub-components contained within the section

        See Glossary

        # [C#](#tab/tabid-1)Example for creating a compound section.# [Python](#tab/tabid-2)Example for creating a compound section.***

        :exception System.ArgumentNullException: If SubComponents is set to null
        """
        pass

    @SubComponents.setter
    def SubComponents(self, value: IList[ISubComponent]) -> None: ...

    @property
    def Cover(self) -> ICover:
        """The cover to the reinforcement in the section (applicable for only concrete material).

        See Glossary
        """
        pass

    @Cover.setter
    def Cover(self, value: ICover) -> None: ...

    @property
    def ReinforcementGroups(self) -> IList[IGroup]:
        """The groups of reinforcement in the section (applicable for only concrete material).

        See Glossary

        :exception System.ArgumentNullException: If ReinforcementGroups is set to null
        """
        pass

    @ReinforcementGroups.setter
    def ReinforcementGroups(self, value: IList[IGroup]) -> None: ...

    @property
    def Material(self) -> IMaterial:
        """The material used for the "Property Profile".

        See Glossary

        :exception System.ArgumentNullException: If Material is set to null
        """
        pass

    @Material.setter
    def Material(self, value: IMaterial) -> None: ...

    @property
    def Profile(self) -> IProfile:
        """The profile that describes the section's shape, size and orientation.

        See Glossary

        :exception System.ArgumentNullException: If Profile is set to null
        """
        pass

    @Profile.setter
    def Profile(self, value: IProfile) -> None: ...

    @staticmethod
    def Create(profile: IProfile, material: IMaterial) -> ISection:
        """Creates a new "ISection".

        :param profile: Defines the section's shape, size and orientation.
        :type profile: IProfile
        :param material: Defines the section's material.
        :type material: IMaterial
        :return: Section with the specified profile and material.
        :rtype: ISection

        :exception System.ArgumentNullException: If profile is null
        :exception System.ArgumentNullException: If material is null
        """
        pass


# noinspection PyPep8Naming
class ISolution(metaclass=ABCMeta):
    """Solution for a section.

    See Glossary
    ISolution allows to calculate strength and serviceability results.
    """

    @property
    def Warnings(self) -> IList[IWarning]:
        """Warnings observed during the analysis.

        :exception System.ArgumentNullException: If Warnings is set to null
        """
        pass

    @property
    def Serviceability(self) -> IServiceability:
        """Serviceability allows to check serviceability results.

        :exception System.ArgumentNullException: If Serviceability is set to null
        """
        pass

    @property
    def Strength(self) -> IStrength:
        """Strength allows to check strength results.

        :exception System.ArgumentNullException: If Strength is set to null
        """
        pass


# noinspection PyPep8Naming
class ISubComponent(metaclass=ABCMeta):
    """A sub-component defines a section with an offset
    relative to its containing section. Sub-components can be added to "ISection.SubComponents".

    See Glossary
    A sub-component's section can have its own sub-components recursively.
    """

    @property
    def Section(self) -> ISection:
        """The section definition for the sub-component.

        :exception System.ArgumentNullException: If Section is set to null
        """
        pass

    @property
    def Offset(self) -> IPoint:
        """Offset is applied between origins of containing section and sub-component.
        The offset of the profile is in the containing section's Profile Coordinate System.
        Any rotation applied to the containing section's profile will be applied to its sub-components.
        Sub-components can also have an additional rotation for their profiles.

        :exception System.ArgumentNullException: If Offset is set to null
        """
        pass

    @staticmethod
    def Create(section: ISection, offset: IPoint) -> ISubComponent:
        """Creates a new sub-component from its section definition and
        offset relative to the containing section.

        :exception System.ArgumentNullException: If section is null
        :exception System.ArgumentNullException: If offset is null
        """
        pass


# noinspection PyPep8Naming
class IServiceability(metaclass=ABCMeta):
    """Performs serviceability analysis (SLS), for a given "ILoad" or "IDeformation".

    See Glossary
    Results are returned in "IServiceabilityResult".
    """

    @abstractmethod
    @typing.overload
    def Check(self, deformation: IDeformation) -> IServiceabilityResult:
        """Calculates serviceability results.

        :param deformation: The deformation for which
        the serviceability results are to be calculated.
        :type deformation: IDeformation
        :return: Serviceability results for the specified deformation.
        :rtype: IServiceabilityResult

        :exception System.ArgumentNullException: If deformation is null
        """
        pass

    @abstractmethod
    @typing.overload
    def Check(self, load: ILoad) -> IServiceabilityResult:
        """Calculates serviceability results.

        :param load: The load for which the serviceability results are to be calculated.
        :type load: ILoad
        :return: Serviceability results for the specified load.
        :rtype: IServiceabilityResult

        :exception System.ArgumentNullException: If load is null
        """
        pass


# noinspection PyPep8Naming
class IStrength(metaclass=ABCMeta):
    """Performs strength analysis (ULS), for a given "ILoad" or "IDeformation".

     "IStrength" can also generate the strength failure surface andthe force-moment and moment-moment interaction curves.

    Results are returned in "IStrengthResult".

    See Glossary
    """

    @abstractmethod
    @typing.overload
    def Check(self, deformation: IDeformation) -> IStrengthResult:
        """Calculates strength results.

        :param deformation: The deformation for which the strength results are to be calculated.
        :type deformation: IDeformation
        :return: Strength results for the specified deformation.
        :rtype: IStrengthResult

        :exception System.ArgumentNullException: If deformation is null
        """
        pass

    @abstractmethod
    @typing.overload
    def Check(self, load: ILoad) -> IStrengthResult:
        """Calculates strength results.

        :param load: The load for which the strength results are to be calculated.
        :type load: ILoad
        :return: Strength results for the specified load.
        :rtype: IStrengthResult

        :exception System.ArgumentNullException: If load is null
        """
        pass

    @abstractmethod
    def GetFailureSurface(self) -> ILoadSurface:
        """Generates the strength failure surface.

        :return: The failure surface, "Oasys.AdSec.Mesh.ILoadSurface".
        :rtype: ILoadSurface
        """
        pass

    @abstractmethod
    def GetForceMomentInteractionCurve(self, momentAngle: Angle) -> IList[ILoadCurve]:
        """Calculates a force-moment interaction curve.

        :param momentAngle: The moment angle, which must be in the range -180 degrees to +180 degrees.
        :type momentAngle: Angle
        :return: The force-moment interaction curve, "Oasys.AdSec.Mesh.ILoadCurve".
        :rtype: IList[ILoadCurve]

        :exception System.ArgumentException: When the magnitude of the angle is greater than 180 degrees.
        """
        pass

    @abstractmethod
    def GetMomentMomentInteractionCurve(self, axialForce: Force) -> IList[ILoadCurve]:
        """Calculates a moment-moment interaction curve.
        If the axial force is outside the capacity
        range of the section, the returned list will be empty.

        :param axialForce: The axial force.
        :type axialForce: Force
        :return: The force-moment interaction curve, "Oasys.AdSec.Mesh.ILoadCurve".
        :rtype: IList[ILoadCurve]

        :exception System.ArgumentException: When the axial force is not a finite value.
        """
        pass


# noinspection PyPep8Naming
class IWarning(metaclass=ABCMeta):
    """A notification with information about any unusual observation.
    """

    @property
    def RecordTime(self) -> DateTime:
        """Time in UTC at which the observation was recorded.
        """
        pass

    @property
    def Description(self) -> str:
        """Describes the observation.

        :exception System.ArgumentNullException: If Description is set to null
        """
        pass


# noinspection PyPep8Naming
class IVersion(metaclass=ABCMeta):

    @staticmethod
    def Api() -> str:
        """The version of the API.
        """
        pass


# noinspection PyPep8Naming
class ILicense(metaclass=ABCMeta):
    """Provides functions to activate and deactivate an AdSec API license
    """

    @staticmethod
    def ActivateLicense(license_id: str, password: str) -> ILicenseDetails:
        """Activates an AdSec API license

        :param license_id: License ID provided along with the product
        :type license_id: str
        :param password: Password provided along with the product
        :type password: str
        :return: Details of the license, product and warnings
        :rtype: ILicenseDetails

        :exception System.ArgumentNullException: If license_id is null
        :exception System.ArgumentNullException: If password is null
        """
        pass

    @staticmethod
    def DeactivateLicense() -> ILicenseDetails:
        """Deactivates the AdSec API license

        :return: Details of the license, product and warnings
        :rtype: ILicenseDetails
        """
        pass

    @staticmethod
    def CloseNetworkSession() -> bool:
        """Closes the session for a network floating license

        :return: Whether the session was closed properly
        :rtype: bool
        """
        pass


# noinspection PyPep8Naming
class ILicenseDetails(metaclass=ABCMeta):
    """Returned on operations: "Oasys.AdSec.ILicense.ActivateLicense"
    and "Oasys.AdSec.ILicense.DeactivateLicense"
    """

    @property
    def Warnings(self) -> IList[IWarning]:
        """List of warnings/messages that occured while performing an operation

        :exception System.ArgumentNullException: If Warnings is set to null
        """
        pass

    @property
    def ActionStatus(self) -> bool:
        """Whether the operation performed was successful
        """
        pass

    @property
    def LicenseInformation(self) -> ILicenseInformation:
        """Details of the product "ILicenseInformation"

        :exception System.ArgumentNullException: If LicenseInformation is set to null
        """
        pass

    @property
    def ProductInformation(self) -> IProductInformation:
        """Details of the product "IProductInformation"

        :exception System.ArgumentNullException: If ProductInformation is set to null
        """
        pass


# noinspection PyPep8Naming
class ILicenseInformation(metaclass=ABCMeta):
    """Contains information about an active license
    """

    @property
    def SessionId(self) -> str:
        """Unique ID of a session

        :exception System.ArgumentNullException: If SessionId is set to null
        """
        pass

    @property
    def TimeAllocatedUntilExpiry(self) -> str:
        """Time until expiry of the license for the network floating license

        :exception System.ArgumentNullException: If TimeAllocatedUntilExpiry is set to null
        """
        pass

    @property
    def NumberOfSeats(self) -> str:
        """Number of seats remaining for a network floating license

        :exception System.ArgumentNullException: If NumberOfSeats is set to null
        """
        pass

    @property
    def NumberOfDays(self) -> str:
        """Number of days an AdSec API license is alloted for Time-limited and Evaluation versions

        :exception System.ArgumentNullException: If NumberOfDays is set to null
        """
        pass

    @property
    def CompanyName(self) -> str:
        """Name of the company to which an AdSec API license is provided

        :exception System.ArgumentNullException: If CompanyName is set to null
        """
        pass

    @property
    def LicenseId(self) -> str:
        """Unique License ID used to activate an AdSec API license

        :exception System.ArgumentNullException: If LicenseId is set to null
        """
        pass


# noinspection PyPep8Naming
class IProductInformation(metaclass=ABCMeta):
    """Details about the product
    """

    @property
    def Version(self) -> str:
        """Version of the product

        :exception System.ArgumentNullException: If Version is set to null
        """
        pass

    @property
    def ProductName(self) -> str:
        """Name of the product

        :exception System.ArgumentNullException: If ProductName is set to null
        """
        pass


# noinspection PyPep8Naming
class ICrack(metaclass=ABCMeta):
    """A crack result. Refer to "IServiceabilityResult"

    See Glossary
    """

    @property
    def Position(self) -> IPoint:
        """The crack position.

        :exception System.ArgumentNullException: If Position is set to null
        """
        pass

    @property
    def Width(self) -> Length:
        """The crack width.
        """
        pass


# noinspection PyPep8Naming
class IMomentRange(metaclass=ABCMeta):
    """A pair of moments representing the start and end of a range.

    See Glossary
    """

    @property
    def Max(self) -> Moment:
        """The end of the range
        """
        pass

    @property
    def Min(self) -> Moment:
        """The start of the range
        """
        pass

    @abstractmethod
    def Contains(self, moment: Moment) -> bool:
        """Checks if a given moment is within (or on the boundary of) the range.

        :param moment: The moment to check
        :type moment: Moment
        """
        pass


# noinspection PyPep8Naming
class IServiceabilityResult(metaclass=ABCMeta):
    """The result of serviceability analysis (SLS) calculated by "IServiceability".
    """

    @property
    def Warnings(self) -> IList[IWarning]:
        """Warnings observed after the analysis.

        :exception System.ArgumentNullException: If Warnings is set to null
        """
        pass

    @property
    def Cracks(self) -> IList[ICrack]:
        """Crack results are calculated at bar positions or section surfaces depending
        on the Design Code specifications.
        If the applied action is outside the capacity range
        of the section, the returned list will be empty. See
         "Property MaximumWidthCrack" for the crack result
        corresponding to the maximum crack width.

        :exception System.ArgumentNullException: If Cracks is set to null
        """
        pass

    @property
    def MaximumWidthCrack(self) -> ICrack:
        """The crack result from "Property Cracks" that corresponds to the maximum crack width.
        If there are no cracks (e.g. under a compressive load, or when the applied action is outside the
        capacity range of the section) the returned maximum width crack result will be null.
        """
        pass

    @property
    def CrackingUtilisation(self) -> Ratio:
        """The ratio of the applied load (moment and axial) to the load (moment and axial)
        in the same direction that would cause the section to crack. Ratio > 1 means section is cracked.
        The section is cracked when the cracking utilisation ratio is
        greater than 1. If the applied load is outside the capacity
        range of the section, the cracking utilisation will be
        maximum double value.
        """
        pass

    @property
    def SecantStiffness(self) -> IStiffness:
        """The secant stiffness under the applied action.
        If the applied action is outside the capacity range
        of the section, the secant stiffness will be zero.

        :exception System.ArgumentNullException: If SecantStiffness is set to null
        """
        pass

    @property
    def UncrackedMomentRanges(self) -> IList[IMomentRange]:
        """The range of moments (in the direction of the applied moment,
        assuming constant axial force) over which the section remains uncracked.

        :exception System.ArgumentNullException: If UncrackedMomentRanges is set to null
        """
        pass

    @property
    def Deformation(self) -> IDeformation:
        """The section deformation under the applied action.
        If the applied load is outside the capacity range
        of the section, the returned deformation will consist
        maximum double values.

        :exception System.ArgumentNullException: If Deformation is set to null
        """
        pass

    @property
    def Load(self) -> ILoad:
        """The section load under the applied action.
        If the applied deformation is outside the capacity
        range of the section, the returned load will be zero.

        :exception System.ArgumentNullException: If Load is set to null
        """
        pass


# noinspection PyPep8Naming
class IStiffness(metaclass=ABCMeta):
    """Defines an axial stiffness, bending stiffness about local y-axis and bending
    stiffness about local z-axis.

    See Glossary
    """

    @property
    def ZZ(self) -> BendingStiffness:
        """The bending stiffness about the z-axis in the local coordinate system.
        """
        pass

    @property
    def YY(self) -> BendingStiffness:
        """The bending stiffness about the y-axis in the local coordinate system.
        """
        pass

    @property
    def X(self) -> AxialStiffness:
        """The axial stiffness.
        """
        pass


# noinspection PyPep8Naming
class IStrengthResult(metaclass=ABCMeta):
    """The result of strength analysis (ULS) calculated by "IStrength".
    """

    @property
    def DeformationUtilisation(self) -> Ratio:
        """The strength deformation utilisation is the ratio of the applied deformation to the deformation
        in the same direction that would cause the section to reach its capacity.
        Utilisation > 1 means capacity has been exceeded.
        Capacity has been exceeded when the utilisation is greater than 1.
        If the applied load is outside the capacity range of the section,
        the deformation utilisation will be the
        maximum double value.
        """
        pass

    @property
    def LoadUtilisation(self) -> Ratio:
        """The strength load utilisation is the ratio of the applied load to the load
        in the same direction that would cause the section to reach its capacity.
        Utilisation > 1 means the applied load exceeds the section capacity.
        If the applied load is outside the capacity range of the section, the
        utilisation will be greater than 1. Whereas, if the applied deformation
        exceeds the capacity, the load utilisation will be zero.
        """
        pass

    @property
    def MomentRanges(self) -> IList[IMomentRange]:
        """The range of moments (in the direction of the applied moment,
        assuming constant axial force) that are within the section's capacity.

        :exception System.ArgumentNullException: If MomentRanges is set to null
        """
        pass

    @property
    def Deformation(self) -> IDeformation:
        """The section deformation under the applied action.
        If the applied load is outside the capacity range
        of the section, the returned deformation will consist
        the maximum double values.

        :exception System.ArgumentNullException: If Deformation is set to null
        """
        pass

    @property
    def Load(self) -> ILoad:
        """The section load under the applied action.
        If the applied deformation is outside the capacity range
        of the section, the returned load will be zero.

        :exception System.ArgumentNullException: If Load is set to null
        """
        pass

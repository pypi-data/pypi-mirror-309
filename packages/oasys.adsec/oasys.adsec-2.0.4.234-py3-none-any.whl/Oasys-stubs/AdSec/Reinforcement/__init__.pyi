#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec.Materials import IReinforcement
from OasysUnits import Length


# noinspection PyPep8Naming
class ICover(metaclass=ABCMeta):
    """Defines the reinforcement-free zone around the faces of a profile.
    """

    @property
    def UniformCover(self) -> Length:
        """The cover to all faces of the profile.

        :exception System.ArgumentException: When the uniform cover is not a positive and finite value.
        """
        pass

    @UniformCover.setter
    def UniformCover(self, value: Length) -> None: ...

    @staticmethod
    def Create(uniformCover: Length) -> ICover:
        """Creates a new "ICover" based on a unform cover to all faces.

        :param uniformCover: Defines the size of the uniform cover.
        :type uniformCover: Length

        :exception System.ArgumentException: When the uniform cover is not a positive and finite value.
        """
        pass


# noinspection PyPep8Naming
class IBarBundle(metaclass=ABCMeta):
    """A bar bundle is defined by bar diameter, material and number of bars in the bundle.
    It can have one to four reinforcement bars.

    See Glossary
    """

    @property
    def CountPerBundle(self) -> int:
        """The number of reinforcement bars per bundle.

        :exception System.ArgumentException: When number of bars per bundle is less than one or greater than four.
        """
        pass

    @CountPerBundle.setter
    def CountPerBundle(self, value: int) -> None: ...

    @property
    def Diameter(self) -> Length:
        """The diameter of reinforcement bar.

        :exception System.ArgumentException: When the diameter is not a positive and finite value.
        """
        pass

    @Diameter.setter
    def Diameter(self, value: Length) -> None: ...

    @property
    def Material(self) -> IReinforcement:
        """The material of reinforcement bar.

        :exception System.ArgumentNullException: If Material is set to null
        """
        pass

    @Material.setter
    def Material(self, value: IReinforcement) -> None: ...

    @staticmethod
    @typing.overload
    def Create(material: IReinforcement, diameter: Length, countPerBundle: int) -> IBarBundle:
        """Creates a new multi-bar "IBarBundle" from a material,
        diameter of each bar and the number of bars in the bundle.

        :param material: Defines the reinforcement bar's material.
        :type material: IReinforcement
        :param diameter: Defines the reinforcement bar's diameter.
        :type diameter: Length
        :param countPerBundle: Defines the number of bars in the bundle.
        :type countPerBundle: int

        :exception System.ArgumentNullException: If material is null
        """
        pass

    @staticmethod
    @typing.overload
    def Create(material: IReinforcement, diameter: Length) -> IBarBundle:
        """Creates a new single-bar "IBarBundle" from a material and diameter.
        The "Property CountPerBundle" will be initialised to one.

        :param material: Defines the reinforcement bar's material.
        :type material: IReinforcement
        :param diameter: Defines the reinforcement bar's diameter.
        :type diameter: Length

        :exception System.ArgumentNullException: If material is null
        """
        pass

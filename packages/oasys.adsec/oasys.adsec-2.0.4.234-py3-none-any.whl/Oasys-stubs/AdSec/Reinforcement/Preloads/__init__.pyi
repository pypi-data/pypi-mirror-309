#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from OasysUnits import Force, Pressure, Strain


# noinspection PyPep8Naming
class IPreload(metaclass=ABCMeta):
    """A preload can be applied to bars as a force, a stress or a strain.

    See Glossary
    """
    pass


# noinspection PyPep8Naming
class IPreForce(IPreload, metaclass=ABCMeta):
    """A preload of type force per reinforcement bar.
    """

    @property
    def Force(self) -> Force:
        """The pre-force per reinforcement bar.
        Positive force is tension.

        :exception System.ArgumentException: When the force is not a finite value.
        """
        pass

    @Force.setter
    def Force(self, value: Force) -> None: ...

    @staticmethod
    def Create(force: Force) -> IPreForce:
        """Creates a new "IPreForce" preload from "Property Force".

        :param force: The pre-force per reinforcement bar.
        Positive force is tension.
        :type force: Force
        :return: Force preload with the specified force per reinforcement bar.
        :rtype: IPreForce

        :exception System.ArgumentException: When the force is not a finite value.
        """
        pass


# noinspection PyPep8Naming
class IPreStrain(IPreload, metaclass=ABCMeta):
    """A preload of type strain.
    """

    @property
    def Strain(self) -> Strain:
        """The pre-strain in reinforcement bar.
        Positive strain indicates tension.

        :exception System.ArgumentException: When the strain is not a finite value.
        """
        pass

    @Strain.setter
    def Strain(self, value: Strain) -> None: ...

    @staticmethod
    def Create(strain: Strain) -> IPreStrain:
        """Creates a new "IPreStrain" preload from "Property Strain".

        :param strain: The pre-strain in the reinforcement bars.
        Positive strain indicates tension.
        :type strain: Strain
        :return: Strain preload with the specified strain.
        :rtype: IPreStrain

        :exception System.ArgumentException: When the strain is not a finite value.
        """
        pass


# noinspection PyPep8Naming
class IPreStress(IPreload, metaclass=ABCMeta):
    """A preload of type stress.
    """

    @property
    def Stress(self) -> Pressure:
        """The pre-stress in reinforcement bar.
        Positive stress indicates tension.

        :exception System.ArgumentException: When the stress is not a finite value.
        """
        pass

    @Stress.setter
    def Stress(self, value: Pressure) -> None: ...

    @staticmethod
    def Create(stress: Pressure) -> IPreStress:
        """Creates a new "IPreStress" preload from "Property Stress".

        :param stress: The pre-stress in the reinforcement bars.
        Positive stress indicates tension.
        :type stress: Pressure
        :return: Stress preload with the specified stress.
        :rtype: IPreStress

        :exception System.ArgumentException: When the stress is not a finite value.
        """
        pass

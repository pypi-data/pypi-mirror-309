#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from Oasys.AdSec import IWarning
from Oasys.AdSec.Reinforcement import IBarBundle
from Oasys.AdSec.Reinforcement.Layers import ILayer
from Oasys.AdSec.Reinforcement.Preloads import IPreload
from Oasys.Collections import IList
from Oasys.Geometry.Paths2D import IPath
from Oasys.Profiles import IPoint
from OasysUnits import Angle, Length


# noinspection PyPep8Naming
class IGroup(metaclass=ABCMeta):
    """Defines a group of reinforcement.

    See Glossary
    An abstract base class of all reinforcement group types.
    """

    @abstractmethod
    def Validate(self) -> IList[IWarning]:
        """Checks that the definition of the group is consistent.
        A group must be valid for its containing section to be analysed.

        :return: Warnings observed from the reinforcement group definition.
        :rtype: IList[IWarning]

        :exception Oasys.Exceptions.ValidationException: When the group is not valid.
        """
        pass


# noinspection PyPep8Naming
class ILongitudinalGroup(IGroup, metaclass=ABCMeta):
    """Defines a group of longitudinal reinforcement.
    """

    @property
    def Preload(self) -> IPreload:
        """The preload for the reinforcement group.
        It can be applied to bars as a force, a stress or a strain.

        :exception System.ArgumentNullException: If Preload is set to null
        """
        pass

    @Preload.setter
    def Preload(self, value: IPreload) -> None: ...


# noinspection PyPep8Naming
class IArcGroup(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """An arc reinforcement group.
     "IArcGroup" contains a "Oasys.AdSec.Reinforcement.Layers.ILayer", which defines the reinforcement bundling and spacing along the line. This group doesn't support multiple layers of reinforcement.
    """

    @property
    def Layer(self) -> ILayer:
        """The layer of reinforcement to be positioned along the arc.

        :exception System.ArgumentNullException: If Layer is set to null
        """
        pass

    @Layer.setter
    def Layer(self, value: ILayer) -> None: ...

    @property
    def SweepAngle(self) -> Angle:
        """The angle sweeped by the arc from its start angle.
        Positive angle is considered anti-clockwise.

        :exception System.ArgumentException: When the angle is not between +360.0 and -360.0 degrees.
        """
        pass

    @SweepAngle.setter
    def SweepAngle(self, value: Angle) -> None: ...

    @property
    def StartAngle(self) -> Angle:
        """The start angle of the arc.
        Positive angle is considered anti-clockwise.

        :exception System.ArgumentException: When the angle is not a finite value.
        """
        pass

    @StartAngle.setter
    def StartAngle(self, value: Angle) -> None: ...

    @property
    def Radius(self) -> Length:
        """The radius of the arc.

        :exception System.ArgumentException: When the radius is not a positive and finite value.
        """
        pass

    @Radius.setter
    def Radius(self, value: Length) -> None: ...

    @property
    def Centre(self) -> IPoint:
        """The centre of the arc.

        :exception System.ArgumentNullException: If Centre is set to null
        """
        pass

    @Centre.setter
    def Centre(self, value: IPoint) -> None: ...

    @staticmethod
    def Create(centre: IPoint, radius: Length, startAngle: Angle, sweepAngle: Angle, layer: ILayer) -> IArcGroup:
        """Creates a new "IArcGroup" reinforcement group from its
         "Property Centre",
         "Property Radius",
         "Property StartAngle",
         "Property SweepAngle" and
         "Property Layer".

        :param centre: Defines the arc's centre.
        :type centre: IPoint
        :param radius: Defines the arc's radius.
        :type radius: Length
        :param startAngle: Defines the arc's start angle.
        Positive angle is considered anti-clockwise.
        :type startAngle: Angle
        :param sweepAngle: Defines the arc's sweep angle.
        Positive angle is considered anti-clockwise.
        :type sweepAngle: Angle
        :param layer: Defines the bar (or bar bundles) that will be positioned along the arc.
        :type layer: ILayer
        :return: A new arc reinforcement group.
        :rtype: IArcGroup

        :exception System.ArgumentException: When the radius is not a positive and finite value.
        :exception System.ArgumentException: When the sweep angle is not between +360.0 and -360.0 degrees.
        :exception System.ArgumentException: When the start angle is not a finite value.
        :exception System.ArgumentNullException: If centre is null
        :exception System.ArgumentNullException: If layer is null
        """
        pass


# noinspection PyPep8Naming
class ICircleGroup(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """A circular reinforcement group.
     "ICircleGroup" contains a "Oasys.AdSec.Reinforcement.Layers.ILayer", which defines the reinforcement bundling and spacing along the line. This group doesn't support multiple layers of reinforcement.
    """

    @property
    def Layer(self) -> ILayer:
        """The layer of reinforcement to be positioned around the circle.

        :exception System.ArgumentNullException: If Layer is set to null
        """
        pass

    @Layer.setter
    def Layer(self, value: ILayer) -> None: ...

    @property
    def StartAngle(self) -> Angle:
        """The start angle of the circle.
        Positive angle is considered anti-clockwise.

        :exception System.ArgumentException: When the angle is not a finite value.
        """
        pass

    @StartAngle.setter
    def StartAngle(self, value: Angle) -> None: ...

    @property
    def Radius(self) -> Length:
        """The radius of the circle.

        :exception System.ArgumentException: When the radius is not a positive and finite value.
        """
        pass

    @Radius.setter
    def Radius(self, value: Length) -> None: ...

    @property
    def Centre(self) -> IPoint:
        """The centre of the circle.

        :exception System.ArgumentNullException: If Centre is set to null
        """
        pass

    @Centre.setter
    def Centre(self, value: IPoint) -> None: ...

    @staticmethod
    def Create(centre: IPoint, radius: Length, startAngle: Angle, layer: ILayer) -> ICircleGroup:
        """Creates a new "ICircleGroup" reinforcement group from its
         "Property Centre",
         "Property Radius",
         "Property StartAngle" and
         "Property Layer".

        :param centre: Defines the circle's centre.
        :type centre: IPoint
        :param radius: Defines the circle's radius.
        :type radius: Length
        :param startAngle: Defines the circle's start angle.
        Positive angle is considered anti-clockwise.
        :type startAngle: Angle
        :param layer: Defines the bar (or bar bundles) that will be positioned around the circle.
        :type layer: ILayer
        :return: A new circular reinforcement group.
        :rtype: ICircleGroup

        :exception System.ArgumentException: When the radius is not a positive and finite value.
        :exception System.ArgumentException: When the start angle is not a finite value.
        :exception System.ArgumentNullException: If centre is null
        :exception System.ArgumentNullException: If layer is null
        """
        pass


# noinspection PyPep8Naming
class ITransverseGroup(IGroup, metaclass=ABCMeta):
    """Defines a group of transverse reinforcement (e.g. shear links).
    """

    @property
    def BarBundle(self) -> IBarBundle:
        """Reinforcement bar of a transverse group.

        :exception System.ArgumentNullException: If BarBundle is set to null
        """
        pass

    @BarBundle.setter
    def BarBundle(self, value: IBarBundle) -> None: ...


# noinspection PyPep8Naming
class ILineGroup(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """A linear reinforcement group that contains a
    layer of reinforcement bars or bundles of bars arranged in a straight line.
    The length of "ILineGroup" is defined by the positions of the first
    and last bars or bundles of bars, "Property FirstBarPosition" and "Property LastBarPosition".
     "ILineGroup" contains a "Oasys.AdSec.Reinforcement.Layers.ILayer", which defines the reinforcement bundling and spacing along the line. This group doesn't support multiple layers of reinforcement.
    """

    @property
    def Layer(self) -> ILayer:
        """The layer of reinforcement to be positioned along the line.

        :exception System.ArgumentNullException: If Layer is set to null
        """
        pass

    @Layer.setter
    def Layer(self, value: ILayer) -> None: ...

    @property
    def LastBarPosition(self) -> IPoint:
        """Position of the centre of the last reinforcement bar or bundle of bars,
        in the local coordinate system of the containing "ISection".

        :exception System.ArgumentNullException: If LastBarPosition is set to null
        """
        pass

    @LastBarPosition.setter
    def LastBarPosition(self, value: IPoint) -> None: ...

    @property
    def FirstBarPosition(self) -> IPoint:
        """Position of the centre of the first reinforcement bar or bundle of bars,
        in the local coordinate system of the containing "ISection".

        :exception System.ArgumentNullException: If FirstBarPosition is set to null
        """
        pass

    @FirstBarPosition.setter
    def FirstBarPosition(self, value: IPoint) -> None: ...

    @staticmethod
    def Create(firstBarPosition: IPoint, lastBarPosition: IPoint, layer: ILayer) -> ILineGroup:
        """Creates a new "ILineGroup" reinforcement group from its
         "Property FirstBarPosition",
         "Property LastBarPosition" and
         "Property Layer".

        :param firstBarPosition: Defines the position of the first reinforcement bar in the line group.
        :type firstBarPosition: IPoint
        :param lastBarPosition: Defines the position of the last reinforcement bar in the line group.
        :type lastBarPosition: IPoint
        :param layer: Defines the bar (or bar bundles) that will be positioned along the line.
        :type layer: ILayer
        :return: A new line reinforcement group.
        :rtype: ILineGroup

        :exception System.ArgumentNullException: If firstBarPosition is null
        :exception System.ArgumentNullException: If lastBarPosition is null
        :exception System.ArgumentNullException: If layer is null
        """
        pass


# noinspection PyPep8Naming
class ILinkGroup(ITransverseGroup, IGroup, metaclass=ABCMeta):
    """A reinforcement group that defines shear link (or stirrup) for a "ISection".
    """

    @staticmethod
    def Create(barBundle: IBarBundle) -> ILinkGroup:
        """Creates a new "ILinkGroup" reinforcement from its
         "ITransverseGroup.BarBundle".

        :exception System.ArgumentNullException: If barBundle is null
        """
        pass


# noinspection PyPep8Naming
class IPerimeterGroup(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """A reinforcement group for placing bars around the perimeter of a profile.
    """

    @property
    def Layers(self) -> IList[ILayer]:
        """Layers of reinforcement to be positioned along the perimeter of a profile.
        In case a layer is defined by specifying the bar count, all the bars are distributed along
        the perimeter of the profile. Minimum number of bars in a layer is the number of vertices of
        the profile's shape.

        :exception System.ArgumentNullException: If Layers is set to null
        """
        pass

    @Layers.setter
    def Layers(self, value: IList[ILayer]) -> None: ...

    @staticmethod
    def Create() -> IPerimeterGroup:
        """Creates a new "IPerimeterGroup" reinforcement group.
        """
        pass


# noinspection PyPep8Naming
class IPerimeterLinkGroup(ITransverseGroup, IGroup, metaclass=ABCMeta):
    """A transverse reinforcement group defined by a list of
     "Oasys.Geometry.Paths2D.IPathSegment{Oasys.Profiles.IPoint}".
    """

    @property
    def LinkPath(self) -> IPath[IPoint]:
        """The path along which the perimeter link reinforcement group is created.

        :exception System.ArgumentNullException: If LinkPath is set to null
        """
        pass


# noinspection PyPep8Naming
class ISingleBars(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """A reinforcement group contains a singe bar bundle located on the profile at one or more positions.
    """

    @property
    def BarBundle(self) -> IBarBundle:
        """The bar (or bundle of bars) that will be placed at each position.

        :exception System.ArgumentNullException: If BarBundle is set to null
        """
        pass

    @BarBundle.setter
    def BarBundle(self, value: IBarBundle) -> None: ...

    @property
    def Positions(self) -> IList[IPoint]:
        """The positions for the "Property BarBundle"s.

        :exception System.ArgumentNullException: If Positions is set to null
        """
        pass

    @Positions.setter
    def Positions(self, value: IList[IPoint]) -> None: ...

    @staticmethod
    def Create(barBundle: IBarBundle) -> ISingleBars:
        """Creates a new "ISingleBars" reinforcement group from its "Property BarBundle".

        :param barBundle: Defines the bar (or bundle of bars) that will be placed at each position.
        :type barBundle: IBarBundle
        :return: Reinforcement group with empty list of "Property Positions".
        Reinforcement bars are added to the group on adding positions.
        :rtype: ISingleBars

        :exception System.ArgumentNullException: If barBundle is null
        """
        pass


# noinspection PyPep8Naming
class IFace(metaclass=ABCMeta):
    """Face of a profile.
    """
    pass


# noinspection PyPep8Naming
class ITemplateGroup(ILongitudinalGroup, IGroup, metaclass=ABCMeta):
    """Defines reinforcement along a profile face. It is
    applicable for "Oasys.Profiles.IRectangleProfile",
     "Oasys.Profiles.ITrapezoidProfile",
     "Oasys.Profiles.ITSectionProfile",
     "Oasys.Profiles.IIBeamSymmetricalProfile",
     "Oasys.Profiles.IIBeamAsymmetricalProfile" and
     "Oasys.Profiles.IAngleProfile" profiles.
    """

    @property
    def Layers(self) -> IList[ILayer]:
        """Layers of reinforcement to be positioned along the face of a profile.

        :exception System.ArgumentNullException: If Layers is set to null
        """
        pass

    @Layers.setter
    def Layers(self, value: IList[ILayer]) -> None: ...

    @staticmethod
    def Create(face: IFace) -> ITemplateGroup:
        """Creates a new "ITemplateGroup" reinforcement group along the specified profile face.

        :exception System.ArgumentNullException: If face is null
        """
        pass


    # noinspection PyPep8Naming
    class Face(metaclass=ABCMeta):
        """Face of a profile along which a template reinforcement group can be defined.
        """

        Top: IFace = ...

        Bottom: IFace = ...

        LeftSide: IFace = ...

        RightSide: IFace = ...

        Sides: IFace = ...

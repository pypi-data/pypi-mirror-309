[build-system]
requires = ["setuptools", "numpy", "versioningit ~= 1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyfhiaims"
authors = [
    { name = "Thomas Purcell", email = "purcell@fhi-berlin.mpg.de" },
    { name = "Andrei Sobolev", email = "sobolev@ms1p.org" }
]
maintainers = [
    { name = "Thomas Purcell", email = "purcell@fhi-berlin.mpg.de" },
    { name = "Andrei Sobolev", email = "sobolev@ms1p.org" }
]
description = "An FHI-aims official Python package"
readme = "README.md"
requires-python = ">=3.10"
keywords = ['electronic structure', 'FHI-aims']
license = { text = "MIT" }
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "numpy<2.0",
    "scipy>=1.1.1",
    "monty~=2024.10.21",
    "ase~=3.23"
]
dynamic = ["version"]

[project.optional-dependencies]
tests = [
    "pyyaml",
    "pytest>=6.0",
    "pytest-xdist>=1.31",
    "pytest-cov>=2.8"
]
dev = [
    "pre-commit>=2.12.1",
]

[project.urls]
repository = "https://gitlab.com/FHI-aims-club/pyfhiaims/"
#homepage="https://vibes-developers.gitlab.io/vibes/"
#documentation="https://vibes-developers.gitlab.io/vibes/Documentation/0_intro"

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["."] by default)
namespaces = true  # to disable scanning PEP 420 namespaces (true by default)

[tool.setuptools.dynamic]
version = {attr = "pyfhiaims.__version__"}

[tool.mypy]
ignore_missing_imports = true
no_strict_optional = true

[tool.black]
target-version = ['py39']

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib"
filterwarnings = ["ignore"]

[tool.ruff]
target-version = "py39"
lint.select = ["ALL"]
lint.ignore = [
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN101",  # missing self type annotation
    "ANN102",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN206",
    "ANN401",
    "ARG001",  # unused method argument
    "ARG002",  # unused method argument
    "A001",
    "A002",
    "B006",
    "B028",
    "BLE001",
    "C408",    # Unnecessary (dict/list/tuple) call - remove call
    "C416",
    "C901",    # function too complex
    "COM812",  # trailing comma missing
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    "D203",
    "D205",
    "D212",
    "D400",
    "D401",
    "D404",
    "D415",
    "D417",
    "DTZ",     # datetime-tz-now
    "EM",      # exception message must not use f-string literal
    "ERA001",  # found commented out code
    "EXE002",
    "E731",
    "E741",
    "FBT001",
    "FBT002",
    "FBT003",
    "FIX002",
    "G004",    # logging uses fstring
    "INP001",
    "ISC001",
    "ISC003",
    "NPY002",
    "N802",
    "N803",
    "N806",
    "N813",
    "N816",
    "PD011",   # pandas-use-of-dot-values
    "PD901",
    "PERF203", # try-except-in-loop
    "PERF401", # try-except-in-loop
    "PLR",     # pylint-refactor
    "PLW2901",
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT006",   # pytest-parametrize-names-wrong-type
    "PT013",   # pytest-incorrect-pytest-import
    "PTH",     # prefer Pathlib to os.path
    "PYI024",
    "RET503",
    "RUF005",
    "RUF012",  # implicit-optional
    "RUF013",  # implicit-optional
    "RUF015",
    "SIM102",
    "SIM105",
    "SIM108",
    "SIM115",
    "S101",
    "S110",
    "S301",
    "S324",    # use of insecure hash function
    "S507",    # paramiko auto trust
    "S603",
    "S605",
    "S607",
    "SLF",     # private member accessed outside class
    "T201",
    "TCH002",
    "TD",      # TODOs
    "TRY002",
    "TRY003",  # long message outside exception class
    "TRY300",
    "TRY301",
]
lint.isort.known-first-party = ["pyaims"]

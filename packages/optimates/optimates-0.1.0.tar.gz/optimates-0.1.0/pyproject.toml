[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "optimates"
dynamic = ["version"]
description = "A library for discrete optimization and search."
authors = [
    { name = "Jeremy Silver", email = "jeremys@nessiness.com" }
]
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["optimization", "optimisation", "search"]
classifiers = [
  "Programming Language :: Python"
]

[tool.commitizen]
tag_format = "v$major.$minor.$patch"

[tool.hatch.build.targets.sdist]
exclude = [".venv", "TODO.*"]

[tool.hatch.version]
path = "optimates/__init__.py"

[tool.hatch.envs.lint]
dependencies = [
  "mypy>=1.13",
  "py-gadzooks>=0.2.9",
  "ruff>=0.6",
  "pytest-mypy",
  "vermin>=1.6",
]

[tool.hatch.envs.lint.scripts]
# linting
run-ruff = "ruff check {args:optimates test.py}"
# ensure compatibility with Py3.9 and higher
run-vermin = "vermin {args:.}"
# type-checking
run-mypy = "mypy --install-types --non-interactive {args:optimates test.py}"
# print info about lines of code
run-loc-summarize = "gadzooks loc-summarize optimates"
# print out formatter diffs
run-format = "gadzooks check-format optimates --formatter yapf --ignore-patterns '\\s*'"
all = ["run-ruff", "run-vermin", "run-mypy", "run-loc-summarize"]

[tool.hatch.envs.test]
dependencies = [
    "pytest",
    "pytest-cov",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:test.py}"
test-debug = "pytest --pdb {args:test.py}"
cov-report = ["- coverage combine", "coverage report", "coverage html"]
cov = ["test", "cov-report"]

[[tool.hatch.envs.test.matrix]]
python = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.badge]
dependencies = [
  "coverage",
  "genbadge[tests,coverage]"
]

[tool.hatch.envs.badge.scripts]
badge-cov = ["coverage xml", "genbadge coverage -i coverage.xml"]
badges = ["badge-cov"]

[tool.hatch.publish.index]
disable = true

[tool.coverage.run]
source_pkgs = ["optimates"]
branch = true
parallel = true

[tool.coverage.report]
skip_covered = true
show_missing = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
exclude = ["old/", "tmp.*"]
warn_unused_configs = true
strict = true

[[tool.mypy.overrides]]
module = "test"
strict = false
disable_error_code = ["no-untyped-call", "no-untyped-def"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--verbose --cov"
testpaths = ["test.py"]

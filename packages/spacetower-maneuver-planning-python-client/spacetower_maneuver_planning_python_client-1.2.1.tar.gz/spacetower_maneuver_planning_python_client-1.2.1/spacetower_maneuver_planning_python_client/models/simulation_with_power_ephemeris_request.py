# coding: utf-8

"""
    Maneuver Planning API

    Maneuver Planning API

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_maneuver_planning_python_client.models.attitude_ephemeris_request import AttitudeEphemerisRequest
from spacetower_maneuver_planning_python_client.models.battery_power_ephemeris_request import BatteryPowerEphemerisRequest
from spacetower_maneuver_planning_python_client.models.mass_ephemeris_request import MassEphemerisRequest
from spacetower_maneuver_planning_python_client.models.mean_orbit_ephemeris_request import MeanOrbitEphemerisRequest
from spacetower_maneuver_planning_python_client.models.osculating_orbit_ephemeris_request import OsculatingOrbitEphemerisRequest
from spacetower_maneuver_planning_python_client.models.thrust_vector_ephemeris_request import ThrustVectorEphemerisRequest
from typing import Optional, Set
from typing_extensions import Self

class SimulationWithPowerEphemerisRequest(BaseModel):
    """
    SimulationWithPowerEphemerisRequest
    """ # noqa: E501
    attitude_ephemeris_request: Optional[AttitudeEphemerisRequest] = Field(default=None, alias="attitudeEphemerisRequest")
    osculating_orbit_ephemeris_request: Optional[OsculatingOrbitEphemerisRequest] = Field(default=None, alias="osculatingOrbitEphemerisRequest")
    mean_orbit_ephemeris_request: Optional[MeanOrbitEphemerisRequest] = Field(default=None, alias="meanOrbitEphemerisRequest")
    thrust_vector_ephemeris_request: Optional[ThrustVectorEphemerisRequest] = Field(default=None, alias="thrustVectorEphemerisRequest")
    mass_ephemeris_request: Optional[MassEphemerisRequest] = Field(default=None, alias="massEphemerisRequest")
    battery_power_ephemeris_request: Optional[BatteryPowerEphemerisRequest] = Field(default=None, alias="batteryPowerEphemerisRequest")
    __properties: ClassVar[List[str]] = ["attitudeEphemerisRequest", "osculatingOrbitEphemerisRequest", "meanOrbitEphemerisRequest", "thrustVectorEphemerisRequest", "massEphemerisRequest", "batteryPowerEphemerisRequest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulationWithPowerEphemerisRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attitude_ephemeris_request
        if self.attitude_ephemeris_request:
            _dict['attitudeEphemerisRequest'] = self.attitude_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of osculating_orbit_ephemeris_request
        if self.osculating_orbit_ephemeris_request:
            _dict['osculatingOrbitEphemerisRequest'] = self.osculating_orbit_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mean_orbit_ephemeris_request
        if self.mean_orbit_ephemeris_request:
            _dict['meanOrbitEphemerisRequest'] = self.mean_orbit_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thrust_vector_ephemeris_request
        if self.thrust_vector_ephemeris_request:
            _dict['thrustVectorEphemerisRequest'] = self.thrust_vector_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mass_ephemeris_request
        if self.mass_ephemeris_request:
            _dict['massEphemerisRequest'] = self.mass_ephemeris_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of battery_power_ephemeris_request
        if self.battery_power_ephemeris_request:
            _dict['batteryPowerEphemerisRequest'] = self.battery_power_ephemeris_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulationWithPowerEphemerisRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attitudeEphemerisRequest": AttitudeEphemerisRequest.from_dict(obj["attitudeEphemerisRequest"]) if obj.get("attitudeEphemerisRequest") is not None else None,
            "osculatingOrbitEphemerisRequest": OsculatingOrbitEphemerisRequest.from_dict(obj["osculatingOrbitEphemerisRequest"]) if obj.get("osculatingOrbitEphemerisRequest") is not None else None,
            "meanOrbitEphemerisRequest": MeanOrbitEphemerisRequest.from_dict(obj["meanOrbitEphemerisRequest"]) if obj.get("meanOrbitEphemerisRequest") is not None else None,
            "thrustVectorEphemerisRequest": ThrustVectorEphemerisRequest.from_dict(obj["thrustVectorEphemerisRequest"]) if obj.get("thrustVectorEphemerisRequest") is not None else None,
            "massEphemerisRequest": MassEphemerisRequest.from_dict(obj["massEphemerisRequest"]) if obj.get("massEphemerisRequest") is not None else None,
            "batteryPowerEphemerisRequest": BatteryPowerEphemerisRequest.from_dict(obj["batteryPowerEphemerisRequest"]) if obj.get("batteryPowerEphemerisRequest") is not None else None
        })
        return _obj



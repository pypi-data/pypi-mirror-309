# coding: utf-8

"""
    Maneuver Planning API

    Maneuver Planning API

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_maneuver_planning_python_client.models.box_object_without_power_system import BoxObjectWithoutPowerSystem
from spacetower_maneuver_planning_python_client.models.maneuver_strategy import ManeuverStrategy
from spacetower_maneuver_planning_python_client.models.maneuver_target import ManeuverTarget
from spacetower_maneuver_planning_python_client.models.orbit import Orbit
from spacetower_maneuver_planning_python_client.models.simulation_configuration import SimulationConfiguration
from spacetower_maneuver_planning_python_client.models.simulation_without_power_ephemeris_request import SimulationWithoutPowerEphemerisRequest
from typing import Optional, Set
from typing_extensions import Self

class OrbitalTransferWithoutPowerSystemRequest(BaseModel):
    """
    Input parameters for computing a maneuver to change mean orbital elements sma, eccentricity, inclination while also simulating the power system of the spacecraft 
    """ # noqa: E501
    initial_orbit: Orbit = Field(alias="initialOrbit")
    maneuver_target: ManeuverTarget = Field(alias="maneuverTarget")
    maneuver_strategy: ManeuverStrategy = Field(alias="maneuverStrategy")
    simulation_configuration: Optional[SimulationConfiguration] = Field(default=None, alias="simulationConfiguration")
    data: Optional[Dict[str, StrictStr]] = Field(default=None, description="References to the data to be used during the computation")
    space_object: BoxObjectWithoutPowerSystem = Field(alias="spaceObject")
    ephemeris_generation_requests: Optional[SimulationWithoutPowerEphemerisRequest] = Field(default=None, alias="ephemerisGenerationRequests")
    __properties: ClassVar[List[str]] = ["initialOrbit", "maneuverTarget", "maneuverStrategy", "simulationConfiguration", "data", "spaceObject", "ephemerisGenerationRequests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrbitalTransferWithoutPowerSystemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initial_orbit
        if self.initial_orbit:
            _dict['initialOrbit'] = self.initial_orbit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maneuver_target
        if self.maneuver_target:
            _dict['maneuverTarget'] = self.maneuver_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maneuver_strategy
        if self.maneuver_strategy:
            _dict['maneuverStrategy'] = self.maneuver_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simulation_configuration
        if self.simulation_configuration:
            _dict['simulationConfiguration'] = self.simulation_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space_object
        if self.space_object:
            _dict['spaceObject'] = self.space_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ephemeris_generation_requests
        if self.ephemeris_generation_requests:
            _dict['ephemerisGenerationRequests'] = self.ephemeris_generation_requests.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrbitalTransferWithoutPowerSystemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initialOrbit": Orbit.from_dict(obj["initialOrbit"]) if obj.get("initialOrbit") is not None else None,
            "maneuverTarget": ManeuverTarget.from_dict(obj["maneuverTarget"]) if obj.get("maneuverTarget") is not None else None,
            "maneuverStrategy": ManeuverStrategy.from_dict(obj["maneuverStrategy"]) if obj.get("maneuverStrategy") is not None else None,
            "simulationConfiguration": SimulationConfiguration.from_dict(obj["simulationConfiguration"]) if obj.get("simulationConfiguration") is not None else None,
            "data": obj.get("data"),
            "spaceObject": BoxObjectWithoutPowerSystem.from_dict(obj["spaceObject"]) if obj.get("spaceObject") is not None else None,
            "ephemerisGenerationRequests": SimulationWithoutPowerEphemerisRequest.from_dict(obj["ephemerisGenerationRequests"]) if obj.get("ephemerisGenerationRequests") is not None else None
        })
        return _obj



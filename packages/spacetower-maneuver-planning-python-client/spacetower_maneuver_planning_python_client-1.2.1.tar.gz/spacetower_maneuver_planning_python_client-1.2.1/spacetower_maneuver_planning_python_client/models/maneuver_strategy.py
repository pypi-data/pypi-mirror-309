# coding: utf-8

"""
    Maneuver Planning API

    Maneuver Planning API

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_maneuver_planning_python_client.models.maneuver_strategy_no_thrust_intervals_inner import ManeuverStrategyNoThrustIntervalsInner
from spacetower_maneuver_planning_python_client.models.thrust_arcs_length import ThrustArcsLength
from spacetower_maneuver_planning_python_client.models.thrust_pattern_configuration import ThrustPatternConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ManeuverStrategy(BaseModel):
    """
    Configuration for the thrust pattern to be used in maneuver computation. The user defines the thrust arc mid-point, arc length or maximum thrust duration, as well as the number of thrust, rest, and shift orbits. The period of a pattern is defined as the sum of the number of thrust orbits and rest orbits 
    """ # noqa: E501
    thrust_pattern_configuration: ThrustPatternConfiguration = Field(alias="thrustPatternConfiguration")
    thrust_arcs_length: ThrustArcsLength = Field(alias="thrustArcsLength")
    no_thrust_during_eclipse: Optional[StrictBool] = Field(default=False, alias="noThrustDuringEclipse")
    no_thrust_intervals: Optional[List[ManeuverStrategyNoThrustIntervalsInner]] = Field(default=None, alias="noThrustIntervals")
    __properties: ClassVar[List[str]] = ["thrustPatternConfiguration", "thrustArcsLength", "noThrustDuringEclipse", "noThrustIntervals"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManeuverStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of thrust_pattern_configuration
        if self.thrust_pattern_configuration:
            _dict['thrustPatternConfiguration'] = self.thrust_pattern_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thrust_arcs_length
        if self.thrust_arcs_length:
            _dict['thrustArcsLength'] = self.thrust_arcs_length.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in no_thrust_intervals (list)
        _items = []
        if self.no_thrust_intervals:
            for _item in self.no_thrust_intervals:
                if _item:
                    _items.append(_item.to_dict())
            _dict['noThrustIntervals'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManeuverStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "thrustPatternConfiguration": ThrustPatternConfiguration.from_dict(obj["thrustPatternConfiguration"]) if obj.get("thrustPatternConfiguration") is not None else None,
            "thrustArcsLength": ThrustArcsLength.from_dict(obj["thrustArcsLength"]) if obj.get("thrustArcsLength") is not None else None,
            "noThrustDuringEclipse": obj.get("noThrustDuringEclipse") if obj.get("noThrustDuringEclipse") is not None else False,
            "noThrustIntervals": [ManeuverStrategyNoThrustIntervalsInner.from_dict(_item) for _item in obj["noThrustIntervals"]] if obj.get("noThrustIntervals") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Maneuver Planning API

    Maneuver Planning API

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_maneuver_planning_python_client.models.orbital_transfer_without_power_system_result import OrbitalTransferWithoutPowerSystemResult

class TestOrbitalTransferWithoutPowerSystemResult(unittest.TestCase):
    """OrbitalTransferWithoutPowerSystemResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbitalTransferWithoutPowerSystemResult:
        """Test OrbitalTransferWithoutPowerSystemResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrbitalTransferWithoutPowerSystemResult`
        """
        model = OrbitalTransferWithoutPowerSystemResult()
        if include_optional:
            return OrbitalTransferWithoutPowerSystemResult(
                final_osculating_orbit = spacetower_maneuver_planning_python_client.models.orbit.Orbit(
                    orbit_type = 'KEPLERIAN', ),
                final_mean_orbit = spacetower_maneuver_planning_python_client.models.orbit.Orbit(
                    orbit_type = 'KEPLERIAN', ),
                final_orbit_tle = spacetower_maneuver_planning_python_client.models.tle.TLE(
                    first_line = '', 
                    second_line = '', ),
                maneuver_schedule = spacetower_maneuver_planning_python_client.models.attitude_based_finite_thrust_schedule.AttitudeBasedFiniteThrustSchedule(
                    maneuver_schedule_type = 'ATTITUDE_BASED_MANEUVER_SCHEDULE', 
                    dated_finite_thrust_schedule = [
                        spacetower_maneuver_planning_python_client.models.finite_thrust_definition.FiniteThrustDefinition(
                            execution_date = '2024-01-01T00:00Z', 
                            duration = 1.337, )
                        ], ),
                attitude_sequence = spacetower_maneuver_planning_python_client.models.attitude_sequence.AttitudeSequence(
                    attitude_sequence_type = 'DATE_TRIGGERED_ATTITUDE_SWITCH', 
                    initial_attitude_law = spacetower_maneuver_planning_python_client.models.attitude_law.AttitudeLaw(
                        attitude_law_type = 'LOCAL_FRAME_ATTITUDE', ), ),
                maneuver_execution_report = spacetower_maneuver_planning_python_client.models.maneuver_execution_report.ManeuverExecutionReport(
                    simulation_duration = 1.337, 
                    total_burns_duration = 1.337, 
                    average_thrust_duration = 1.337, 
                    number_of_revolutions = 1.337, 
                    total_number_of_burns = 1.337, 
                    total_consumption = 1.337, 
                    total_delta_v = 1.337, 
                    total_impulse = 1.337, 
                    thruster_duty_cycle = 0, 
                    final_duty_cycle = 1.337, ),
                data = {
                    'key' : ''
                    },
                output_ephemeris = spacetower_maneuver_planning_python_client.models.output_ephemeris_without_power_system.OutputEphemerisWithoutPowerSystem(
                    attitude_ephemeris = null, 
                    mean_orbit_ephemeris = null, )
            )
        else:
            return OrbitalTransferWithoutPowerSystemResult(
        )
        """

    def testOrbitalTransferWithoutPowerSystemResult(self):
        """Test OrbitalTransferWithoutPowerSystemResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

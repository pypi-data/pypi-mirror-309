# coding: utf-8

"""
    Maneuver Planning API

    Maneuver Planning API

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_maneuver_planning_python_client.models.box_object_with_power_system import BoxObjectWithPowerSystem

class TestBoxObjectWithPowerSystem(unittest.TestCase):
    """BoxObjectWithPowerSystem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BoxObjectWithPowerSystem:
        """Test BoxObjectWithPowerSystem
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BoxObjectWithPowerSystem`
        """
        model = BoxObjectWithPowerSystem()
        if include_optional:
            return BoxObjectWithPowerSystem(
                mass = 1.337,
                drag_coefficient = 1.337,
                x_dimension = 1.337,
                y_dimension = 1.337,
                z_dimension = 1.337,
                solar_array_geometry = spacetower_maneuver_planning_python_client.models.solar_array_geometry.SolarArrayGeometry(
                    radiation_coefficients = spacetower_maneuver_planning_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(
                        specular_reflection_coefficient = 0, 
                        absorption_coefficient = 0, ), 
                    drag_coefficient = 1.337, 
                    surface_area = 1.337, 
                    normal_axis_in_space_object_frame = spacetower_maneuver_planning_python_client.models.vector3_d.Vector3D(
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, ), ),
                radiation_coefficients = spacetower_maneuver_planning_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(
                    specular_reflection_coefficient = 0, 
                    absorption_coefficient = 0, ),
                thruster = spacetower_maneuver_planning_python_client.models.thruster.Thruster(
                    thrust = 1.337, 
                    specific_impulse = 1.337, 
                    axis_in_space_object_frame = spacetower_maneuver_planning_python_client.models.vector3_d.Vector3D(
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, ), ),
                power_system = spacetower_maneuver_planning_python_client.models.power_system.PowerSystem(
                    solar_array_maximum_power = 1.337, 
                    battery_model = spacetower_maneuver_planning_python_client.models.battery_model.BatteryModel(
                        nominal_capacity = 1.337, 
                        depth_of_discharge = 1.337, 
                        initial_charge = 1.337, 
                        minimum_charge_when_firing = 1.337, ), 
                    propulsion_power_model = spacetower_maneuver_planning_python_client.models.propulsion_power_model.PropulsionPowerModel(
                        active_propulsion_power_consumption = 1.337, 
                        warmup_propulsion_power_consumption = 1.337, 
                        warmup_duration = 1.337, ), )
            )
        else:
            return BoxObjectWithPowerSystem(
                mass = 1.337,
                power_system = spacetower_maneuver_planning_python_client.models.power_system.PowerSystem(
                    solar_array_maximum_power = 1.337, 
                    battery_model = spacetower_maneuver_planning_python_client.models.battery_model.BatteryModel(
                        nominal_capacity = 1.337, 
                        depth_of_discharge = 1.337, 
                        initial_charge = 1.337, 
                        minimum_charge_when_firing = 1.337, ), 
                    propulsion_power_model = spacetower_maneuver_planning_python_client.models.propulsion_power_model.PropulsionPowerModel(
                        active_propulsion_power_consumption = 1.337, 
                        warmup_propulsion_power_consumption = 1.337, 
                        warmup_duration = 1.337, ), ),
        )
        """

    def testBoxObjectWithPowerSystem(self):
        """Test BoxObjectWithPowerSystem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

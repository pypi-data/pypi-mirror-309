# coding: utf-8

"""
    Maneuver Planning API

    Maneuver Planning API

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_maneuver_planning_python_client.models.orbital_transfer_without_power_system_request import OrbitalTransferWithoutPowerSystemRequest

class TestOrbitalTransferWithoutPowerSystemRequest(unittest.TestCase):
    """OrbitalTransferWithoutPowerSystemRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbitalTransferWithoutPowerSystemRequest:
        """Test OrbitalTransferWithoutPowerSystemRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrbitalTransferWithoutPowerSystemRequest`
        """
        model = OrbitalTransferWithoutPowerSystemRequest()
        if include_optional:
            return OrbitalTransferWithoutPowerSystemRequest(
                initial_orbit = spacetower_maneuver_planning_python_client.models.orbit.Orbit(
                    orbit_type = 'KEPLERIAN', ),
                maneuver_target = spacetower_maneuver_planning_python_client.models.maneuver_target.ManeuverTarget(
                    maneuver_target_type = 'DELTA', ),
                maneuver_strategy = spacetower_maneuver_planning_python_client.models.maneuver_strategy.ManeuverStrategy(
                    thrust_pattern_configuration = spacetower_maneuver_planning_python_client.models.thrust_pattern_configuration.ThrustPatternConfiguration(
                        thrust_arcs_number = 'ONE', 
                        mean_longitude_shift_from_thrust_arc_center = 1.337, 
                        number_of_thrust_orbits = 56, 
                        number_of_rest_orbits = 56, ), 
                    thrust_arcs_length = spacetower_maneuver_planning_python_client.models.thrust_arcs_length.ThrustArcsLength(
                        thrust_arc_definition = 'THRUST_DURATION', ), 
                    no_thrust_during_eclipse = True, 
                    no_thrust_intervals = [
                        spacetower_maneuver_planning_python_client.models.maneuver_strategy_no_thrust_intervals_inner.ManeuverStrategy_noThrustIntervals_inner(
                            start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                simulation_configuration = spacetower_maneuver_planning_python_client.models.simulation_configuration.SimulationConfiguration(
                    perturbations = [
                        spacetower_maneuver_planning_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'EARTH_POTENTIAL', )
                        ], 
                    integrator_configuration = spacetower_maneuver_planning_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'VARIABLE_STEP', ), ),
                data = {
                    'key' : ''
                    },
                space_object = spacetower_maneuver_planning_python_client.models.box_object_without_power_system.BoxObjectWithoutPowerSystem(
                    mass = 1.337, 
                    drag_coefficient = 1.337, 
                    x_dimension = 1.337, 
                    y_dimension = 1.337, 
                    z_dimension = 1.337, 
                    solar_array_geometry = spacetower_maneuver_planning_python_client.models.solar_array_geometry.SolarArrayGeometry(
                        radiation_coefficients = spacetower_maneuver_planning_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(
                            specular_reflection_coefficient = 0, 
                            absorption_coefficient = 0, ), 
                        drag_coefficient = 1.337, 
                        surface_area = 1.337, 
                        normal_axis_in_space_object_frame = spacetower_maneuver_planning_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), ), 
                    radiation_coefficients = spacetower_maneuver_planning_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(
                        specular_reflection_coefficient = 0, 
                        absorption_coefficient = 0, ), 
                    thruster = spacetower_maneuver_planning_python_client.models.thruster.Thruster(
                        thrust = 1.337, 
                        specific_impulse = 1.337, 
                        axis_in_space_object_frame = spacetower_maneuver_planning_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), ), ),
                ephemeris_generation_requests = spacetower_maneuver_planning_python_client.models.simulation_without_power_ephemeris_request.SimulationWithoutPowerEphemerisRequest(
                    attitude_ephemeris_request = null, 
                    osculating_orbit_ephemeris_request = null, 
                    mean_orbit_ephemeris_request = null, 
                    thrust_vector_ephemeris_request = null, 
                    mass_ephemeris_request = null, )
            )
        else:
            return OrbitalTransferWithoutPowerSystemRequest(
                initial_orbit = spacetower_maneuver_planning_python_client.models.orbit.Orbit(
                    orbit_type = 'KEPLERIAN', ),
                maneuver_target = spacetower_maneuver_planning_python_client.models.maneuver_target.ManeuverTarget(
                    maneuver_target_type = 'DELTA', ),
                maneuver_strategy = spacetower_maneuver_planning_python_client.models.maneuver_strategy.ManeuverStrategy(
                    thrust_pattern_configuration = spacetower_maneuver_planning_python_client.models.thrust_pattern_configuration.ThrustPatternConfiguration(
                        thrust_arcs_number = 'ONE', 
                        mean_longitude_shift_from_thrust_arc_center = 1.337, 
                        number_of_thrust_orbits = 56, 
                        number_of_rest_orbits = 56, ), 
                    thrust_arcs_length = spacetower_maneuver_planning_python_client.models.thrust_arcs_length.ThrustArcsLength(
                        thrust_arc_definition = 'THRUST_DURATION', ), 
                    no_thrust_during_eclipse = True, 
                    no_thrust_intervals = [
                        spacetower_maneuver_planning_python_client.models.maneuver_strategy_no_thrust_intervals_inner.ManeuverStrategy_noThrustIntervals_inner(
                            start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                space_object = spacetower_maneuver_planning_python_client.models.box_object_without_power_system.BoxObjectWithoutPowerSystem(
                    mass = 1.337, 
                    drag_coefficient = 1.337, 
                    x_dimension = 1.337, 
                    y_dimension = 1.337, 
                    z_dimension = 1.337, 
                    solar_array_geometry = spacetower_maneuver_planning_python_client.models.solar_array_geometry.SolarArrayGeometry(
                        radiation_coefficients = spacetower_maneuver_planning_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(
                            specular_reflection_coefficient = 0, 
                            absorption_coefficient = 0, ), 
                        drag_coefficient = 1.337, 
                        surface_area = 1.337, 
                        normal_axis_in_space_object_frame = spacetower_maneuver_planning_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), ), 
                    radiation_coefficients = spacetower_maneuver_planning_python_client.models.reflection_absorption_coefficients.ReflectionAbsorptionCoefficients(
                        specular_reflection_coefficient = 0, 
                        absorption_coefficient = 0, ), 
                    thruster = spacetower_maneuver_planning_python_client.models.thruster.Thruster(
                        thrust = 1.337, 
                        specific_impulse = 1.337, 
                        axis_in_space_object_frame = spacetower_maneuver_planning_python_client.models.vector3_d.Vector3D(
                            x = 1.337, 
                            y = 1.337, 
                            z = 1.337, ), ), ),
        )
        """

    def testOrbitalTransferWithoutPowerSystemRequest(self):
        """Test OrbitalTransferWithoutPowerSystemRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Maneuver Planning API

    Maneuver Planning API

    The version of the OpenAPI document: 1.2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_maneuver_planning_python_client.models.orbital_transfer_with_power_system_request import OrbitalTransferWithPowerSystemRequest

class TestOrbitalTransferWithPowerSystemRequest(unittest.TestCase):
    """OrbitalTransferWithPowerSystemRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbitalTransferWithPowerSystemRequest:
        """Test OrbitalTransferWithPowerSystemRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrbitalTransferWithPowerSystemRequest`
        """
        model = OrbitalTransferWithPowerSystemRequest()
        if include_optional:
            return OrbitalTransferWithPowerSystemRequest(
                initial_orbit = spacetower_maneuver_planning_python_client.models.orbit.Orbit(
                    orbit_type = 'KEPLERIAN', ),
                maneuver_target = spacetower_maneuver_planning_python_client.models.maneuver_target.ManeuverTarget(
                    maneuver_target_type = 'DELTA', ),
                maneuver_strategy = spacetower_maneuver_planning_python_client.models.maneuver_strategy.ManeuverStrategy(
                    thrust_pattern_configuration = spacetower_maneuver_planning_python_client.models.thrust_pattern_configuration.ThrustPatternConfiguration(
                        thrust_arcs_number = 'ONE', 
                        mean_longitude_shift_from_thrust_arc_center = 1.337, 
                        number_of_thrust_orbits = 56, 
                        number_of_rest_orbits = 56, ), 
                    thrust_arcs_length = spacetower_maneuver_planning_python_client.models.thrust_arcs_length.ThrustArcsLength(
                        thrust_arc_definition = 'THRUST_DURATION', ), 
                    no_thrust_during_eclipse = True, 
                    no_thrust_intervals = [
                        spacetower_maneuver_planning_python_client.models.maneuver_strategy_no_thrust_intervals_inner.ManeuverStrategy_noThrustIntervals_inner(
                            start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                simulation_configuration = spacetower_maneuver_planning_python_client.models.simulation_configuration.SimulationConfiguration(
                    perturbations = [
                        spacetower_maneuver_planning_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'EARTH_POTENTIAL', )
                        ], 
                    integrator_configuration = spacetower_maneuver_planning_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'VARIABLE_STEP', ), ),
                data = {
                    'key' : ''
                    },
                space_object = spacetower_maneuver_planning_python_client.models.box_object_with_power_system.BoxObjectWithPowerSystem(),
                ephemeris_generation_requests = None
            )
        else:
            return OrbitalTransferWithPowerSystemRequest(
                initial_orbit = spacetower_maneuver_planning_python_client.models.orbit.Orbit(
                    orbit_type = 'KEPLERIAN', ),
                maneuver_target = spacetower_maneuver_planning_python_client.models.maneuver_target.ManeuverTarget(
                    maneuver_target_type = 'DELTA', ),
                maneuver_strategy = spacetower_maneuver_planning_python_client.models.maneuver_strategy.ManeuverStrategy(
                    thrust_pattern_configuration = spacetower_maneuver_planning_python_client.models.thrust_pattern_configuration.ThrustPatternConfiguration(
                        thrust_arcs_number = 'ONE', 
                        mean_longitude_shift_from_thrust_arc_center = 1.337, 
                        number_of_thrust_orbits = 56, 
                        number_of_rest_orbits = 56, ), 
                    thrust_arcs_length = spacetower_maneuver_planning_python_client.models.thrust_arcs_length.ThrustArcsLength(
                        thrust_arc_definition = 'THRUST_DURATION', ), 
                    no_thrust_during_eclipse = True, 
                    no_thrust_intervals = [
                        spacetower_maneuver_planning_python_client.models.maneuver_strategy_no_thrust_intervals_inner.ManeuverStrategy_noThrustIntervals_inner(
                            start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                space_object = spacetower_maneuver_planning_python_client.models.box_object_with_power_system.BoxObjectWithPowerSystem(),
        )
        """

    def testOrbitalTransferWithPowerSystemRequest(self):
        """Test OrbitalTransferWithPowerSystemRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

import dataclasses
import pathlib
import typing

__all__ = [
    "PackTarget",
    "PackConfig",
    "LibraryInfo",
]

from functools import cached_property


@dataclasses.dataclass
class PackTarget:
    src: pathlib.Path
    deps: typing.Set[str]
    ast: typing.Set[str]
    extra: typing.Set[str]
    code: str

    def __repr__(self):
        return f"[src={self.src.name}, ast={self.ast}, deps={self.deps}], extra={self.extra}"

    def union_ast(self, ast_tree: typing.Set[str]):
        self.ast = self.ast.union(ast_tree)

    @cached_property
    def root_dir(self) -> pathlib.Path:
        return self.src.parent

    @cached_property
    def dist_dir(self) -> pathlib.Path:
        return self.src.parent / "dist"

    @cached_property
    def runtime_dir(self) -> pathlib.Path:
        return self.dist_dir / "runtime"

    @cached_property
    def packages_dir(self) -> pathlib.Path:
        return self.dist_dir / "site-packages"


@dataclasses.dataclass
class PackConfig:
    """Build config generated by parser"""

    targets: typing.Dict[str, PackTarget]


@dataclasses.dataclass
class LibraryInfo:
    package_name: str
    version: typing.List[str]
    build_tag: str
    abi_tag: str
    platform_tag: str
    filepath: pathlib.Path

    def __repr__(self):
        return f"{self.package_name}-{self.version}"

    @staticmethod
    def from_path(path: pathlib.Path):
        package_name, *version, build_tag, abi_tag, platform_tag = path.stem.split("-")
        return LibraryInfo(
            package_name=package_name,
            version=version,
            build_tag=build_tag,
            abi_tag=abi_tag,
            platform_tag=platform_tag,
            filepath=path,
        )
